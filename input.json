{
    "paper_id": "2504.13842",
    "paper_url": "http://arxiv.org/abs/2504.13842v1",
    "title": "The Model Counting Competitions 2021-2023",
    "authors": [
        "Johannes K. Fichte",
        "Markus Hecher"
    ],
    "abstract": "Modern society is full of computational challenges that rely on probabilistic reasoning, statistics, and combinatorics. Interestingly, many of these questions can be formulated by encoding them into propositional formulas and then asking for its number of models. With a growing interest in practical problem-solving for tasks that involve model counting, the community established the Model Counting (MC) Competition in fall of 2019 with its first iteration in 2020. The competition aims at advancing applications, identifying challenging benchmarks, fostering new solver development, and enhancing existing solvers for model counting problems and their variants. The first iteration, brought together various researchers, identified challenges, and inspired numerous new applications. In this paper, we present a comprehensive overview of the 2021-2023 iterations of the Model Counting Competition. We detail its execution and outcomes. The competition comprised four tracks, each focusing on a different variant of the model counting problem. The first track centered on the model counting problem (MC), which seeks the count of models for a given propositional formula. The second track challenged developers to submit programs capable of solving the weighted model counting problem (WMC). The third track was dedicated to projected model counting (PMC). Finally, we initiated a track that combined projected and weighted model counting (PWMC). The competition continued with a high level of participation, with seven to nine solvers submitted in various different version and based on quite diverging techniques.",
    "year": 2025,
    "tables": [
        "[H]\n  \\centering\n   \\resizebox{0.85\\columnwidth}{!}{%\n\\begin{tabular}{l|c|c|c|c|c|c|rlc}\n  \\toprule\n  Solver                  & \\MC & \\WMC & \\PMC & \\PWMC & Year    & Type   & Reference                                              & Download                                                                                                                                             & License   \\\\\n  \\midrule                                                                            \n  \\solver{ADDMC}          & \\cm & \\cm  &      &       & 2020    & \\exact & \\cite{DudekPhanVardi20a}                               & \\href{https://github.com/vardigroup/ADDMC}{\\sources}                                                                                                 & MIT       \\\\\n  \\solver{Alt-DPMC}       & \\cm & \\cm  &      &       & 2023    & \\exact & na                                                     & \\href{https://github.com/allrtaken/DPMC}{\\sources}                                                                                                   & MIT       \\\\\n  \\solver{ApproxMC}       & \\cm & \\cm  & \\cm  &       & 2023\\pf & \\app   & \\cite{ChakrabortyEtAl14a}                              & \\href{https://github.com/meelgroup/approxmc}{\\sources}                                                                                               & MIT       \\\\\n  \\solver{c2d}            & \\cm & \\cm  & \\cm  & \\cm   & 2022    & \\arb   & \\cite{Darwiche04a}                                     & \\href{http://reasoning.cs.ucla.edu/c2d/download.php}{\\binary}                                                                                        & na        \\\\\n  \\solver{D4}             & \\cm & \\cm  & \\cm  & \\cm   & 2023    & \\exact & \\cite{LagniezMarquis17a}                               & \\href{https://github.com/crillab/D4}{\\sources}                                                                                                       & LGPL3     \\\\\n  \\solver{DPMC}           & \\cm & \\cm  &      &       & 2023    & \\exact & \\cite{DudekPhanVardi20b}                               & \\href{https://github.com/vardigroup/DPMC}{\\sources}                                                                                                  & MIT       \\\\\n  \\solver{ExactMC}        & \\cm & \\cm  &      &       & 2023    & \\exact & \\cite{LaiMeelYap21a}                                   & \\href{https://github.com/meelgroup/KCBox}{\\sources}                                                                                                  & MIT       \\\\\n  \\solver{GANAK}          & \\cm & \\cm  & \\cm  &       & 2023    & \\exact & \\cite{SharmaEtAl19a}                                   & \\href{https://github.com/meelgroup/ganak}{\\sources}                                                                                                  & MIT       \\\\\n  \\solver{GPMC}           & \\cm & \\cm  & \\cm  & \\cm   & 2023    & \\arb   & \\cite{SuzukiHashimotoSakai15a,SuzukiHashimotoSakai17a} & \\href{https://git.trs.css.i.nagoya-u.ac.jp/k-hasimt/GPMC}{\\sources}                                                                                  & MIT       \\\\\n  \\solver{mcTw}           & \\cm &      &      &       & 2020    & \\exact & na                                                     & \\href{https://github.com/swacisko/mc-2020}{\\sources}                                                                                                 & MIT       \\\\\n  \\solver{miniC2D}        & \\cm & \\cm  &      &       & 2020    & \\arb   & \\cite{OztokDarwiche15a}                                & \\href{http://reasoning.cs.ucla.edu/minic2d/}{\\binary}                                                                                                & na        \\\\\n  \\solver{mtmc}           & \\cm & \\cm  &      &       & 2022    & \\exact & na                                                     & \\href{https://zenodo.org/records/4899862}{\\sources}                                                                                                                        & GPL2      \\\\\n  \\solver{pc2dd}          & \\cm &      & \\cm  &       & 2021    & \\exact & \\cite{IsogaiHashimotoSakai21a}                         & \\href{https://git.trs.css.i.nagoya-u.ac.jp/t_isogai/cnf2bdd}{\\sources}                                                                               & MIT       \\\\\n  \\solver{ProCount}       & \\cm &      &      &       & 2021    & \\exact & \\cite{DudekPhanVardi21a}                               & \\href{https://github.com/vardigroup/DPMC/commits/procount}{\\sources}                                                                                 & MIT       \\\\\n  \\solver{sharpSAT-td}    & \\cm & \\cm  & \\cm  &       & 2023    & \\arb   & \\cite{KorhonenJarvisalo21a,KorhonenJarvisalo23a}       & \\href{https://github.com/Laakeri/sharpsat-td}{\\sources}                                                                                              & MIT       \\\\\n  \\solver{SUMC2}          & \\cm &      &      &       & 2021    & \\exact & \\cite{Spence22}                                                     & \\href{https://github.com/ivor-spence/sumc}{\\sources}                                                                                                 & GPL3      \\\\\n  \\midrule\n  \\solver{Approxcount}    & \\cm &      &      &       & --      & \\app   & \\cite{WeiSelman05a}                                    & \\href{http://www.cs.cornell.edu/~sabhar/software/approxcount/approxcount12.tar.bz2}{\\sources}                                                        & na        \\\\\n  \\solver{Cachet}         & \\cm & \\cm  &      &       & --      & \\exact & \\cite{SangEtAl04}                                      & \\href{https://web.archive.org/web/20220121083854/https://www.cs.rochester.edu/u/kautz/Cachet/cachet-wmc-1-21.zip}{\\sources\\arch}                     & zchaff    \\\\ \n  \\solver{\\bddm}          & \\cm &      &      &       & --      & \\arb   & \\cite{TodaSoh15a}                                      & \\href{http://www.sd.is.uec.ac.jp/toda/code/cnf2obdd.html}{\\sources}                                                                                  & MIT       \\\\\n  \\solver{BPCount}        & \\cm &      &      &       & --      & \\app   & \\cite{KrocSabharwalSelman11a}                          & na                                                                                                                                                   & na        \\\\\n  \\solver{cnf2eadt}       & \\cm &      &      &       & --      & \\arb   & \\cite{KoricheLagniezMarquisThomas13a}                  & \\href{http://www.cril.univ-artois.fr/KC/eadt.html}{\\binary}                                                                                          & na        \\\\\n  \\solver{countAntom}     & \\cm &      &      &       & --      & \\exact & \\cite{BurchardSchubertBecker15a}                       & \\href{https://projects.informatik.uni-freiburg.de/projects/countantom}{\\sources}                                                                     & MIT       \\\\\n  \\solver{dCountAntom}    & \\cm &      &      &       & --      & \\exact & \\cite{BurchardSchubertBecker16a}                       & \\href{}{na}                                                                                                                                          & na        \\\\\n  \\solver{dpdb}           & \\cm & \\cm  &      &       & --      & \\arb   & \\cite{FichteEtAl20}                                    & \\href{https://github.com/hmarkus/dp_on_dbs/tree/master}{\\sources}                                                                                    & GPL3      \\\\\n  \\solver{DMC}            & \\cm &      &      &       & --      & \\arb   & \\cite{LagniezMarquisSzczepanski18a}                    & \\href{http://www.cril.univ-artois.fr/KC/dmc.html}{\\binary}                                                                                           & na        \\\\\n  \\solver{DSHARP}         & \\cm &      &      &       & --      & \\arb   & \\cite{MuiseEtAl12a}                                    & \\href{https://github.com/QuMuLab/dsharp}{\\sources}                                                                                                   & MIT       \\\\\n  \\solver{gpusat}         & \\cm & \\cm  &      &       & --      & \\exact & \\cite{FichteEtAl18c}                                   & \\href{https://github.com/daajoe/GPUSAT}{\\sources}                                                                                                    & GPL3      \\\\\n  \\solver{FocusedFlatSAT} & \\cm &      &      &       & --      & \\app   & \\cite{ErmonGomesSabharwal11a}                          & \\href{https://web.archive.org/web/20201014145213/https://cs.stanford.edu/~ermon/code/FocusedFlatSAT.zip}{\\sources\\arch}                              & na        \\\\\n  \\solver{nesthdb}        & \\cm &      & \\cm  &       & --      & \\arb   & \\cite{HecherThierWoltran20}                            & \\href{https://github.com/hmarkus/dp_on_dbs/tree/nesthdb}{\\sources}                                                                                   & GPL3      \\\\         \n  \\solver{MBound}         & \\cm &      &      &       & --      & \\app   & \\cite{GomesSabharwalSelman06a}                         & \\href{https://web.archive.org/web/20211219191941/http://www.cs.cornell.edu/~sabhar/software/xor-scripts/xor-scripts.zip}{\\sources\\arch}              & na        \\\\\n  \\solver{MiniCount}      & \\cm &      &      &       & --      & \\app   & \\cite{KrocSabharwalSelman11a}                          & na                                                                                                                                                   & na        \\\\\n  \\solver{projMC}         & \\cm &      & \\cm  &       & --      & \\exact & \\cite{LagniezMarquis19a}                               & \\href{http://www.cril.univ-artois.fr/KC/projmc.html}{\\binary}                                                                                        & na        \\\\\n  \\solver{SampleCount}    & \\cm &      &      &       & --      & \\app   & \\cite{GomesHoffmannSabharwal07a}                       & \\href{https://web.archive.org/web/20160830063246/http://www.cs.cornell.edu/~sabhar/software/samplecount/samplecount-1.0-04092007.zip}{\\sources\\arch} & na        \\\\\n  \\solver{sdd}            & \\cm & \\cm  &      &       & --      & \\exact & \\cite{Darwiche11a}                                     & \\href{http://reasoning.cs.ucla.edu/sdd/}{\\binary}                                                                                                    & Apache2.0 \\\\ %\n  \\solver{sharpCDCL}      & \\cm &      &      &       & --      & \\exact & na                                                     & \\href{https://github.com/conp-solutions/sharpCDCL}{\\sources}                                                                                         & MIT       \\\\\n  \\solver{sharpSAT}       & \\cm &      &      &       & --      & \\arb   & \\cite{Thurley06a}                                      & \\href{https://github.com/marcthurley/sharpSAT}{\\sources}                                                                                             & MIT       \\\\\n  \\solver{sharpSAT-td-KC} & \\cm & \\cm  &      &       & --      & \\arb   & \\cite{KieselEiter23a}                                  & \\href{https://github.com/raki123/sharpsat-td}{\\sources}                                                                                              & MIT       \\\\\n  \\solver{sts}            & \\cm &      &      &       & --      & \\app   & \\cite{ErmonGomesSelman12a}                             & \\href{https://github.com/dorcoh/EntropyApproximator}{\\sources}                                                                                       & na        \\\\ \n  \\solver{TensorOrder}    & \\cm & \\cm  &      &       & --      & \\exact & \\cite{DudekVardi20}                                    & \\href{https://github.com/vardigroup/TensorOrder}{\\sources}                                                                                           & MIT       \\\\\n  \\solver{XorSample}      & \\cm &      &      &       & --      & \\app   & \\cite{GomesSabharwalSelman06b}                         & na                                                                                                                                                   & na        \\\\\n  \\bottomrule\n\\end{tabular}\n}%\n\\caption{%\n  Overview on available implementations for model counting.\n  Each row states a solver (Solver), its features, %\n  the scientific reference,\n  a hyperlink (in the PDF) to download the solver sources or its binaries, and\n  the solver's licence.\n  Solvers in the upper part of the table participated in at least one of the \n  2020--2023 edition of the model counting competition. Its last participation\n  is stated in the Year column.\n  Solvers in the lower part are available in the literature.\n  A symbol ``\\cm'' indicates that the solver\n  in the respective row solves the problem. \\MC refers to model counting, \n  \\WMC to weighted model counting, \\PMC to projected model counting, \n  and \\PWMC to projected weighted model counting. The problems are defined in Section~\\ref{sec:prelimns}.\n  The Type column states whether the solver implements an approximate algorithm (\\app),\n  an exact algorithm with potentially small precision loss during handing of numbers (\\exact), or\n  an exact algorithm with arbitrary precision number handling (\\arb).\n  For more details on the topic of precision of solvers, we refer to\n  Section~\\ref{sec:prelimns:precs}.\n  ``$\\dagger$'' indicates that the solver participated as part of a portfolio.\n  ``$\\ddagger$'' indicates that the source code or binary is available via\n  the \\href{https://archive.org/}{Internet Archive}.\n  URLs for sources and binaries link to the most recent version.\n  For software heritage and replication purposes, we provide an archived data set\n  that contains all original submissions in a public data repository~\\cite{CERN13a}.\n}\n\\label{tab:mc-solvers}\n",
        "[t]\n  \\centering\n  \\begin{subtable}[h]{0.35\\textwidth}\n    \\centering\n    \\begin{tabular}{lrr}\n      \\toprule\n      Track & \\err & \\wrg\\\\\n      \\midrule\n      Track 1 (\\MC)  & 0.1\\% & $\\leq 20$\\\\\n      Track 2 (\\WMC) & 1.0\\% & $\\leq 20$ \\\\ \n      Track 3 (\\PMC) & 1.0\\% & $\\leq 20$ \\\\\n      Track 4 (\\MC) & 20\\% & $\\leq 20$\\\\\n      \\bottomrule\n    \\end{tabular}\n    \\caption{%\n      2021 Competition requirements enforced by track regardless of\n      the type of the solver.\n    }\\label{tab:accuracy:2021}\n  \\end{subtable}\n  \\hspace{1em}\n  \\begin{subtable}[h]{0.55\\textwidth}\n    \\centering\n    \\resizebox{1\\textwidth}{!}{%\n    \\begin{tabular}{lrrr}\n      \\toprule\n       Ranking & \\err & $\\alpha$ & \\wrg\\\\\n      \\midrule\n       A: Exact (arbitrary precision)  & 0\\% & -- & 0 \\\\\n       B: Exact (small precision loss)  & 0.1\\% & -- & $\\leq 20$ \\\\\n       C: Approximate (small precision loss)  & -- & 0.8 & $\\leq 20$\\\\\n      \\bottomrule\n    \\end{tabular}\n    }%\n    \\caption{2022/2023 Competition requirements enforced by ranking\n      according to the type and declared precision in the output by\n      the solver.}\\label{tab:accuracy:2022ff}\n  \\end{subtable}\n  \\caption{Expected accuracy of participating solvers during the 2021--2023 Model Counting Competitions.\\\\ %\n    $\\err$~refers to the upper bound on the error, %\n    $\\alpha$~refers to the expected approximation factor, and %\n    $\\wrg$ refers to the maximum number of not accepted, i.e., wrong solutions.\n  }%\n  \\label{tab:accuracy}\n",
        "[tb]\n  \\centering\n  \\begin{tabular}{HlHHHrrHrrrrr}\n    \\toprule\n       & set    & public/private & solved & twub & \\#  & twub[Mdn] & twub[max]  & n[Mdn]  & n[max]  & m[Mdn] & c[Mdn]  & log10[Mdn] \\\\\n    \\midrule\n8 & 2021 & private & -- & + & 10 & 435 & 507,949 & 3,231 & 101,451 & 76,694 & 18 & -- \\\\\n    28 & 2022   & private        & --     & +    & 17  & 195       & 507,949.00 & 729     & 50,461  & 10,543 & 18      & --       \\\\\n    48 & 2023   & private        & --     & +    & 10  & 172       & 77,348.00  & 3,834   & 130,982 & 26,873 & 40      & --       \\\\\n    \\midrule\n9 & 2021 & private & + & + & 90 & 56 & 737 & 1,494 & 119,057 & 5,396 & 36 & 21 \\\\\n    29 & 2022   & private        & +      & +    & 83  & 76        & 964.00     & 759     & 349,990 & 3,174  & 20      & 14       \\\\\n    49 & 2023   & private        & +      & +    & 85  & 67        & 631,270.00 & 3,754   & 158,705 & 18,764 & 66      & 16       \\\\\n    50 & 2023   & private        & +      & --   & 5   & --        & --         & 137,358 & 217,363 & 82,069 & 129,614 & 39,088   \\\\\n    \\bottomrule\n \\end{tabular}\n \\caption{Characteristics of instances from Track 1 (MC) grouped by unsolved and solved. %\n   ``\\#'' refers to number of instances,\n   ``twub'' to an upper bound of the treewidth of the primal\n   graph,\n   ``[Mdn]''  to the median, ``n'' to the number of variables,\n   ``m'' to the number of clauses, ``log10'' to the model count in\n   log10-notion, and ``--'' means that the instances are unsolved or\n   we could not compute an upper bound on the treewidth.\n }\n \\label{tab:track1:character}\n",
        "[t!]\n  \\centering\n  \\begin{subtable}[t]{0.48\\textwidth}\n    \\resizebox{.95\\textwidth}{!}{%\n  \\begin{tabular}{c@{\\hspace{0.5ex}}c@{\\hspace{0.5ex}}clHcc}\n    \\toprule\n    0\\% & 0.1\\% & 0.8 & Submission           & Authors                                                                 & solved \\\\\n    \\midrule\n    1   & 1     & 1   & \\solver{SharpSAT-TD}          & Tuukka Korhonen, Matti J\u00e4rvisalo                                        & 82     \\\\\n        &       & 2   & \\solver{Arjun-GANAK-ApproxMC} & Mate Soos, Kuldeep S. Meel                                              & 79     \\\\\n    2   & 2     & 3   & \\solver{D4}                   & Pierre Marquis, Jean-Marie Lagniez                                      & 75     \\\\\n        & 3     & 4   & \\solver{ExactMC-Arjun}        & Yong Lai, Zhenghang Xu, Minghao Yin,  Kuldeep S. Meel,  Roland H.C. Yap & 74     \\\\\n        & 4     & 5   & \\solver{Arjun-GANAK}          & Mate  Soo,  Kuldeep S. Meel                                             & 71     \\\\\n    3   & 5     & 6   & \\solver{GPMC}                 & Kenji Hashimoto,  Shota Yap                                             & 64     \\\\\n        & 6     & 7   & \\solver{Alt-DPMC}             & Aditya Shrotr,  Moshe Vardi                                             & 50     \\\\\n    4   & 7     & 8   & \\solver{DPMC}                 & Vu Phan, Jeffrey Dudek, Moshe Vardi                                     & 43     \\\\\n        & 8     & 9   & \\solver{mtmc}                 & Ivor Spence                                                             & 34     \\\\\n    \\bottomrule\\\\\n  \\end{tabular}\n  }%\n  \\caption{Track 1 (MC): 2023 Iteration}\n  \\end{subtable}\n  \\begin{subtable}[t]{0.48\\textwidth}\n    \\resizebox{.95\\textwidth}{!}{%\n  \\begin{tabular}{c@{\\hspace{0.5ex}}c@{\\hspace{0.5ex}}cp{10em}Hc}\n    \\toprule\n    0\\% & 0.1\\% & 0.8 & Submission                 & Authors                                                  & solved \\\\\n    \\midrule\n    1   & 1     &     & \\solver{SharpSAT-TD-Arjun}          & Mate Soos Kuldeep S. Meel                                & 79     \\\\\n    2   & 2     &     & \\solver{ExactMC}                    & Yong Lai, Kuldeep S. Meel. Roland H.C. Yap, Zhenghang Xu & 77     \\\\\n    3    &  3     &     & \\solver{SharpSAT-TD}                & Tuukka Korhonen, Matti J\u00e4rvisalo                         & 77     \\\\\n    4   & 4     &     & \\solver{D4}                         & Pierre Marquis, Jean-Marie Lagniez                       & 76     \\\\\n        &       & 1   & \\solver{SharpSAT-TD-Arjun-Appr} & Mate Soos, Kuldeep S. Meel                               & 74     \\\\\n    5   & 5     &     & \\solver{GPMC}                       & Kenji Hashimoto, Shota Yap                               & 69     \\\\\n    6   & 6     &     & \\solver{mtmc}                       & Ivor Spence                                              & 66     \\\\\n    7   & 7     &     & \\solver{DPMC}                       & Vu Phan, Jeffrey Dudek, Moshe Vardi                      & 61     \\\\\n        & 8     &     & \\solver{TwG}                        & Sylvester Swats                                          & 53     \\\\\n    8   & 9     &     & \\solver{c2d}                        & Adnan Darwiche                                           & 50     \\\\\n    \\bottomrule\n  \\end{tabular}\n  }%\n  \\caption{Track 1 (MC): 2022 Iteration}\n  \\end{subtable}\n  \\\\[1em]%\n  \\begin{subtable}[t]{0.48\\textwidth}\n    \\centering\n  \\begin{tabular}{llHlHH}\n    \\toprule\n    \\# & Submission    & Authors                                      & solved & excl \\\\\n    \\midrule\n    1  & \\solver{SharpSAT-TD}   & Tuukka Korhonen,  Matti J\u00e4rvisalo            & 78     & 0    \\\\\n    2  & \\solver{narasimha} & Sharma,  Lai, Xu,  Roy, Yap, Mate Soos, Meel & 61     & 1    \\\\ %\n    3  & \\solver{D4}            & Jean-Marie Lagniez,  Pierre Marquis          & 51     & 0    \\\\\n    4  & \\solver{GPMC}          & Kenji Hashimoto, Takaaki Isogai              & 38     & 0    \\\\\n    5  & \\solver{MC2021\\_swats} & Sylwester Swat                               & 34     & 0    \\\\\n       & \\solver{DPMC}          & Vu Phan, Jeffrey Dudek, Moshe Vardi          & 34     & 0    \\\\\n    7  & \\solver{c2d}           & Adnan Darwiche                               & 29     & 0    \\\\\n    8  & \\solver{bob}           & Daniel Pehoushek                             & 11     & 0    \\\\\n    9  & \\solver{SUMC2}         & Ivor Spence                                  & 7      & 0    \\\\\n    \\bottomrule\n  \\end{tabular}\n  \\caption{Track 1 (MC): 2021 Iteration}\n  \\end{subtable}\n  \\begin{subtable}[t]{0.48\\textwidth}\n    \\centering\n    \\begin{tabular}{llHlH}\n      \\toprule\n      \\# & Submission           & From                         & solved & excl \\\\\n      \\midrule\n      1 & \\solver{SharpSAT-TD}          & Helsinki                     & 68     & 0    \\\\\n      2 & \\solver{narasimha}         & Singapore, Kanpur, Changchun & 65     & 0    \\\\\n      3 & \\solver{D4}             & Lens                         & 53     & 0    \\\\\n      4 & \\solver{c2d}         & LA                           & 50     & 0    \\\\\n      5 & \\solver{DPMC}          & Huston                       & 48     & 0    \\\\\n      6 & \\solver{MC2021\\_swats}         & Poznan                       & 40     & 0    \\\\\n      7 & \\solver{SUMC2}                & Belfast                      & 26     & 0   \\\\\n      \\bottomrule\\\\\\\\\n    \\end{tabular}\n    \\caption{Track 4 (MC): 2021 Iteration}\n  \\end{subtable}\n  \\caption{Results Track 1 (MC). Number of solved private instances out of 100. Table~(d) contains an additional set \n    of model counting instances (2021 Track~4), which was evaluated on less restrictive requirements for precision.\n  } %\n  \\label{tab:mc}\n",
        "[t]\n  \\centering\n  \\begin{subtable}[t]{0.48\\textwidth}\n    \\centering\n  \\begin{tabular}{cclHcc}\n    \\toprule\n    0\\% & 0.1\\% & Submission    & Authors                                                                & solved        \\\\\n    \\midrule\n    1   & 1     & \\solver{SharpSAT-TD}   & Tuukka Korhonen, Matti J\u00e4rvisalo                                       & 75            \\\\\n        & 2     & \\solver{D4}            & Pierre Marquis, Jean-Marie Lagniez                                     & 67            \\\\\n    2   & 3     & \\solver{GPMC}          & Kenji Hashimoto, Shota Yap                                             & 62            \\\\\n    3   & 4     & \\solver{ExactMC-Arjun} & Yong Lai, Zhenghang Xu, Minghao Yin,Kuldeep S. Meel,  Roland H.C. Yap, & 59            \\\\\n        & 5     & \\solver{Alt-DPMC}      & Aditya Shrotri, Moshe Vardi                                            & 36            \\\\\n        & 6     & \\solver{DPMC}          & Vu Phan, Jeffrey Dudek, Moshe Vardi                                    & 25            \\\\\n        & 7     & \\solver{mtmc}          & Ivor Spence                                                            & 20            \\\\\n    \\bottomrule\n  \\end{tabular}\n  \\caption{Track 2 (WMC) 2023 Iteration}\n  \\end{subtable}\n  \\begin{subtable}[t]{0.48\\textwidth}\n    \\centering\n  \\begin{tabular}{cclHll}\n    \\toprule\n    0\\% & 0.1\\% & Submission    & Authors                                                                & solved        \\\\\n    \\midrule\n    1   & 1     & \\solver{SharpSAT-TD}   & Tuukka Korhonen, Matti J\u00e4rvisalo                                       & 75            \\\\\n        & 2     & \\solver{GPMC}          & Kenji Hashimoto, Shota Yap                                             & 68            \\\\\n        & 3     & \\solver{D4}            & Pierre Marquis, Jean-Marie Lagniez                                     & 66            \\\\\n    2   & 4     & \\solver{c2d}           & Adnan Darwiche                                                         & 60            \\\\\n    3   & 5     & \\solver{DPMC}          & Vu Phan, Jeffrey Dudek, Moshe Vardi                                    & 43            \\\\\n    \\bottomrule\\\\\\\\\n  \\end{tabular}\n  \\caption{Track 2 (WMC) 2022 Iteration}\n  \\end{subtable}                                                                                                         \\\\[1em]\n  \\begin{subtable}[t]{0.48\\textwidth}\n    \\centering\n  \\begin{tabular}{cHlHcc}\n    \\toprule\n    \\#  &       & Submission    & Authors                                                                & solved & excl \\\\\n    \\midrule\n    1   & 1     & \\solver{SharpSAT-TD}   & Tuukka Korhonen, Matti J\u00e4rvisalo                                       & 90     & 1    \\\\\n    2   &       & \\solver{D4}            & Jean-Marie Lagniez, Pierre Marquis                                     & 80     & 0    \\\\\n    3   &       & \\solver{c2d}           & Adnan Darwiche                                                         & 79     & 0    \\\\\n    4   &       & \\solver{DPMC}          & Vu Phan, Jeffrey Dudek Moshe Vardi                                     & 46     & 0    \\\\\n    5   &       & \\solver{narsimha}  & Sharma,  Lai, Xu,  Roy, Yap,  Soos,  Meel                              & 25     & 37   \\\\\n    \\bottomrule\n  \\end{tabular}\n  \\caption{Track 2 (WMC) 2021 Iteration}\n  \\end{subtable}\n  \\caption{Results Track 2 (WMC)}\n  \\label{tab:summary:wmc}\n",
        "[t]\n  \\centering\n  \\begin{subtable}[t]{0.48\\textwidth}\n    \\centering\n    \\resizebox{.95\\textwidth}{!}{%\n  \\begin{tabular}{ccclHcc}\n    \\toprule\n    0\\% & 0.1\\% & 0.8 & Submission           & Authors                                                              & solved \\\\\n    \\midrule\n       &      & 1   & \\solver{Arjun-GANAK-ApproxMC} & Mate Soos Kuldeep S. Meel                                            & 81     \\\\\n    1  & 1    & 2   & \\solver{D4}                   & Pierre MarquisJean-Marie Lagniez                                     & 71     \\\\\n    2  & 2    & 3   & \\solver{GPMC}                 & Kenji Hashimoto, Shota Yap  & 67     \\\\\n    3  & 3    & 4   & \\solver{Arjun-GANAK}          & Mate Soos Kuldeep S. Meel                                            & 64     \\\\\n    4  & 4    & 5   & \\solver{DPMC}                 & Vu Phan, Jeffrey Dudek, Moshe Vardi                                  & 36     \\\\\n       & X    & X   & \\solver{Alt-DPMC}             & Aditya Shrotri, Moshe Vardi & 12     \\\\\n       & 5    & 6   & \\solver{mtmc}                 & Ivor Spence                                                          & 4     \\\\\n    \\bottomrule\n  \\end{tabular}\n  }%\n  \\caption{Track 3 (PMC) 2023}\n  \\end{subtable}\n \\begin{subtable}[t]{0.48\\textwidth}\n   \\centering\n   \\resizebox{.95\\textwidth}{!}{%\n    \\begin{tabular}{lllHl}\n      \\toprule\n      0\\% & 0.8 & Submission & Authors                              & solved \\\\\n      \\midrule\n       & 1 & \\solver{GANAK (approx)} & Mate Soos and Kuldeep Meel & 83\\\\\n      1 & 2 & \\solver{GPMC}       & Kenji Hashimoto, Shota Yap           & 72     \\\\\n      2 & 3&\\solver{D4}         & Pierre Marquis, Jean-Marie Lagniez   & 71     \\\\\n      3 & 4&\\solver{GANAK (exact)}      & Mate Soos, Kuldeep Meel              & 56     \\\\\n      4 & 5& \\solver{DPMC}       & Vu Phan, Jeffrey Dudek, Moshe Vardi  & 26    \\\\\n      \\bottomrule\n    \\end{tabular}\n    }%\n    \\caption{Track 3 (PMC) 2022}\n  \\end{subtable}\n  \\\\[1em]\n  \\begin{subtable}[t]{0.48\\textwidth}\n    \\centering\n    \\begin{tabular}{llHlHH}\n      \\toprule\n      \\# & Submission    & Authors                                   & solved & excl \\\\\n      \\midrule\n      1  & \\solver{GPMC}          & Kenji Hashimoto, Takaaki Isogai           & 70   & 0             \\\\\n      2  & \\solver{D4}            & Jean-Marie Lagniez, Pierre Marquis        & 57   & 0             \\\\\n      3  & \\solver{narasimha} & Sharma,  Lai, Xu,  Roy, Yap,  Soos,  Meel & 52$^\\dagger$   & 22            \\\\\n      4  & \\solver{pc2bdd}        & Kenji Hashimoto, Takaaki Isogai           & 41   & 0             \\\\\n      5  & \\solver{ProCount}      & Vu PhanJeffrey Dudek Moshe Vardi          & 21   & 0             \\\\\n      6  & \\solver{c2d}           & Adnan Darwiche                            & 4    & 0             \\\\\n      \\bottomrule\n    \\end{tabular}\n    \\caption{Track 3 (PMC) 2021}\n  \\end{subtable}\n  \\caption{Results Track 3 (PMC). $^\\dagger$: we excluded 22 instances,\n    which were within 0.8 approximation factor but not within the expected\n    margin for the 2021 iteration.\n  }%\n  \\label{tab:summary:pmc}\n",
        "[t!]\n  \\centering\n  \\begin{subtable}[t]{0.48\\textwidth}\n    \\centering\n    \\begin{tabular}{lllHl}\n      \\toprule\n      0\\% & 0.1\\% & Submission & Authors & solved \\\\\n      \\midrule\n      1 & 1 & \\solver{GPMC} & Kenji Hashimoto, Shota Yap & 82 \\\\\n          & 2 & \\solver{D4} & Pierre Marquis, Jean-Marie Lagniez & 72 \\\\\n      2 & 3 & \\solver{DPMC} & Vu Phan, Jeffrey Dudek, Moshe Vardi & 39 \\\\\n          & 4 & \\solver{Alt-DPMC}$^\\dagger$ & Aditya Shrotri, Moshe Vardi & 37\\\\\n      \\bottomrule\n    \\end{tabular}\n    \\caption{Track 4 (PWMC) 2023}\n  \\end{subtable}\n      \\begin{subtable}[t]{0.48\\textwidth}\n    \\centering\n    \\begin{tabular}{lllHl}\n      \\toprule\n      0\\% & 0.1\\% & Submission & Authors & solved\\\\\n      \\midrule\n          & 1 & \\solver{GPMC} & Kenji Hashimoto, Shota Yap           & 79 \\\\\n      1 & 2 & \\solver{DPMC} & Vu Phan, Jeffrey Dudek, Moshe Vardi & 35\\\\\n      \\bottomrule\\\\\\\\\n    \\end{tabular}\n    \\caption{Track 4 (PWMC) 2022}\n  \\end{subtable}\n  \\caption{Results Track 4 (PWMC). $^\\dagger$ a parallel version of\n    the solver solved 40 instances in total.}\n  \\label{tab:summary:pwmc}\n",
        "[h]\n  \\centering\n  \\begin{tabular}{llH}\n    \\textbf{Program Committee}\n    &Johannes Fichte & Link\\\"oping University\\\\\n    &Markus Hecher & Massachusetts Institute of Technology\\\\\n    \\textbf{Technical Advisor} & Daniel Le Berre\\\\\n    \\textbf{Judge} & Martin Gebser (2021-2023)\\\\\n    \\textbf{} & Mario Alviano (2022)\\\\\n  \\end{tabular}\n",
        "[h!]\n  \\centering\n  \\begin{tabular}{HHHp{12em}p{22em}H}\n    \\toprule\n    0\\% & 0.1\\% & 0.8 & Submission           & Authors                                                                 & solved \\\\\n    \\midrule\n        & 6     & 7   & \\solver{Alt-DPMC}             & Aditya Shrotr,  Moshe Vardi                                             & 50     \\\\\n        &       & 2   & \\solver{Arjun-GANAK-ApproxMC} & Mate Soos, Kuldeep S. Meel                                              & 79     \\\\\n        & 4     & 5   & \\solver{Arjun-GANAK}          & Mate  Soos,  Kuldeep S. Meel                                             & 71     \\\\\n    2   & 2     & 3   & \\solver{D4}                   & Pierre Marquis, Jean-Marie Lagniez                                      & 75     \\\\\n    4   & 7     & 8   & \\solver{DPMC}                 & Vu Phan, Jeffrey Dudek, Moshe Vardi                                     & 43     \\\\\n        & 3     & 4   & \\solver{ExactMC-Arjun}        & Yong Lai, Zhenghang Xu, Minghao Yin,  Kuldeep S. Meel,  Roland H.C. Yap & 74     \\\\\n    3   & 5     & 6   & \\solver{GPMC}                 & Kenji Hashimoto,  Shota Yap                                             & 64     \\\\\n    1   & 1     & 1   & \\solver{SharpSAT-TD}          & Tuukka Korhonen, Matti J\u00e4rvisalo                                        & 82     \\\\\n        & 8     & 9   & \\solver{mtmc}                 & Ivor Spence                                                             & 34     \\\\\n    \\bottomrule\n  \\end{tabular}\n  \\caption{Authors of the Submissions. 2023 Iteration}\n  \\label{tab:mcauthors}\n",
        "[h!]\n  \\begin{tabular}{HHHp{12em}p{22em}H}\n    \\toprule\n    0\\% & 0.1\\% & 0.8 & Submission                 & Authors                                                  & solved \\\\\n    \\midrule\n    8   & 9     &     & \\solver{c2d}                        & Adnan Darwiche                                           & 50     \\\\\n    4   & 4     &     & \\solver{D4}                         & Pierre Marquis, Jean-Marie Lagniez                       & 76     \\\\\n    7   & 7     &     & \\solver{DPMC}                       & Vu Phan, Jeffrey Dudek, Moshe Vardi                      & 61     \\\\\n    2   & 2     &     & \\solver{ExactMC}                    & Yong Lai, Kuldeep S. Meel. Roland H.C. Yap, Zhenghang Xu & 77     \\\\\n        &       & 1   & \\solver{SharpSAT-TD-Arjun\\-ApproxMC} & Mate Soos, Kuldeep S. Meel                               & 74     \\\\\n     1  & 1     &     & \\solver{GANAK (approx)} & Mate Soos and Kuldeep Meel & 83\\\\\n     1  & 1     &     & \\solver{GANAK (exact)} & Mate Soos and Kuldeep Meel & 83\\\\\n    5   & 5     &     & \\solver{GPMC}                       & Kenji Hashimoto, Shota Yap                               & 69     \\\\\n    6   & 6     &     & \\solver{mtmc}                       & Ivor Spence                                              & 66     \\\\\n    3    &  3     &     & \\solver{SharpSAT-TD}                & Tuukka Korhonen, Matti J\u00e4rvisalo                         & 77     \\\\\n    1   & 1     &     & \\solver{SharpSAT-TD-Arjun}          & Mate Soos Kuldeep S. Meel                                & 79     \\\\\n        & 8     &     & \\solver{TwG}                        & Sylvester Swats                                          & 53     \\\\\n    \\bottomrule\n  \\end{tabular}\n  \\caption{Authors of the Submissions. 2022 Iteration}\n",
        "[t!]\n  \\begin{tabular}{Hp{12em}p{22em}HHH}\n    \\toprule\n    \\# & Submission    & Authors                                      & solved & excl \\\\\n    \\midrule\n    8  & \\solver{bob}           & Daniel Pehoushek                             & 11     & 0    \\\\\n    7  & \\solver{c2d}           & Adnan Darwiche                               & 29     & 0    \\\\\n    3  & \\solver{D4}            & Jean-Marie Lagniez,  Pierre Marquis          & 51     & 0    \\\\\n       & \\solver{DPMC}          & Vu Phan, Jeffrey Dudek, Moshe Vardi          & 34     & 0    \\\\\n    4  & \\solver{GPMC}          & Kenji Hashimoto, Takaaki Isogai              & 38     & 0    \\\\\n    5  & \\solver{MC2021\\_swats} & Sylwester Swat                               & 34     & 0    \\\\\n    2  & \\solver{narasimha} & Shubham Sharma Yong Lai Zhenghang Xu Subhajit Roy\nRoland H.C. Yap Mate Soos Kuldeep S. Meel & 61$^\\dagger$     & 1    \\\\\n      5  & \\solver{ProCount}      & Vu Phan, Jeffrey Dudek, Moshe Vardi          & 21   & 0             \\\\\n    1  & \\solver{SharpSAT-TD}   & Tuukka Korhonen,  Matti J\u00e4rvisalo            & 78     & 0    \\\\\n    9  & \\solver{SUMC2}         & Ivor Spence                                  & 7      & 0    \\\\\n    \\bottomrule\n  \\end{tabular}\n  \\caption{Authors of the Submissions. 2021 Iteration}\n"
    ],
    "sections": {
        "Introduction": "\\emph{Propositional model counting}, also known as \\emph{number SAT}\nor \\#SAT, asks to output the number of models of a propositional\nformula~\\cite{BiereEtAl21}. A \\emph{model} is also known as total\nassignment to the variables of the formula that satisfies the formula.\nThe \\#SAT problem is canonical for the complexity\nclass~\\sharpP~\\cite{Valiant79b,Roth96,BacchusDalmaoPitassi03} and we can\nemploy counting to solve any problem located on the Polynomial Hierarchy\n(PH) following from an immediate consequence of Toda's\nTheorem~\\cite{Toda91a}.\nInterestingly, \\#SAT remains computationally very hard on several\nclasses of propositional formulas, where the SAT problem (deciding\nsatisfiability only) becomes tractable, such as\n2-CNFs~\\cite{Valiant79b,DahllofJonssonWahlstrom05a}\\footnote{\\#SAT remains \\#P-hard on 2-CNFs under Turing reductions and we expect that its complexity slightly drops under more strict reductions such as log-space many-one reductions~\\cite{Immerman98}, which are both theoretically and practically more reasonable.}.\nDespite the computational hardness, the field has seen considerable\nadvances in recent years and highly efficient solvers emerged, capable\nof solving larger problems each year~\\cite{ChakrabortyMeelVardi16a,\n  OztokDarwiche15a, LagniezLoncaMarquis16a, LagniezMarquis17a,\n  SharmaEtAl19a, DudekPhanVardi20a}.\nThese solvers have immediate use in various domains, such as formal\nverification of hardware, software, and security protocols,\ncombinatorial optimization, or computational mathematics.\nOver the last few years, various applications can be witnessed in the\nliterature~\\cite{MeelEtAl17a, Fremont19a,ZhaiChenPiskac20,\n  Duenas-OsorioMeelParedes17, ShiShihDarwiche20, BalutaChuaMeel21,\n  SundermannThumSchaefer20, LatourBabakiFokkinga22,\n  FichteGagglRusovac22, KabirEtAl22}.\nDue to the increasing practical interest in counting, the Model\nCounting Competition (MCC) was conceived in October 2019.\nSince the first iteration in 2020~\\cite{FichteHecherHamiti21a}, the\ncompetition was executed as an annual event and results presented at\nthe SAT conference~\\cite{sat_conferences23}.\nThe annual repetition provides a snapshot of the current\nstate-of-the-art in practical model counting.\nHere, we summarize\nthe last three iterations of the competition (2021--2023 Model\nCounting Competitions) and their outcome.\n\\paragraph{Goals of the Competition} \nThe Model Counting Competition aims at deepening the relationship\nbetween the latest theoretical and practical development on\nimplementations and their practical applications.\nIt was inspired by the success of the SAT community with persistent\nefforts to improve the performance and robustness of solvers in\ncompetitions~\\cite{SimonLeBerreHirsch05a,JarvisaloBerreRoussel12a,sat_competition22}.\nIn the competition, we challenge the community to improve solvers,\nidentify benchmarks, \nand\nfacilitate the exchange of novel ideas.\nBeyond the interest group, we aim at making a large audience of\nresearchers aware of counting techniques and their use, particularly,\nin cases where enumerating models is expensive and not required but is\noften still a common approach.\nWhile researchers and developers compete, there are no monetary prizes, \nand our primary interest is active participation, collaboration, and\nlong-term improvements that extend the feasibility of model counting\nin practice and spark many new applications.\n\\paragraph{Competition Tracks and Computational Complexity}\nThe competitions in 2021--2023 featured four tracks. In 2021, Track~1\ndealt with model counting (\\MC), Track~2 with weighted model counting\n(\\WMC), Track~3 with projected model counting (\\PMC), and Track~4 with\nharder model counting instances. In 2022 and 2023, Track~1 highlighted\nmodel counting (\\MC), Track~2 weighted model counting (\\WMC), Track~3\nprojected model counting (\\PMC), and Track~4 projected weighted model\ncounting (\\PWMC).\nFor all problems, we take a propositional formula~$F$ in conjunctive\nnormal form (CNF) as input. Then, the problems are as follows:\n\\begin{itemize}\n\\item[(\\MC):] The \\emph{model counting problem} asks to output the\n  number of models for the given formula~$F$.\\\\[0.25em]\n  \\MC is known to be \\sharpP~\\cite{Valiant79b} and\n  \\cP-complete~\\cite{Roth96a} and expected to be much harder than\n  \\SAT~\\cite{Cook71,Levin73}.\n\\item[(\\WMC):] The \\emph{weighted model counting}\\footnote{\\WMC is\n    also known as weighted counting, sum-of-product, partition\n    function, or probability of evidence.} asks to output the sum of\n  weights over all models for the given formula~$F$.\n  Therefore, in addition to %\n  $F$, the input contains a function that assigns a weight to each\n  literal occurring in the formula~$F$.\\footnote{A literal is a\n    propositional variable or a \n    negated propositional negation,~e.g., $x$ or $\\mneg x$.}\n  The \\emph{weight} of a model~$M$ is the product over the weights of\n  the literals in~$M$.\\\\[0.25em]\n  \\WMC is also known to be \\cP-complete~\\cite{Roth96a}.\n\\item[(\\PMC):] The \\emph{projected model counting problem} asks to\n  output the number of models for the formula~$F$ after restricting each\n  model to a set~$P$ of projection variables.\n  Therefore, in addition to $F$, %\n  the input contains a set~$P$ of variables, called \\emph{projection\n    variables} or \\emph{show variables}.\\\\[0.25em]\n  \\PMC is complete for the class\n  $\\cNP$~\\cite{DurandHermannKolaitis05}.\n\\item[(\\PWMC):] The \\emph{projected weighted model counting problem}\n  asks to output the sum of weights over all models restricted to a\n  set~$P$ of projection variables,~i.e., \\PWMC combines \\WMC and \\PMC.\\\\[0.25em]\n  \\PWMC is expected to be complete for the class\n  $\\cNP$,~c.f.~\\cite{Roth96a,DurandHermannKolaitis05}.\n\\end{itemize}\n\\paragraph{Contributions}\nThis article focuses on the 2021--2023 editions of the Model Counting\nCompetitions. To this end, we provide the following insights:\n\\begin{enumerate}\n\\item We illustrate the setup, describe the tracks, and summarize the\n  outcome of\n  the last three iterations of the competition. %\n\\item We survey the instance sets, which we received over the last\n  years following open calls of benchmarks from different application\n  settings, collected from various sources, or generated. Furthermore,\n  we establish a curated repository of instances, submitted solvers,\n  and detailed results. We archived all artifacts in a publicly\n  available open research data repository (Zenodo).\n  In addition, we provide a basic environment to rerun the\n  competitions on common high-performance computing (HPC)\n  environments.\n\\end{enumerate}\nThe remainder of the paper is organized as follows:\nIn Section~\\ref{sec:prelimns}, we list preliminaries starting with a\nbasic background and examples in\nSection~\\ref{sec:prelimns:background}. We illustrate competition\ntracks in Section~\\ref{sec:prelimns:tracks}, detail considerations\non accuracy and precision in Section~\\ref{sec:prelimns:precs},\nsummarize the computing infrastructure in\nSection~\\ref{sec:prelimns:infrastructure}, and state submission\nrequirements in Section~\\ref{sec:prelims:requirements}.\nWe present the collected instances and the selection process in\nSection~\\ref{sec:instances}.\nThen, we summarize outcome of the three iterations as follows:\nTrack~1~(MC) in Section~\\ref{sec:results:mc},\nTrack~2~(WMC) in Section~\\ref{sec:results:wmc},\nTrack~3~(PMC) in Section~\\ref{sec:results:pmc}, and\nTrack~4~(PWMC) in Section~\\ref{sec:results:pwmc}.\nWe conclude in Section~\\ref{sec:concl}.\nIn addition, we specify the input and output format, give programs for\ninstance checking and instance generation in~\\ref{sec:format}.\n\\paragraph{Related Works}\nWe follow the spirit of works in the community of constraint solving\nand mathematical problem solving, where already many competitions and\nchallenges have been organized such as on\nASP~\\cite{DodaroRedlSchuller19a},\nCSP~\\cite{XCSPComp22,SimonisKatsirelosStreeter09a,TackStuckey23a},\nSAT~\\cite{sat_competition22},\nSMT~\\cite{BobotBrombergerHoenicke23a}, %\nMaxSAT~\\cite{JarvisaloEtAl23}, %\nUAI~\\cite{DechterEtAl22a}, %\nQBF~\\cite{PulinaSeidlHeisinger23a}, %\nand various problem domains such as DIMACS~\\cite{dimacs} %\nand PACE~\\cite{GrossmannHeuerSchulz22}. %\nMany solvers for model counting exists and various solvers where\nalready known prior to the first edition of the model counting\ncompetition~\\cite{FichteHecherHamiti21a}.\nThe solvers are commonly based on techniques from \\SAT solving~\\cite{%\n  GomesKautzSabharwalSelman08a,%\n  SangEtAl04,%\n  Thurley06a%\n}, knowledge compilation~\\cite{LagniezMarquis17a}, or approximate\nsolving~\\cite{ChakrabortyEtAl14a,ChakrabortyMeelVardi16a} by means of\nsampling using \\SAT solvers, and a few solvers employ dynamic\nprogramming~\\cite{DudekPhanVardi20b,DudekPhanVardi20a}.\nLater, in Table~\\ref{tab:mc-solvers}, we provide an overview on\nexisting solvers and their features.\n\\paragraph{Solvers}\nTable~\\ref{tab:mc-solvers} on page~\\pageref{tab:mc-solvers} provides a\nbrief overview on existing solvers. We list solvers that participated\nin one of the competitions and solvers that are known in the\nliterature. The table contains features, hyperlinks, and scientific\nreferences for the solvers.\n",
        "Preliminaries and Background": "\\label{sec:prelimns}\nIn this section, we briefly provide formal notions from propositional\nlogic and problem definitions.\nFor a comprehensive introduction and more detailed information, we\nrefer to other\nsources~\\cite{BiereHeuleMaarenWalsh09,KleineBuningLettman99}.  \nFurthermore, we describe the competition tracks, explain the\nrequirements for participating and the ranking criteria, as well as\nthe computing infrastructure used for executing the competition.\n\\subsection{Background}\\label{sec:prelimns:background}\n\\paragraph{Basics} For a set~$X$, let $\\ta{X}$ be the \\emph{power set\n  of~$X$}.\nThe domain~$\\mathcal{D}$ of a\nfunction~$f:\\mathcal{D} \\rightarrow \\mathcal{A}$ is given\nby~$\\dom(f)$. By $f^{-1}: \\mathcal{A} \\rightarrow \\mathcal{D}$ we\ndenote the inverse\nfunction~$f^{-1}:=\\SB f(d) \\mapsto d \\SM d \\in \\dom(f) \\SE$ of a given\nfunction~$f$, if it exists.  \nBy $\\mathbf{e}$ we mean the Euler number and $\\log_{10}$ refers to the\nlogarithm to the base~$10$.\n\\paragraph{Satisfiability}\nLet $U$ be a universe of propositional variables.\nA \\emph{literal} is a variable~$x$ or its negation~$\\mneg x$. \nWe call~$x$ \\emph{positive} literal and $\\mneg x$ \\emph{negative}\nliteral.\nA \\emph{clause} is a finite set of literals, interpreted as the\ndisjunction of these literals.  A propositional \\emph{formula}~$F$ in\n\\emph{conjunctive normal form (CNF)} is a finite set of clauses,\ninterpreted as the conjunction of its clauses.\nWe let $\\var(F)$ and $\\lits(F)$ be the set of the variables and set of\nliterals, respectively, that occur in~$F$.\nAn \\emph{assignment} is a mapping $\\tau:X \\rightarrow \\{0,1\\}$ defined\nfor a set~$X\\subseteq U$ of variables.\nThe formula~$F$ \\emph{under assignment~$\\tau$} is the formula~$F_\\tau$\nobtained from~$F$ by (i)~removing all clauses~$c$ that contain a\nliteral set to~$1$ by $\\tau$ and then (ii)~removing from the remaining\nclauses all literals set to~$0$ by $\\tau$. An assignment~$\\tau$\n\\emph{satisfies} a given formula~$F$ if $F_\\tau=\\emptyset$.\n\\paragraph{Models and Counting}\nFor a satisfying assignment~$\\tau$, we call the set~$M$ of variables\nthat are assigned to true by~$\\tau$ a \\emph{model} of~$F$,~i.e.,\n$M = \\SB x \\SM x \\in \\tau^{-1}(1) \\SE$.\nWe let $\\Mod(F)$ be the \\emph{set of all models} of a\nformula~$F$,~i.e.,\n$\\Mod(F) = \\SB \\tau^{-1}(1) \\SM F_\\tau = \\emptyset, \\tau \\in\n\\ta{\\var(F)} \\SE$.\nFurthermore, we define the \\emph{model count}~$\\mc(F)$ as the number\nof models of the formula~$F$,~i.e., $\\mc(F)\\eqdef \\Card{\\Mod(F)}$.\nThen, we define the following counting problem:\n\\dproblem{Model Counting (\\MC)}%\n{A propositional formula~$F$.}%\n{Output the model count~$\\mc(F)$, that is, the number of models of the\n  formula~$F$.\n}\nWeighted model counting generalizes model counting and is useful for\nprobabilistic inference~\\cite{ChaviraDarwiche08}.\nWe let a \\emph{weight function}~$w$ be a function that maps each\nliteral in $F$ to a real between~$0$ and~$1$,~i.e.,\n$w: \\lits(F) \\rightarrow [0,1]$.\nLater, we represent $w$ by a $2 \\times n$ matrix for\n$n=\\Card{\\var(F)}$ where the first row represents the positive and the\nsecond the negative literal.\nThen, for a model~$M\\in \\Mod(F)$, the \\emph{weight of the model~$M$}\nis the product over the weights of its literals, meaning,\n$w (M) := \\prod_{v\\in \\var(F) \\cap M} w(v) \\cdot \\prod_{v \\in \\var(F)\n  \\setminus M} w(\\mneg v)$. %\nThe \\emph{weighted model count} (wmc) of formula is the sum of weights\nover all its models,~i.e.,\n$\\wmc(F,w) \\eqdef \\sum_{M \\in \\Mod(F)} w(M)$.\nNote that if we set all weights to one, that is,\n$w: \\lits(F) \\rightarrow 1$, we have $\\wmc(F,w) = \\mc(F)$. Same if we\nset all weights to 0.5, that is, $w: \\lits(F) \\rightarrow 1$, we have\n$\\wmc(F,w) \\cdot 2^{\\Card{\\var(F)}} = \\mc(F)$.\nWe obtain the following problem:\n\\dproblem{Weighted Model Counting (\\WMC)\\footnote{\n    The problem is sometimes also called sum-of-products, weighted\n    counting, partition function, or probability of evidence.\n  }%\n}%\n{A propositional formula~$F$ and a weight\n  function~$w: \\lits(F) \\rightarrow [0,1]$.}%\n{Output the weighted model count~$\\wmc(F,w)$.}\nNext, we define projected counting, which is interesting when formulas\ncontain auxiliary variables that are not supposed to contribute to the\noverall count but need to be checked for satisfiability.\nIn other words, solutions, that are the same up to auxiliary\nvariables, count as just one solution.\nTherefore, let $P \\subseteq \\var(F)$ be a set of variables, called\n\\emph{projection variables} or \\emph{show variables} of the\nformula~$F$.\nWe define the projected models of formula~$F$ under the set~$P$ by\n$\\PMod(F,P) \\eqdef \\SB M \\cap P \\SM M \\in \\Mod(F) \\SE$ and \ndefine \\emph{the projected model count}~$\\pmc(F,P)$ of the formula~$F$\nunder the set~$P$ of projection variables by\n$\\pmc(F,P) \\eqdef\\Card{ \\PMod(F,P)}$.\nThis gives raise to the following problem:\n\\dproblem{Projected Model Counting Problem (\\PMC)\\footnote{Sometimes\n    the problem is referred to as $\\#\\exists\\SAT$ and was originally\n    coined under the name \\#NSAT, for ``nondeterministic SAT'' by\n    Valiant~\\cite{Valiant79b}.}}%\n{A propositional formula~$F$ and a set~$P\\subseteq \\var(F)$ of\n  \\emph{projection variables}.}%\n{Output the projected model count~$\\pmc(F,P)$.}\nFinally, we define projected weighted counting.\nWe assume $w$ to be a weight function and $P$ a set of projection\nvariables.\nThen, we define the \\emph{projected weighted model\n  count}~$\\pwmc(F,P,w)$ of the formula~$F$ under the weight\nfunction~$w$ and the set~$P$ of projection variables be\n$\\pwmc(F,P) \\eqdef \\sum_{N \\in \\PMod(F,P)}w(N)$.\n\\dproblem{Projected Weighted Model Counting Problem (\\PWMC)}%\n{A propositional formula~$F$, a set~$P\\subseteq \\var(F)$ of\n  \\emph{projection variables}, and a weight function~$w$.}%\n{Output the projected weighted model count~$\\pwmc(F,P,w)$.}\n\\bigskip\n\\noindent\nExample~\\ref{ex:problems} illustrates the basic definitions below.\n\\begin{example}\\label{ex:problems}\n  Consider the formula $F = (a \\vee b) \\wedge (c \\vee d)$, \n  a set~$P=\\{a,d\\}$ of show variables, and a weight function~$w$. We\n  state~$w$ as matrix where columns indicate the variables (a,b,c,d)\n  and first row inside the brackets represents the weight for the\n  positive literal ($a$, $b$, $c$, $d$) and the second row the\n  negative literal ($\\mneg a$, $\\mneg b$, $\\mneg c$, $\\mneg d$) as\n  indicated by the literals~$x$ and $\\mneg x$ right to the brackets,\n  in detail:\n  \\begin{align*}\n    w =\n    \\begin{blockarray}{ccccc}\n      a                        & b                         & c                           & d                            \\\\\n      \\begin{block}{[cccc]c}\n        0.75                   & 0.3                       & 0.8                         & 0.6 & x                      \\\\\n        0.25                   & 0.7                       & 0.2                         & 0.4 & \\mneg x                \\\\\n      \\end{block}\n    \\end{blockarray}.\n  \\end{align*}\n  The formula~$F$ has the following models:\n  \\begin{align*}\n    \\Mod(F) = \\bigg\\{\n    \\begin{array}{cccc}\n      \\{a,b,c,d\\},             & \\{a,b,c, \\mneg d\\},       & \\{\\mneg a, b, c, d\\},       & \\{\\mneg a , b, c, \\mneg d\\}, \\\\\n      \\{a,b,\\mneg c,d\\},       & \\{a,\\mneg b,c, \\mneg d\\}, & \\{\\mneg a, \\mneg b, c, d\\}, &                              \\\\\n      \\{a,\\mneg b,c,d\\},       &                                                                                        \\\\\n      \\{a,\\mneg b,\\mneg c,d\\} &                                                                                        \\\\\n    \\end{array}\n    \\bigg\\}.\n  \\end{align*}\n  We obtain the following counts.\n  The model count is \\[\\mc(F)=\\Card{\\Mod(F)}=9.\\]\n  The weighted model count is\n  \\begin{align*}\n    & \\wmc(F,w) \\\\\n    & =  w(\\{a,b,c,d\\})  +&   w(\\{a,b,c,\\mneg d\\})  +&  \\quad\\ldots\\quad + & w(\\{a,\\mneg b, \\mneg c, d\\})\\\\\n              & =  w(a)\\cdot w(b)\\cdot w(c)\\cdot w(d)  +&   w(a)\\cdot w(b)\\cdot w(c)\\cdot w(d)  +&  \\quad\\ldots\\quad + & w(a)\\cdot w(b)\\cdot w(\\mneg c) \\cdot w(d)\\\\\n               & =  0.75\\cdot 0.3 \\cdot 0.8 \\cdot 0.6    + & 0.75 \\cdot 0.3 \\cdot 0.8 \\cdot 0.4  +& \\quad\\ldots\\quad + & 0.75\\cdot 0.3 \\cdot 0.2\\cdot 0.6\\\\ \n               & =  0.759.\n  \\end{align*}\n\\noindent  The projected model count is \n  \\begin{align*}\n    \\pmc(F,P) & = \\Big| \\PMod(F,P) \\Big|\\\\\n              & = \\Big| \\big\\{ \\{a,b,c,d\\} \\cap \\{a,b\\},  \\{a,b,c, \\mneg d\\}\\cap \\{a,b\\}, \\quad\\ldots\\quad,  \\{a,\\mneg b,\\mneg c,d\\} \\cap \\{a,b\\}  \\big\\} \\Big| \\\\ \n              & = \\Big| \\{a,b\\}, \\{\\mneg a, b\\},  \\{a,\\mneg b\\}, \\{\\mneg a, \\mneg b\\}   \\Big|\\\\\n              & = 4.\n  \\end{align*}\n  Finally, the projected weighted model count is\n  \\begin{align*}\n    \\pwmc(F,P,w) %\n                  & = w(\\{a,b\\}) + w(\\{\\mneg a, b\\}) + w(\\{a,\\mneg b\\}) + w(\\{\\mneg a, \\mneg b\\})\\\\\n                  & = w(a) \\cdot w(b) + w(\\mneg a) \\cdot w(b) + w(a) \\cdot w(\\mneg b) + w(\\mneg a) \\cdot w(\\mneg b)\\\\\n                  & = 0.75 \\cdot 0.3 + 0.25 \\cdot 0.3 + 0.75 \\cdot 0.7 + 0.25 \\cdot 0.7\\\\\n                  & = 1.\n  \\end{align*}\n\\end{example}\n\\subsection{Competition Tracks}\\label{sec:prelimns:tracks}\nThe competition encompassed four versions of the model counting\nproblem, which we evaluated in separate tracks.\nAll tracks require inputs in conjunctive normal form (CNF) given in a\nsimple text format, which is compatible with the DIMACS-CNF\nformat~\\cite{TrickChvatalCook93a}.\nThe format extends the format used in SAT\ncompetitions~\\cite{BerreRoussel09a,JarvisaloBerreRoussel12a,sat_competition22}\nby introducing statements for weights and projections.\nNote that the format used in the 2020\ncompetition~\\cite{FichteHecherHamiti21a} differs. In 2021, we changed\nthe format due to multiple requests and to provide compatibility with\nSAT-solving.\nFor more details on the input format, we refer to~\\ref{sec:format}.\nThe recent three iterations of the Model Counting Competition featured\nthe following tracks:\n\\begin{itemize}\n\\item 2021 Competition:\n  \\begin{itemize}\n  \\item Track 1: Model Counting (\\MC)\n  \\item Track 2: Weighted Model Counting (\\WMC)\n  \\item Track 3: Projected Model Counting (\\PMC)\n  \\item Track 4: Model Counting (additional harder instances)   \n  \\end{itemize}\n\\item 2022/2023 Competitions:\n  \\begin{itemize}\n  \\item Track 1: Model Counting (\\MC)\n  \\item Track 2: Weighted Model Counting (\\WMC)\n  \\item Track 3: Projected Model Counting (\\PMC)\n  \\item Track 4: Projected Weighted Model Counting (\\PWMC)\n  \\end{itemize}\n\\end{itemize}\n\\subsection{Accuracy, Precision, and Outputs}\\label{sec:prelimns:precs}\nWhen considering solutions in model counting two common issues need to\nbe addressed (i)~accuracy and (ii)~precision~\\cite{iso5725}.\n(i) \\emph{Accuracy} refers to the quality of the solution in terms of\nthe degree of closeness to the true value, which is commonly affected\nby the solving technique. For example, the solver is an approximate\nsolver or an anytime solver and does not output the exact solution due\nto conceptual constructions. While a limitation in accuracy can be\ntolerated in many applications, a user needs to be aware whether the\nresult is exact, approximate, or a lower/upper bound only.\n(ii) %\n\\emph{Precision} refers to obtaining the same results under unchanged\nconditions, which in model counting, is primarily affected by the\nprecision of arithmetic calculations, since we can easily involve very\nlarge integers or fractionals. \nFast fixed-precision arithmetic implemented in modern hardware\ntypically offers between 8 and 256 bits of precision. %\nCommon datatypes according to the IEEE754 standard~\\cite{ieee754} such\nas decimal128, binary128, or binary256 allow to represent values up to\n$1.6113 \\cdot 10^{78913}$ (binary256), but have only up to $36$\nsignificant decimal digits.\nWhile we expected that the maximal representable value is sufficient\nfor model counting, the limitation to $36$ significant decimal digits\nmight cause a high precision loss.\nSince higher precision yields higher space requirements, we expect a\ncertain performance loss. Hence, developers can choose between\nmultiple-precision arithmetic or arbitrary-precision arithmetic, which\nare built-in with some programming\nlanguages~\\cite{java_biginteger97a,ZadkaRossum01a} or can be employed\nby using additional libraries~\\cite{GranlundEtAl16a}.\nTo address these situations, we ask that solvers output the expected\naccuracy (approximate, exact, heuristic) and the precision (arbitrary,\nsingle precision, double precision, quadruple precision). \nFurthermore, we require the following information in the output. \nThe solver needs to specify the notation in which the count is\noutputted (log10, float, prec-sci, integer,\nfractional). \nSatisfiability of the instance has to be stated to avoid corner cases\nin weighted model counting. \nThe type of the count needs to be given (model counting, weighted\nmodel counting, projected model counting, or projected weighted model\ncounting) to avoid potential errors if the problem is identified\nincorrectly in the input or solver requires a dedicated flag to set\nthe problem.\nSince the model count can be very large number or the weighted model\ncount easily indistinguishable from $0$, we ask to output an\nestimate~$c_e$ of the model count~$c$ in $\\log_{10}$-notation, that\nis, $c_e\\eqdef \\log_{10}(c)$.\nThereby, we avoid over- or underflows and can quickly estimate the\norder of a solution without additional arbitrary-precision\ncomputations, which oftentimes require additional libraries that\nrequire extensive preparations on high performance clusters.\nWe provide more technical details on the mandatory output format\nin~\\ref{sec:format:output}.\n\\subsection{Restrictions, Measure, and Ranking}\\label{sec:prelimns:infrastructure}\\label{sec:ranking}\\label{sec:measure}\nAfter we invited developers to participated in the competition, we\norganized an online session to discuss needs and receive\nsuggestions. We incorporated the feedback and updated the 2020 rules\nas follows.\n\\paragraph{Measuring} \nWe mainly compare \\emph{number of instances where a solution was\n  outputted} and \\emph{wallclock time}.\nWe distinguish between (a)~the solver did not output any count and\n(b)~the solver believed that it solved an instance and outputted a\ncount.\nIn Case~(a), we ignore the instance. In Case~(b), we evaluate whether\nthe output is acceptable.\nAn instance will be marked as accepted if the outputted count is\nwithin a relative margin of error or approximation factor depending on\nthe track or ranking as given in Table~\\ref{tab:accuracy}.\nIn the 2021 Competition, we enforced accuracy requirements by track.\nIn contrast, in the 2022 Competition, we introduced multiple rankings\nand corresponding accuracy to distinguish between different types of\nsolvers.\nWe compute the error and approximation factor as follows.\nLet $\\cnt_o$ refer to the outputted result by the solver, called\n\\emph{observed count}, and $\\cnt_e$ to the pre-computed result, called\n\\emph{expected count}.\nFor the expected count~$\\cnt_e$, we use an arbitrary precision\ninteger, fractional, or \\unk to state that we could not obtain a count\nin the precomputation phase.\nIn order to avoid a very high error value for very small or large\nnumbers close to over- or underflow, we employ the log percentage\nchange to measure the error~\\cite{TornqvistVartiaVartia85a}.  The\n\\emph{log percentage change} is defined %\nby\n$\\RLPD(\\cnt_e,\\cnt_o) := 10^{\\log_{10}(\\cnt_{o}) - \\log_{10}(\\cnt_{\\text{e}})}$.\nThen, we measure the \\emph{error} in\n$\\errc(\\cnt_e,\\cnt_o)\\eqdef 1-\\RLPD(\\cnt_e,\\cnt_o)$.\nWe say that the observed count~$\\cnt_o$ by a solver for a given\ninstance is an \\emph{accepted count}, if the observed count~$\\cnt_o$\nis below the maximum expected error~$\\err$, more precisely,\n$\\errc(\\cnt_e,\\cnt_o) \\leq \\err$.\nAnother way to compute an expected range for a solution are\nperformance guarantees from approximation\nalgorithms~\\cite{Vazirani01a}.\nTherefore, for a given $\\alpha$, the observed count~$\\cnt_o$ is\nrequired to be within a relative error,~i.e.,\n$(1+\\alpha)$-approximation. \nWe say an observed count~$\\cnt_o$ is an \\emph{approximately accepted\n  count}, if the following condition holds:\n$\\frac{\\cnt_e}{1+\\alpha}\\leq \\cnt_o \\leq (1 + \\alpha)\\cdot \\cnt_e$.\nUsing the definitions of accepted counts, we define the \\emph{scoring\n  function}, which decides the ranking of the solver within the track\nof the competition, as the number of acceptably solved instances\ntogether with the number of solutions for instances where no count\ncould be precomputed, i.e., $\\cnt_e = \\unk$.\nIn 2021, we solely employed accepted counts on all tracks and expected\nupper bound~$\\err$ for an potential error of the solver according to\nTable~\\ref{tab:accuracy:2021}.\nUpon multiple requests, we updated the ranking as presented in\nTable~\\ref{tab:accuracy:2022ff} in 2022, to incorporate different\ncapabilities of solvers.\nFor exact solvers within Rankings~A and B, we use the notion of an\naccepted count.\nFor approximation solvers within Ranking~C, we employ the notion of an\napproximately accepted count.\n\\paragraph{Restrictions}\nRun times larger than \\emph{3,600} seconds count as \\emph{timeout}. We\nrestrict \\emph{main memory (RAM)} to \\emph{32GB}.\nTemporary disk space is available for input transformation and\npreprocessing during the job execution. However, we advise the\ndevelopers to use shared memory instead and clean up temporary files\nproperly as it might account to disk quota otherwise.\n\\paragraph{Execution}\nDuring the precomputation, instance classification, and\nreproducibility phase, we run multiple solvers on the same node in\nparallel. However, we ensure that CPUs and memory cacheline are not\nover-committed and results are replicable, meaning, we execute at\nmost~4 solvers in parallel on a node. %\nIn the competition phase, we run solvers exclusively, meaning that\nsolvers run sequentially with exclusive access to an entire node and\nno other executions have access to that node during that time.\nWe carried out all three iterations of the competition on the StarExec\nsystem~\\cite{StumpSutcliffeTinelli14} using runsolver~\\cite{Roussel11}\nto control the execution. \nWe take runsolver instead of the more precise BenchExec\ntool~\\cite{BeyerLoweWendler15,BeyerLoweWendler19}, since BenchExec\ncauses numerous unexpected runtime abortions and quota issues that we\ndid not manage to debug in time.\n\\paragraph{Ranking and Disqualification}\nFor each track, we select 200 from our collected instances.\nWe describe the selection process in\nSection~\\ref{sec:instances:selection}.\nWe split these instances into two sets of 100 instances, which we call\npublic and private. We publish the \\emph{public} set during the\ntesting phase of the competition and keep the \\emph{private} set\nsecret until the final evaluation.\nDuring the testing phase, we release information to all developers on\nthe scoring on the public set, but rank only on the private set.\nWe define the place of a solver within the competition by the number\nof solved instances that have an accepted count.\nIf multiple solvers score in tie, we assign the same place to all\nsolvers and leave the subsequent place(s) vacant.\nIn 2021, we applied a very simple ranking scheme that only\nincorporates tracks and accepted solutions. \nIn 2022/2023, we updated the ranking to incorporate conceptually\ndiffering features of participating solvers and provide a more\nrepresentative overview for potential applications.\nIf a solver outputs too many counts that are not accepted in one\ncategory, we automatically move the solver into a category that allows\nfor lower precision and more incorrect answers.\nIn more detail, we used the following rankings:\n\\begin{itemize}\n\\item 2021 Competition: Uniform Ranking. More than 20 solutions\n  outside margin result in disqualification.\n\\item 2022/2023 Competitions:\n  \\begin{itemize}\n  \\item Ranking A: Exact (arbitrary precision).\\\\ %\n    Any wrong solution results in removal from the ranking.\n  \\item Ranking B: Exact (small precision loss).\\\\ %\n    More than 20 solutions outside the expected error margin results\n    in removal from the ranking.\n  \\item Ranking C: Approximate (provide approximation guarantee).\\\\ %\n    More than 20 solutions outside the expected approximation factor\n    results in in removal from the ranking.\n  \\item Ranking D: Heuristic, for example, anytime solving.\\\\\n    Every correct answer counts 1 point, otherwise: 0 points.\n  \\end{itemize}\n\\end{itemize}\n\n\\newcommand{\\system}[1]{\\textit{#1}}\n\\subsection{Computing Infrastructure}\\label{sec:prelims:requirements}\nWe follow standard guidelines for empirical\nevaluations~\\cite{KouweAndriesseBos18a} and measure runtime\nusing~\\texttt{perf} and restrict runtime and memory using\n\\texttt{runsolver}~\\cite{Roussel11}.\nWe execute experiments on three high performance computing (HPC)\nsystems consisting of the \\system{StarExec}, \\system{Cobra},\n\\system{Taurus}, and \\system{Tetralith} cluster system as well as one\n\\system{desktop} system for which we provide additional details in\n\\ref{sec:appendix:platform}.\nWe used (a) the clusters \\system{Cobra}, \\system{Taurus}, and\n\\system{Tetralith} during the preparation phase, (b) the\n\\system{desktop} system for generating weighted model counting\ninstances, and (c) the \\system{StarExec} system for the systematic\nevaluation of the instances during the competition phase.\nWe forced the performance governors to the\nbase-frequency~\\cite{HackenbergEtAl19a}, disabled hyper-threading, and\nset transparent huge pages~\\cite{kernel_thp} to always on\n\\system{StarExec} and kept it on the default value madvise on all\nother systems.\n\\subsection{Submission Requirements}\nWe impose very weak conditions on the submissions to ease\nparticipation.\nWe ask developers to submit programs that run on the Linux-based\nevaluation system (\\system{StarExec}) and recommend that the solvers\nare provided as statically linked binary (ELF64bit) without dynamic\ndependencies, including libc.\nAll necessary submission scripts have to be included. If the\nsubmission uses an external third party library, which is not under an\nopen source license, we expect that a script for downloading the\nlibrary is included. Libraries that are not free for academic use are\nnot allowed.\nThe authors need to prepare the submission themselves by using the\nStarExec virtual machine\n\\href{https://www.starexec.org/starexec/public/about.jsp}{\\nolinkurl{image}}.\nAuthors may submit portfolio solvers and employ separate\npre-processors, but the program needs to announce which tool is\nrunning in each step.\nWe limit the number of submissions to two per team and, in 2021 and\n2022, we required that authors are part of only exactly one team.\nWe highly encourage solver developers to publish the source code in\nthe data repository and distribute with a standard open source\nlicense~\\cite{OSI_licenses}.\nFor archival and heritage purposes, authors need to give permission\nthat their solvers are uploaded to a public data repository after the\ncompetition.\n\\newcommand{\\bench}[1]{\\texttt{#1}}",
        "Instances and Selection": "\\label{sec:instances}\nIn this section, we discuss how we collect and disseminate\ninstances. We provide an overview on the origin of existing instances\nand elaborate characteristics of the available instances. Finally, we\ngive insights into the selection process of instances for the\ncompetition.\n\\subsection{Instances}\\label{sec:collection}\nChallenging and representative benchmarks are essential to perform a\nscientifically meaningful comparisons of solvers. We aim for various\nlarge, diverse, and understandable sets of instances.\nTherefore, for each iteration, we invite members of the community by\nan open call for benchmarks to submit real world instances and\ninstance generators. Furthermore, we collecte instances from\nthe literature and other competitions.\nFor real world instances, we welcome instances that encode an\napplication and instances that have been obtained via a translation\nfrom another formalism.\nWe decline submissions of instances that have been collected in\nprevious years or permuted instances thereof.\nWe encourage contributors to provide the instances as a dataset on the\npublic data repository Zenodo (\\url{https://zenodo.org/}).\nSince we publish all instances after the event, we expect that the\ncopyright of the dataset allows for publication under a CC-BY\nlicense. If instances are sensitive (e.g.,\ninfrastructure/health-care), sufficient anonymization has to be\napplied prior to submission.\nAll instances, which we collected in the process of the competition,\nand instances that have been selected into each year's competition set\nare publicly available in a Zenodo community, therefore follow the\nlink\n\\href{https://zenodo.org/communities/modelcounting/}{\\nolinkurl{zenodo.org/communities/modelcounting}}.\nWe invite researchers to contribute additional instances to this\ncommunity.\nFor each instance set, we provide brief information about the authors,\na description of it origin, a file list including an sha256\nchecksum~\\cite{PenardWerkhoven08a}. We compress all instances using\nXZ~\\cite{CollinTanothers22a} and converted instances from the 2020\ncompetition into the recent format.\nWhile, in 2020, instances were preprocessed, the following iterations\ntook instances as is without additional preprocessing. The full\ninstance set of the Model Counting Competition 2020 has been updated\nto dedicate unpreprocessed (plain) and preprocessed (bpe/pmc)\ninstances.\nNote that we validate the data format for each instance using a simple\nprogram, which is publicly available~\\cite{FichtePriesner23a}.\nIf the instance header contradicts with the data, for example, number\nof variables or clauses, we reconstruct a new header from the\ninstance.\nWe did not check for duplicates among the collected instance sets.\n\\paragraph{Collected Instances and Competition Instances (2020)}\nThe 2020 instance collection consists, omitting preprocessing\ninstances, of in total 2,759 instances for model counting, 2,162\ninstances for weighted counting, and 1,106 instances for projected\nmodel counting, which\nare available on\n\\href{https://doi.org/10.5281/zenodo.4292167}{\\nolinkurl{Zenodo:4292167}}. %\nThe selected competition instances can as well available on\n\\href{https://zenodo.org/record/3934426}{\\nolinkurl{Zenodo:3934426}}. %\nDetails on the instances are available in the previous\nreport~\\cite{FichteHecher20a}.\nWe updated all instances to the 2021 data format, corrected headers\nand incomplete lines, and cleaned up the dataset. Note that this\nslightly effects the total numbers of instances in each category.  The\nupdated dataset is available on Zenodo as most recent version.\n\\paragraph{Collected Instances and Competition Instances (2021)}\nWe additionally collected 51,333 instances, for the 2021 competition\nedition. We received one set of new instances.\nInstances of the full collection are available on\n\\href{https://doi.org/10.5281/zenodo.10006441}{\\nolinkurl{Zenodo:10006441}}\nand the instances that we selected for the competition are on\n\\href{https://doi.org/10.5281/zenodo.10012857}{\\nolinkurl{Zenodo:10012857}}.\nWe corrected faulty headers and incomplete lines.\nThe contributors and origins of the instances are as follows.\n\\medskip\n\\noindent\\textit{Model Counting (\\MC):}\\\\[-1.5em]\n\\begin{enumerate}\n\\item 480 instances from the \\bench{RandCluster} instance set, which\n  contains challenging random instances or random instances with\n  controlled variable occurence (flat cluster), contributed by\n  Guillaume Escamocher and Barry O'Sullivan. A description is provided\n  in the dataset.\n\\item 228 instances from the \\bench{DIMACS-2} instance set, which\n  consist of instances that have been collected during the 2nd DIMACS\n  Implementation Challenge by Trick et al.~\\cite{TrickChvatalCook93a}.\n\\item 50,294 instances from the \\bench{Satlib} instance set, which we\n  took from the online resource collection for research on SAT by\n  Holger Hoos and Thomas St\u00fctzle~\\cite{IsogaiHashimotoSakai21a};\n\\item 200 instances from \\bench{BalancedSATComp} Marius Lindauer et\n  al.~\\cite{HoosKaufmannSchaub13a};\n\\item 131 instances from the \\bench{IntervallOrderings} instance set,\n  which we take from work by Sigve Hortemo S\u00e6ther, Jan Arne Telle, and\n  Martin Vatshelle~\\cite{SaetherTelleVatshelle15a}.\n\\item 11,380 instances collected by Markus Zisser from various sources\n  including instances used for evaluations of \\bench{ApproxMC},\n  \\bench{C2D}, \\bench{Cachet}, \\bench{DynASP} and instances collected\n  by Daniel Fremont and of the \\bench{Satlib} set, and instances\n  collected earlier that were used in the evaluation of\n  gpusat~\\cite{FichteEtAl18c,FichteHecherZisser19a}.\n  Note that this set might introduce duplicates.\n\\end{enumerate}\n\\medskip\n\\noindent\\textit{Weighted Model Counting (\\WMC).}\nWe received no new weighted instances. To still increase our instance\nstock, we introduced two instance generators, which we briefly\ndescribe in %\n\\ref{sec:appendix:generator}. The generators take existing model\ncounting instances and generate weights. The first generator randomly\nsets weights in the given input instance. The second program takes the\ngiven CNF instance and constructs a Decision-DNNF (decision\ndecomposable negation normal form) using a knowledge compiler, then\ngenerates the corresponding counting\ngraph~\\cite{Darwiche01a,Darwiche04a}, and finally guesses normalized\nweights along the counting graph.\n\\medskip\n\\noindent\\textit{Projected Model Counting (\\PMC).}\nWe were not presented with submissions of instances from new domains.\nNonetheless, to obtain challenging new instances for the next\niteration, we again take previously collected instances and randomly\nguess projection variables.\nBrief notes on the implementation can be found in\n\\ref{sec:appendix:generator}.\n\\paragraph{Collected Instances and Competition Instances (2022)}\nWe received in total 7,732 instances that originate from 5 domains.\nAll collected instances are publicly available on\n\\href{https://doi.org/10.5281/zenodo.10014715}{\\nolinkurl{Zenodo:10014715}}.\nThe instances that we selected for the competition are available on\n\\href{https://doi.org/10.5281/zenodo.10012860}{\\nolinkurl{Zenodo:10012860}}.\nWe describe the selection process in more details in\nSection~\\ref{sec:instances:selection}.\nThe contributors and origins of the instances are as follows.\n\\medskip\\noindent\\textit{Model Counting (\\MC):}\n\\begin{enumerate}\n\\item 1,139 instances from the set called \\bench{Argumentation}, which\n  encode finding the count to abstract argumentation frameworks for\n  various\n  semantics~\\cite{Dung95a,LagniezLoncaMailly20a,NiskanenJarvisalo20a}. The\n  instances were contributed by Piotr Jerzy Gorczyca.\n\\item 41 instances from the \\bench{Inductive Inference} instance set,\n  where Boolean function synthesis problem are encoded into\n  propositional\n  satisfiability~\\cite{KamathKarmarkarRamakrishnan92a}. Yong Lai\n  submitted the instance set.\n\\item 27 instances from a set called \\bench{coloring} contributed by\n  Daniel Pehoushek that encode counting graph colorings into a model\n  counting task.\n\\item 6,253 instances from a set called \\bench{AspNavigation}\n  contributed by Dominik Rusovac~\\cite{FichteGagglRusovac22}, which\n  asks for counting the number of answers sets under assumptions\n  encoded into propositional\n  formulas~\\cite{FichteGagglHecher22a,Janhunen04a,Bomanson17a}.\n\\item 22 instances from a \\bench{Sudoku} benchmark set, which encodes\n  the well-known Sudoku puzzle into CNF\n  instances~\\cite{LynceOuaknine06a,PfeifferKarnagelScheffler13a}.\n  Since a Sudoku puzzle technically only contains exactly one\n  solution, some initial values are removed to increase the number of\n  satisfying assignments.\n  The instances were contributed by Ivor Spence~\\cite{Spence22a};\n\\item 127 instances from \\bench{Industrial Feature Models}, which\n  consider families of products in industry that share multiple\n  configuration options resulting in large configuration spaces. The\n  instances encode computing the number of valid configurations for\n  tasks such as estimating the effort of an update or effectively\n  reducing the configuration\n  space~\\cite{SundermannThumSchaefer20}. The instances were provided\n  by Chico Sundermann, Thomas Th\u00fcm, and Ina Schaefer.\n\\end{enumerate}\n\\medskip\n\\noindent\\textit{Weighted Model Counting (\\WMC):}\nAs in 2021, we received no new weighted instances. Again, we secured\nadditional instances by employing our instance generator. We refer to\n\\ref{sec:appendix:generator}.\n\\medskip\n\\noindent\\textit{Projected Model Counting (\\PMC):}\n\\begin{enumerate}\n\\item 123 instances from \\bench{Software Reliability Quantification},\n  which encode reliability questions, meaning, comparing C programs\n  against a given functional specification, and computing the\n  conditional probability of violating an assertion, i.e., count under\n  the violating assertion related to all terminating\n  runs~\\cite{TeuberWeigl21}.\n  The instances were contributed by Samuel Teuber and Alexander\n  Weigl~\\cite{TeuberWeigl22a}.\n\\end{enumerate}\nTo obtain additional instances, we again take existing instances and\nrandomly guess projection variables.\n\\paragraph{Collected Instances and Competition Instances (2023)}\nWe received three new sets of model counting instances.\nOverall, we collected 840 instances for the 2023 competition edition,\nwhich are publicly available on\n\\href{https://doi.org/10.5281/zenodo.10012822}{\\nolinkurl{Zenodo:10012822}}.\nThe instances that we selected for the competition are on\n\\href{https://doi.org/10.5281/zenodo.10012864}{\\nolinkurl{Zenodo:10012864}}.\nWe provide details for the instance selection process in\nSection~\\ref{sec:instances:selection}.\nThe contributors and origins of the instances are as follows.\n\\medskip\n\\noindent\\textit{Model Counting (\\MC):}\n\\begin{enumerate}\n\\item 191 instances from a \\bench{Network Reliability} instance set,\n  which contains encoded network reliability estimation on real world\n  power grids~\\cite{KabirMeel23a}. Mohimenul Kebir and Kuldeep Meel\n  submitted these instances.\n\\item 643 instances from the \\bench{BitVectorCMT} instance set, which\n  consists of CNFs that encode problems for bitvector counters. The\n  instances were generated using the ABC\n  system~\\cite{FanWu23a,KimMcCaman20a,FanWu23b} and provided by Arijit\n  Shaw and Kuldeep Meel.\n\\item 6 instances from \\bench{Path Counting}, which encodes to count\n  the number of paths through a rectangular grid of cells with\n  additional constraints. The description of the instance set, which\n  is provided along the instance set, contains additional details. The\n  instances together with a generator were provided by Ivor Spence.\n\\item 56 instances from \\bench{Robotic Planning}, which encodes a\n  robotic planning problem that was initially encoded using Z3's\n  theory of bitvectors and then bitblasted down to SAT. The instances\n  were provided by Eric Vin~\\cite{GittisVinFremont22}.\n\\end{enumerate}\n\\medskip\n\\noindent\\textit{Weighted Model Counting (\\WMC):}\nAs in the 2020 and 2021 editions, we received no new weighted\ninstances. Again, we added instances by employing our instance\ngenerator, see~\\ref{sec:appendix:generator}.\n\\medskip\n\\noindent\\textit{Projected Model Counting (\\PMC):}\nWe did not receive new instances for projected model counting.  Again,\nwe take previously collected instances from all categories and\nrandomly guess projection variables. We refer to\n\\ref{sec:appendix:generator}.\n\\subsection{Selection of Instances}\\label{sec:instances:selection}\nFrom the collected instances as stated in\nSection~\\ref{sec:collection}, we selected 200 instances for each\ntrack.\nWe numbered the instances from 1 to 200 and selected the odd numbered\ninstances as private and even numbered instances as public\ninstances. We disclosed the 100 public instances publicly at\n\\href{https://mccompetition.org/}{\\nolinkurl{mccompetition.org}}\nduring the submission and testing phase of the competition in May each\nyear.\nShortly before the presentation of the results at the SAT conference,\nwe disclosed the 100 private instances to the participants.\nThen, in early fall, we published the set of all instances publicly for\ndownload at the model counting website.\nFinally, we compiled Zenodo repositories when preparing the report.\nDuring the 2021--2023 editions of the competitions, we followed two\ndifferent approaches as outlined below.\n\\paragraph{2021 Competition (Balanced)}\nFor the 2021 Competition, we decided to pre-select instances according\nto expected practical hardness and similar to the process in 2020. Our\nunderlying idea was to pick instances that are challenging, vary in\nsize, are up to a certain extend still within reach for the\nparticipants and challenge them.\nWe aim for a stable benchmark set where we can observe useful\ndifferences between solvers and that might later also provide\ninteresting insights on the progress of model counting.\nHowever, we would also like to mention that this selection process may\ncause problems such as an incalculable advantage for existing\ntechniques, massive precomputation time on various solvers, and hence\nan unnecessary amount of work in the preparation phase of the\ncompetition.\nIn order to classify the instances, we ran existing exact solvers from\nthe previous iteration on all instances with a timeout of 2 hours.\nThe solvers included: \\solver{addmc}, \\solver{c2d}, \\solver{D4},\n\\solver{GANAK}, and \\solver{sharpSAT}.\nWe ensured that if an instance could be solved only by one solver that\nwe did not pick more than 10 such instances.\nWe selected 40 instances that could not be solved within 3600s and\npicked the remaining ones randomly from 20 instances that could be\nsolved within 60s, 20 within the interval (60s,250s], 20 within the\ninterval (250s,500s], 50 within the interval (500s,900s], 30 within\nthe interval (900s,1800s], and 20 within the interval (1800s,3600s] if\nan interval could not be filled we picked the remaining ones randomly.\n\\paragraph{2022--23 (Random by Benchmark Set)}\nFollowing suggestions from other competitions, developers, and the\ntechnical advisor, we changed the process to select a certain number\nof instances randomly by benchmark set in 2022--2023.\nFirst, we remove instances from consideration that can be solved by\nthe original version of the \\solver{SharpSAT} solver in 60s and\ndiscard unsatisfiable instances due to limited interest for the actual\ncounting task.\nThen, we randomly sample 3 unsolved and 12 solved instances per\nbenchmark set. If there are fewer instances, we take all instances.\nWe randomly sample 160 solved and 40 unsolved instances from this\nselection.\nOur primary idea is to avoid a strong bias to large or small benchmark\nsets and incorporate instances that could have previously not been\nsolved.\n\\paragraph{Preprocessing}%\nWhile there are preprocessing techniques available for various\nversions of model counting, we did not apply any preprocessing since\n2021 to the instances and left this entirely to the developers of the\nsolvers.\nRecent preprocessors include \\solver{pmc}~\\cite{LagniezMarquis14a},\n\\solver{B+E}~\\cite{LagniezLoncaMarquis20}, and\n\\solver{Arjun}~\\cite{SoosMeel22}.\nFor model counting, documented options for the \\solver{pmc}\npreprocessor are \\ops{-vivification} \\ops{-eliminateLit}\n\\ops{-litImplied} \\ops{-iterate=10} \\ops{-equiv} \\ops{-orGate}\n\\ops{-affine}.\nDocumented options for \\solver{B+E} are~\\ops{-limSolver=1000}.\nFor projected model counting, \\solver{pmc} can be used as preprocessor\nusing the options \\ops{-vivification} \\ops{-eliminateLit}\n\\ops{-litImplied} \\ops{-iterate=10}\n\\paragraph{Precomputation of Model Counts}\nTo precompute the model counts, we ran the three best counters from\nthe previous iteration on the selected instances.  The solvers\nincluded \\solver{addmc}, \\solver{ApproxMC}, \\solver{c2d}, \\solver{D4},\n\\solver{DPMC}, \\solver{GANAK}, and \\solver{GPMC}. Note that we\nconsider non-exact solvers only to confirm the order of previously\ncomputed model counts.\n\n\\paragraph{Instance Characteristics}\nTable~\\ref{tab:track1:character} briefly summarizes instance\ncharacteristics of the competition instances from Track~1 (MC).\nWe omit statistics for the weighted, projected, and weighted projected\ntracks to avoid false insights. Recall that we obtained numerous\ninstances by taking model counting instances and guessing weights or\nprojection variables.\nWe consider the number of solved instances of the virtual best solver,\nan upper bound on the treewidth (median), number of variables\n(median/max), number of clauses (median), number of communities, and\nmodel count (median).\nWe computed the upper bound on the treewidth using\nflowcutter~\\cite{HamannStrasser18} and htd~\\cite{AbseherMusliuWoltran17a}.\nThe number of communities using tools provided by Ans\u00f3tegui,\nGir\u00e1ldez-Cru, and Levy~\\cite{AnsoteguiGiraldez-CruLevy12}.\nWe observe that the overall number of unsolved instances declines from\n2022 to 2023. For unsolved instances, the median on a treewidth upper\nbound appears to be quite high.\nThe median over the number of variables and number of clauses\nincreases (759, 3,754). Surprisingly, the maximum on the number of\nvariables (349,990) and number of clauses (82,069) can be much higher\nthan one would expect for counting from an uneducated theoretical\nperspective.\nUnsurprisingly, the median over the log10 of model counts is much\nhigher than one could possibly carry out by enumerating solutions.\nTo investigate possible correlations with solving, we investigated\ncommunity structures, modularity~\\cite{AnsoteguiGiraldez-CruLevy12},\nand treewidth.\nSo far, we cannot identify a correlation for community structures and\nmodularity. For upper bounds on the treewidth, it appears that we can\nfind only higher upper bounds on the width, which however does not\ngive a correlation as we heuristically compute the width.\nSince we selected instances in 2022 and 2023 randomly, we cannot draw\nconclusions from that fact that the solvers manage to solve more\ninstances.\nFinally, this leaves us with a research question: what are good\nmeasures to characterize model counters -- preferably models that also\nincorporate the underlying methods and benchmark sets.",
        "Participants and Results": "\\label{sec:results}\nThroughout the three years of the competition we had a quite stable\nnumber of participants.\nFor \\mbox{Track 1~(MC)}, we received 10 submissions in 2021, 11 submissions\nin 2022, and 9 submissions in 2023 showing a small decline in\nsubmissions.\nFor Track 2~(WMC), we received 6 submissions in 2021, 5 submissions in\n2022, and 7 submissions in 2023. Clearly, developers of the leading\nsolvers took time to enhance the solver by weighted counting\ncapabilities.\nFor Track 3~(PMC), we received 5 submissions in 2021, 4 submissions in\n2022, and 7 submissions in 2023 showing that we now also have a good\nvariety of solvers that support projected counting.\nFor Track 4~(PWMC), we received 2 submissions in 2022 and 4\nsubmissions in 2023. Thus, we can see a small increase in solvers that\nsupport now projection in connection with weights.\nWe received no submission in the heuristic track.\nOur developers came from China, Finland, France, Germany, India,\nJapan, Poland, Norway, Singapore, UK, and USA.\nIn the following, we only state the names of the authors for the\nleading submissions. For detailed information on the team members of\nthe submissions, we refer to \\ref{appendix:submissions}.\nAll submissions are publicly available on %\n  \\href{https://zenodo.org/records/10012811}{Zenodo:10012811 (2023)},\n  \\href{https://zenodo.org/records/10012803}{Zenodo:10012803 (2022)},\n  \\href{https://zenodo.org/records/10006718}{Zenodo:10006718 (2021)}, and \n  \\href{https://zenodo.org/records/10029900}{Zenodo:10029900 (2020)}.\nRecall that Table~\\ref{tab:mc-solvers} also surveys the original\ndevelopers, sources, and academic reference of participating solvers.\nWe would like to point out that we evaluate different rankings on the\nsame instances to avoid additional and precious computation time.\nDue to the amount of resources, tracks, and iterations, we focus on\nthe number of solved instances and how scores developed over the\nyears.\nHowever, we hope that some readers also appreciate the additional\nanalysis, which we provide publicly on Zenodo at\n\\href{https://zenodo.org/records/10671987}{Zenodo:10671987 (StarExec Data \\& Evaluations)}.\nThere we report on all executed solver configurations including\nruntime, model count (log10-notation and exact counts), comparison of\ncomputed counts by solvers and instances, precision, accuracy, error,\nexpected counts, or wrong results.\nThese details have been shared with the developers prior to the\npresentations of results at the SAT conferences.\n\n\\subsection{Solvers}\nBefore we discuss the results, we provide brief descriptions of\nprominent solvers\nand involved tools as directly provided by the developers or\nsummarized by us. Descriptions directly given by the\nauthors %\nare given in quotation marks (``[...]'') and typesetted in italics.\n\\paragraph{\\solver{Arjun-GANAK-ApproxMC}}\n\\noindent Mate Soos describes the solvers by him, Kuldeep S. Meel, his\ngroup, and collaborators in more extend online~\\cite{Soos24}.\nTheir submissions to the competition consisted primarily of manually\ntime-based portfolios where one solver or preprocessor runs for a\nparticular time, if no solution was found another solver continues\n\\solver{ApproxMC}~\\cite{SoosMeel19} is a probabilistically approximate\nmodel counter, which is based on partitioning the search space using\nXOR constraints and decision-based approximation. The decisions are\ndone by CryptoMiniSat~\\cite{SoosNohlCastelluccia09}, which is a SAT\nsolver by Mate Soos that supports Gaussian Elimination on XOR\nconstraints.\n\\solver{Arjun}~\\cite{SoosMeel22} is preprocessor that computes a\nsubset of projection variables such that these variables are\nindependent support, i.e., whenever models restricted to independent\nsupport variables are identical, they are identical identical on all\nprojection variables, which enables fast preprocessing.\n\\solver{GANAK}~\\cite{SharmaEtAl19a} is a probabilistic exact model\ncounter based on \\solver{SharpSAT}, \\solver{SharpSAT-td}, and\n\\solver{GMPC}. Its core is a component-caching-based solving approach\nwith probabilistic component caching, enhanced branching heuristics,\nand phase selection heuristics.\n\\paragraph{\\solver{c2d}} The \\solver{c2d} knowledge compiler is one of\nthe early tools for model counting developed and submitted by Adnan\nDarwiche~\\cite{Darwiche04a}. It compiles a formula in CNF a into\nd-DNNF (Deterministic Decomposable Negation Normal Forma). A d-DNNF\npermits model counting in polynomial time. The implementation employs\ntechniques from SAT and OBDD solving.\n\\paragraph{\\solver{D4}} The \\solver{D4} knowledge compiler employs\ntop-down search taking advantage of dynamic decompositions based on\nhypergraph partitioning~\\cite{LagniezMarquis17a}. In the recent\nversions,  preprocessing techniques have been extended.\n\\paragraph{\\solver{DPMC}}\nThe \\solver{DPMC} solver is based on dynamic-programming employing\ntree decompositions (project-join orders) and efficient data\nstructures,~e.g., algebraic decision diagrams with\ntensors~\\cite{DudekPhanVardi20b}.\n\\paragraph{\\solver{GPMC}}\n\\noindent Ryosuke Suzuki, Kenji Hashimoto, and Masahiko\nSakai~\\cite{SuzukiHashimotoSakai17a} write about their \\solver{GPMC}\nsolver: %\n{\\itshape%\n  ``We improve our existing projected model-counting solver with\n  component decomposition and caching. We use a CDCL algorithm,\n  including backjumping and restarting, to decide whether components\n  without projection variables are satisfiable or not. Furthermore, we\n  try a limited backjumping technique according to the condition of\n  processed components. We reimplement, on glucose, a projected model\n  counter with component decomposition and caching. Then we add the\n  above functions and evaluate by experiments them comparing with the\n  existing projected model counters.''\n}\n\\paragraph{\\solver{ExactMC}}\nThe \\solver{ExactMC} solver~\\cite{LaiMeelYap21a} implements model\ncounting by knowledge compilation based on a generalization of\nDecision-DNNF, called CCDD, which enable literal equivalences.\nVersions of the solver also allow for anytime counting without\nguarantees,~i.e., only providing bounds if the solver is interrupted.\n\\paragraph{\\solver{mtmc}} %\n\\noindent Ivor Spence provided us with the following short\ndescription:\n{\\itshape%\n``The Merge Tree Model Counter (mtmc) solves the model counting\n(including projected and weighted versions) using a static variable\nordering. An explicit binary tree (actually a directed acyclic graph)\nis constructed to represent and then count the satisfying models. The\nidea is most effective when a good variable ordering can be found to\nreduce the range of variables within clauses, either by simulated\nannealing or by a \"force\" algorithm. The order in which clauses are\nadded as the tree grows to represent the entire problem is also\nimportant. The solver typically uses more memory than others.''\n}\n\\paragraph{\\solver{ProCount}}\nThe \\solver{ProCount} solver~\\cite{DudekPhanVardi21a} employs\ndynamic-programming on tree decompositions (project-join trees)\nCentral concept is to define gradedness on project-join trees, which\nrequire irrelevant variables to be eliminated before relevant\nvariables.\n\\paragraph{\\solver{narasimha}}\nIs a portfolio consisting of \\solver{ApproxMC}, \\solver{B+E}\npreprocessing, \\solver{ExactMC}, and \\solver{Ganak} first\npreprocessing runs, then \\solver{Ganak}, then \\solver{ExactMC} or\n\\solver{ApproxMC}.\n\\paragraph{\\solver{SUMC2}}\nIvor Spence~\\cite{Spence22} describes the \\solver{SUMC2} solver as\nfollows: {\\itshape%\n  \\solver{SUMC2} is new version of the \\solver{SUMC1} solver written\n  specifically to test an idea about how to count the number of models\n  which satisfy a propositional expression. \\solver{SUMC1} was written\n  to enter into the first model counting\n  competition~\\cite{FichteHecherHamiti21a}. The solver is based around\n  counting how many models are eliminated by each clause because they\n  fail to satisfy it, and using an extended mathematical result giving\n  the cardinality of a union of sets to determine how many models are\n  eliminated overall. The GNU Multiple Precision Arithmetic Library\n  (GMP~\\cite{GranlundEtAl16a}) is used to manipulate the large integer\n  values which arise because the possible number of models is so\n  large.  The solver calculates exactly how many satisfying models\n  there are but overall its performance is not expected to be\n  competitive with the best other solvers when considered across the\n  full range of benchmarks, in particular in an environment in which\n  memory is constrained. It is however possible that it will perform\n  well on small benchmarks which other solvers may find difficult.\n  The source code of the solver is available at\n  \\url{https://www.github.com/ivor-spence/sumc}.\n}%\n\\paragraph{\\solver{SharpSAT-TD} (Tuukka Korhonen, Matti J\\\"arvisalo)}\n\\noindent Tuukka Korhonen and Matti\nJ\\\"arvisalo~\\cite{KorhonenJarvisalo23a} write in their solver\ndescription for the competition version of the solver:\n{\\itshape%\n  ``SharpSAT-TD is based on the exact model counter\n  SharpSAT~\\cite{Thurley06a}, from which it inherits the basic\n  structure of a search-based model counter with clause learning,\n  component analysis, and component caching. The main new feature in\n  SharpSAT-TD is that we compute a tree decomposition of the input\n  formula with the FlowCutter\n  algorithm~\\cite{HamannStrasser18,Strasser17}, and integrate the tree\n  decomposition to the variable selection heuristic of the counter by\n  a method introduced by the authors\n  in~\\cite{KorhonenJarvisalo21a}. Another significant new feature is a\n  new preprocessor. Further, SharpSAT-TD extends SharpSAT by directly\n  supporting weighted model counting.\n  [...]\n  We note that the current version of SharpSAT-TD differs\n  significantly from the version evaluated\n  in~\\cite{KorhonenJarvisalo21a}, as the version evaluated\n  in~\\cite{KorhonenJarvisalo21a} differed from SharpSAT only in the\n  variable selection heuristic, while the current SharpSAT-TD has also\n  other new features. The current SharpSAT-TD has stayed almost\n  unchanged since the Model Counting Competition 2021: After the\n  competition we fixed some bugs and added proper support for weighted\n  model counting, but after that no further updates have been made.''\n}\n\\subsection{Track 1 (MC)}\\label{sec:results:mc}\nTable~\\ref{tab:mc} gives a detailed overview on the standings and\nsolvers in the years 2021, 2022, and 2023.\nFigure~\\ref{fig:mc2023:track1:cdf} illustrates runtime results in form\nof a CDF for the 2023 iteration. Note that we technically only borrow\nthe visual representation and underlying idea of CDFs (cumulative\ndistribution functions), which describe the distribution of random\nvariables by summing up the probability of an event smaller than a\nspecific value -- in our case the runtime.\nWe employ the ranking as given in Section~\\ref{sec:ranking}.\nOverall, we have three extremely strong teams and techniques, namely\nknowledge compilation, component-based caching, and preprocessing.\nIn 2021, a new entrant entered the field in model counting. Tuukka\nKorhonen and Matti J\u00e4rvisalo developed a solver named\n\\solver{SharpSAT-TD}~\\cite{KorhonenJarvisalo23a,KorhonenJarvisalo21a},\nwhich builds on a well-established solver \\solver{SharpSAT} by Marc\nThurley~\\cite{Thurley06a} that uses component-caching. Tukka and Matti\nmodified the heuristic by enhancing it using tree decompositions and\nimproved preprocessing. \\solver{SharpSAT-TD} solved 17 instances more\nthan the next best solver. This was a huge and unexpected advancement.\nThe solver turned out to be the new baseline in the coming years.\nThe runner-up was narasimha by Sharma, Lai, Xu, Roy, Yap, Soos, and\nMeel, who combined approximate\n(\\solver{ApproxMC}~\\cite{ChakrabortyMeelVardi16a}) and exact solving\n(\\solver{GANAK}~\\cite{SharmaEtAl19a}) into a portfolio and solved 61\ninstances. The third place is filled by\n\\solver{D4}~\\cite{LagniezMarquis17a} submitted by Jean-Marie Lagniez\nand Pierre Marquis, who based their solver on knowledge compilation,\nand solved 51 instances.\nIn summary, we can see a huge gap between the three best solvers.\nNote that we combined approximate and exact solving techniques in the\nranking Track~1 (MC) in 2021, which results in the fact that a few\ninstances were outside of expected margin of error. To compensate, we\nadded another track on model counting (Track~4) where we allowed a\nhigher margin of error. On Track~4 (MC), we observe that\n\\solver{SharpSAT-TD} solves in total 68 instances, closely followed by\n\\solver{narasimha} with 65 solved instances, and \\solver{D4} with 53\nsolved instances. The approximate component of \\solver{narasimha}\nhelped to solve more instances than \\solver{D4}. \nIn 2022, a modified version of \\solver{SharpSAT-TD} together with a\nfast preprocessor, called \\solver{Arjun}~\\cite{SoosMeel22}, manged to\nsolve 79 instances. It scored only two instances more than runner-ups\n\\solver{ExactMC}~\\cite{LaiMeelYap21a} and \\solver{SharpSAT-TD}, which\nsolved 77 instances. \\solver{ExactMC} was developed by Yong Lai,\nKuldeep S. Meel.  Roland H.C. Yap, and Zhenghang Xu and is based on\nknowledge compilation using CCDD (Constrained Conjunction and Decision\nDiagram)~\\cite{LaiMeelYap21a}.\n\\solver{SharpSAT-TD} was developed by Tuukka Korhonen and Matti\nJ\u00e4rvisalo, who carried out only minor improvements over its\npredecessor.\nThese solvers were closely followed by \\solver{D4} developed by Pierre\nMarquis and Jean-Marie Lagniez, who managed to solve 76 instances.\nThe leading submission that employed approximate solving was a\nportfolio developed by Mate Soos and Kuldeep S. Meel, who managed to\nsolved 74 instances. Overall, there is only a small gap between the 5\nbest solvers or combinations of solvers.\nIn 2023, we again saw that \\solver{SharpSAT-TD} by Tuukka Korhonen and\nMatti J\u00e4rvisalo was ahead of all other solvers with 82 solved\ninstances.\nThe combination of \\solver{Arjun-GANAK-ApproxMC} solved 79 instances\nand ranked second in the approximate ranking.\n\\solver{D4} again by Pierre Marquis and Jean-Marie Lagniez solved 75.\nThe combination of \\solver{ExactMC} and Arjun by Yong Lai, Zhenghang\nXu, Minghao Yin, Kuldeep S. Meel, and Roland H.C. Yap solved 74\ninstances.\nClosely followed, we see \\solver{GANAK} together the \\solver{Arjun}\npreprocessor submitted by Mate Soos and Kuldeep S. Meel with 71 solved\ninstances.\nWe suspect that the preprocessors such as \\solver{Arjun} played a\ncentral role in the overall good performance of the best solvers.\n\n\\subsection{Track 2 (WMC)}\\label{sec:results:wmc}\nTable~\\ref{tab:summary:wmc} gives a detailed overview on the\nstandings and solvers in the years 2021, 2022, and 2023 according to\nthe rankings in Section~\\ref{sec:ranking}.\nIn 2021, Tuukka Korhonen and Matti J\\\"arvisalo also submitted their\n\\solver{SharpSAT-TD} solver to the weighted model counting track and\nimmediately ranked first with 90 solved instances. They outputted one\ninstance, which however turned out to be buggy. According to the 2021\nrules, the instance was only excluded from the ranking without\ndisqualifying the solver. Overall \\solver{SharpSAT-TD} solved 10\ninstances more over the second best solver.\nIn fact, the runner-up was \\solver{D4} developed by Jean-Marie Lagniez\nand Pierre Marquis who managed to solve 80 instances. Closely\nfollowed, we have the \\solver{c2d} solver with 79 solved instances\nsubmitted and developed by Adnan Darwiche.\nIn 2022, the picture was almost similar, however, with a new entrant\nin-between.\nSince the 2022 ranking allows to distinguish between exact together\nwith arbitrary precision (0\\%) and exact but small precision loss\n(0.1\\%), we see a slightly different picture.\n\\solver{SharpSAT-TD} by Tuukka Korhonen and Matti J\u00e4rvisalo is the\nclear winner regardless of using arbitrary precision with 75 solved\ninstances.\nConsidering solvers with arbitrary precision, we see \\solver{c2d} by\nAdnan Darwiche on the second place with 60 solved instances, and\n\\solver{DPMC} by Vu Phan, Jeffrey Dudek, and Moshe Vardi on the third\nplace with 43 solved instances.\nTurning away to small precision loss, which allows developers to\nparticipate if they were so far unable to integrate an arbitrary\nprecision library, we see that \\solver{GPMC} by Kenji Hashimoto and\nShota Yap is the runner-up with 68 solved instances, closely followed\nby \\solver{D4} submitted by Pierre Marquis and Jean-Marie Lagniez who\nsolved 66 instances.\nIn 2023, the picture remains fairly similar. The trophy goes to\n\\solver{SharpSAT-TD} by Tuukka Korhonen and Matti J\u00e4rvisalo with 75\nsolved instances, undefeated ahead of the other solvers with 8\ninstances more.\nThe second place, goes to GPMC by Kenji Hashimoto and Shota Yap, which\nsolves 62 instances.\n\\solver{ExactMC-Arjun} by Yong Lai, Zhenghang Xu, Minghao Yin, Kuldeep\nS. Meel, and Roland H.C. Yap takes the third place with 59 solved\ninstances.\nInterestingly, we can see quite a notable differences in number of\nsolved instances for the arbitrary precision solvers as the winning\nsolver is 13 instances ahead.\nIn the small precision loss setting, we see a slightly different ranking.\nStill, \\solver{SharpSAT-TD} is head, followed by \\solver{D4}, and\nagain \\solver{GPMC}.\n\\solver{D4} was submitted by Pierre Marquis and Jean-Marie Lagniez and\nsolved 67 instances, so 8 instances behind \\solver{SharpSAT-TD} and 5\ninstances ahead of \\solver{GPMC}.\nOverall, we observe five very strong solvers with different underlying\ntechniques, namely, \\solver{SharpSAT-TD}, \\solver{D4}, \\solver{GPMC},\n\\solver{ExactMC-Arjun}, and \\solver{c2d}.\n\n\\subsection{Track 3 (PMC)}\\label{sec:results:pmc}\nTable~\\ref{tab:summary:pmc} states a detailed overview on the\nstandings and solvers in the years 2021, 2022, and 2023. We employ\nrankings as previously given in Section~\\ref{sec:ranking}.\nIn 2021, \\solver{GPMC} by Kenji Hashimoto and Shota Yap solved in\ntotal 70 instances and thereby scored the winning trophy. The\n\\solver{D4} solver by Pierre Marquis and Jean-Marie Lagniez ranks\nsecond with 57 solved instances. The portfolio solver\n\\solver{narasimha}, which was submitted by Shubham Sharma,Yong Lai,\nZhenghang Xu, Subhajit Roy, Roland H.\\ C.\\ Yap, Mate Soos, and Kuldeep\nS.\\ Meel managed to solve 52 instances correctly. Note that\n\\solver{narasihma} solved 74 instances in total and would have even\nbeen ahead of all other solvers, however, we had to exclude 22\ninstances from the ranking. These 22 instances were outside the\nexpected margin 1\\% error, but clearly within the 0.8 approximation\nfactor that is usually assumed for approximate\ncounting~\\cite{SoosMeel19,SharmaEtAl19a,ChakrabortyMeelVardi16a}.\nSince our ranking in 2021 did not distinguish between approximate and\nexact solving, we went into long discussions. We concluded to exclude\nthese instances, consider them as unsolved, to not disqualify the\nsolver, and revise the rules for the following iterations.\nIn 2022, Mate Soos and Kuldeep Meel submitted a new solver called\n\\solver{GANAK}, which managed to solve 83 instances in an approximate\nconfiguration and 56 instances in an exact configuration.  Thereby\nthey win the approximate ranking and score third in the exact ranking.\nTheir approximate configuration was 11 instances ahead of the\npreviously best solver, which is a quite notable difference.\nThe \\solver{GPMC} solver by Kenji Hashimoto and Shota Yap takes the\nsecond place in the exact ranking with 72 instances.\nClosely followed, we see the \\solver{D4} solver by Pierre Marquis and\nJean-Marie Lagniez with 71 instances solved and hence just one\ninstance less.\nIn 2023, the ranking did not change much. The portfolio consisting of\n\\solver{GANAK}, \\solver{ApproxMC}, and the preprocessor\n\\solver{Arjun}, which was submitted by Mate Soos and Kuldeep S. Meel\nsolved in total 81 instances. Thus, they are clear winner in the\napproximate ranking. Comparing to exact solving techniques, we see 71\nsolved instances by \\solver{D4} scoring second in approximate and\nfirst in exact ranking, and 67 solved instances by \\solver{GPMC}\nresulting in the third and second place respectively.  Finally, the\ncombination of \\solver{GANAK} and \\solver{Arjun} solved 64 instances\nand hence scored third in the exact ranking.\nIn summary, we see a clear development of extremely strong solvers for\nprojected model counting. Approximate solving can provide a notable\ndifference of solved instances when approximations are acceptable.\nAuthors compete hard and manage to improve every year and asks for the\nscientific question whether improvement is primarily due to\nengineering or new theoretical insights.\n\n\\subsection{Track 4 (PWMC)}\\label{sec:results:pwmc}\nIn 2022, we established a track that combines projected and weighted\nmodel counting to open up for potential applications that require\nweights projected to a certain subset of the variables.\nTable~\\ref{tab:summary:pwmc} provides an overview on the results in\nthe 2022 and 2023 iterations according to rankings as given in\nSection~\\ref{sec:ranking}.\nIn 2022, the \\solver{GPMC} solver, which was submitted by Kenji\nHashimoto and Shota Yap, solved 79 instances scored second in the\narbitrary precision ranking and first in the small precision loss\nranking. Vu Phan, Jeffrey Dudek, and Moshe Vardi contributed\n\\solver{DPMC}, which outputted a solution to 35 instances in total.\nIn 2023, we received four submissions. \\solver{GPMC} ranked first,\nhowever, this time in both categories by solving 82 instances\nsuccessfully. \\solver{D4}, submitted by Pierre Marquis and Jean-Marie\nLagniez solved 72 instances and scored second in the small precision\nloss ranking. \\solver{DPMC} solved 39 instances and scored second in\nthe arbitrary precision ranking and third in the small precision loss\nranking.\nIn summary, we received more contributions to the projected weighted\nmodel counting track and were able to establish a new\nproblem. Furthermore, we were positively surprised that solvers\nperform quite well.\n\\subsection{Summary}\nOverall, we saw very unexpected improvements in the three years of the\ncompetition. When \\solver{SharpSAT-TD} entered the competition in\n2021, everyone was surprised that a component caching-based solver\nenhanced by tree decompositions would solve significantly more\ninstances than knowledge-compilation-based solvers or approximate\ncounters.\nIn addition, this development revived the underlying solver\n\\solver{SharpSAT}, which is based on\n\\solver{minisat}~\\cite{EenMishchenkoSorensson07} and solves significantly less\ninstances than the two successful knowledge-compilers \\solver{c2d} or\n\\solver{D4}.\nAnother big surprise was that approximate counting could not show its\nperformance over the exact counters within the limits of the\ncompetition on Track~1 (MC). We suspect that the reason was our strict\nrequirements on approximation factor and size of the\ninstances. However, in Track~3 (PMC) approximate or probabilistic\ntechniques contributed to very successful solving portfolios. This\nmakes us believe that there is clearly a value for approximate\ncounting on larger instances and when we do not require exact\nsolutions.\nFor Track~3 (PMC), \\solver{GPMC} showed very high quality and stable\nperformance throughout the years. Clearly, a very well developed\nsolver.\nUnsurprisingly, the picture on Track~2 (WMC) is not much different to\nTrack~1 (MC). The reason is likely, that we generated instances\nrandomly from previous collections of instances from Track~1 (MC).\nDue to a consistently missing number of submitted benchmark instances,\nwe suggest to abandon the track in the next iteration.\nTrack~4 (PWMC) received an increasing number of submissions, but also\nshows a similar behavior as Track~3 (PMC) throughout the years. Hence,\nwe also suggest to abandon the track.\n\\paragraph{Solving Techniques}\nWe can divide the received submissions by their underlying solving\ntechniques. Interestingly, these vary quite a bit and are by far more\nsophisticated than simply enumerating solutions.\nIn principle, we can classify solvers into four categories\n(i)~search, %\n(ii)~knowledge compilation, %\n(iii)~dynamic programming, and %\n(iv)~approximate counting. %\nSolvers that belong to (i), (ii), or (iv) employ principles from SAT\nsolvers. %\nSome submissions combine multiple techniques in a simple solving\nportfolio.\nTo each category, we can find numerous research articles on basics,\nimplementations, and underlying principles.\nComponent-caching-based solving uses two main ideas: search paths that\ncannot lead to a solutions are cut using clause learning and counts to\na subproblem are stored in caches, which can then be used to avoid\nexpensive recomputation~\\cite{SangEtAl04,Thurley06a}. For practical\nsuccessful solving, the design of caches~\\cite{LatourEtAl19,LatourBabakiFokkinga22} and balancing\nsearch heuristics~\\cite{KorhonenJarvisalo21a,KorhonenJarvisalo23a} are\nimportant challenges.\nKnowledge-compilation aims at transforming an input formula usually\ngiven in CNF into an equivalent formula in another normal form on\nwhich counting is efficient. Equivalence can be logical equivalence or\none can also think of an equivalence that just preserves certain\nreasoning properties. There is extensive theory behind theoretical\nproperties of knowledge compilation~\\cite{darwiche2002knowledge}.\nDynamic programming is based on splitting the search according to a\ntheoretically clearly defined structure. We are mostly well aware of\nthe theoretical benefits and limitations. However, underlying ideas\ncan also be combined with other solving techniques to guide solving\nalong specific decompositions~\\cite{HecherThierWoltran20}.\nApproximate solving aims at splitting the search-space uniformly and\nthen sampling solutions until a sufficiently probabilistic estimate of\nthe count can be outputted~\\cite{ChakrabortyEtAl14a}.\nWhile these techniques appear to be inherently different, they share\nmany similarities.  Recent\narticles~\\cite{MuiseEtAl12a,KieselEiter23a,EiterHecherKiesel21}\nidentify connections between structure from a theoretical perspective\nand solving approaches.\n\\paragraph{Notable Solvers} %\nDuring 2021--2023 iterations of the competition, we received highly\ninteresting new solvers. The following solvers drew our attention\nthroughout the years.\n\\solver{SharpSAT-TD}~\\cite{KorhonenJarvisalo21a,KorhonenJarvisalo23a}\nwas submitted first in 2021 and turned out to be the best solver right\naway solving 18 instances more than the previously best exact\nsolver. It solved also more instances than approximate model counters\non our instance sets for Track~1~(MC) and Track~2~(WMC).\nInterestingly, authors of \\solver{SharpSAT-TD} managed to keep the\nperformance up in all three iterations while only minor changes were\nintroduced.\nThe solver \\solver{GPMC} stood out as one of the best solvers on\nTrack~3~(PMC) and also supports Track~4~(PWMC). It did not perform as\nstrong as the other solvers on the remaining tracks but showed quite\ngood performance. %\nThe best knowledge compiler turned out to be \\solver{D4}, which allows\nto easily output Decision-DNNFs that can then be used to count\nmultiple times. In the most recent iteration, \\solver{D4} turned out\nto be also the best exact solver on Track~3~(PMC).\n\\solver{ExactMC} turned out to be an interesting newcomer in the field\nknowledge compilation~\\cite{LaiMeelYap21a} being among the best\nsolvers.\nAfter the first two competitions, it seemed that approximate counting\nwas of limited use over exact solvers on the selected competition\ninstances.\nHowever, after the 2022 and 2023 iterations, we see that approximate\ncounting shows quite interesting performance on Track~3~(PMC) when\ncombined into a portfolio allowing to solve more instances than other\nsolvers.\n\\paragraph{Expected Model Counts, Errors, and Correctness}\nTo check whether solvers output the expected model counts, we\nprecompute counts using the three best counters from the previous\niteration.\nFor execution on StarExec, we consider only counts in log10 notation\nand compare with a bash script at very low precision to the log10\nestimates outputted by the solvers.\nTo validate whether the solvers are within the expected error ranges,\nwe download all outputs from StarExec, parse them separately for the\nhighest precision output, and run comparisons with an arbitrary\nprecision library.\nAfter the competition, we additionally examine whether the solvers\nagree on the model count and manually investigated for discrepancies\nbetween solvers by inspecting the counts in log10-notation.\nObviously, a majority decision is insufficient for model counting and\nholds the disadvantage that a these solvers are based on a specific\ntechnique, which all have the same underlying bug.  Hence, a majority\ncheck is only a necessary condition. A sufficient condition would\nrequire to emit a correctness proof and verify the proof. Recent\nadvances on proof systems for model counting seem to be a promising\nstart~\\cite{Capelli19,CapelliLagniezMarquis21a,FichteHecherRoland22a,BryantNawrockiAvigad23a,BeyersdorffHoffmannSpachmann23a}.\nUnfortunately, only few solvers implement proof traces and these\ntraces can be quite large, which is a notable issue with our available\ncluster resources.\nStill, we discovered erroneous solvers and had to remove them\npartially or entirely from rankings.\nMost of the solvers worked fine on the provided instances, but we\ndiscovered bugs after the competition on other instances.\nMate Soos also made us aware of issues when fuzzing the solvers.\nFor future editions, we suggest to introduce fuzzing and optional\nproof traces and checking thereof, together with strict consequence of\ndisqualifying incorrect exact solvers instead of removing them from a\nranking.\n\\paragraph{Stability} Overall the stability of solvers improved\nsignificantly within the three iterations of the competition. All\nsolvers manage to output the format correctly and only few solvers\nproduce segfaults. However, most solvers require manual flags when\nrunning to select the type of instance and the start scripts are most\ncertainly not useful for the general public.\nMoreover, some solvers do not interpret corner-cases in the format\nspecification correctly. For example, these solvers return differing\nresults when weights are given only for positive literals.\nHousekeeping is still an\nissue for some solvers, which output massive amounts of debug messages\nor occupy notable amounts of disk space. This causes problems with\nstorage on StarExec and required us to split up jobs, manual download\nresults, and delete previous runs, which can easily affect stability\nof evaluating results in the competition.\nFinally, we would like to mention that we also improved stability on\nour end, as we introduced format checking and correction tools.  We\ndiscovered that some of the earlier bugs were caused by\nambiguities. Therefore, we checked all instances and also corrected\ncollected instances if needed.\n\\paragraph{Execution (StarExec)}\nThe StarExec system allowed us a notable amount of flexibility and\nprovided us with stable cluster resources on which developers could\neasily debug potential errors.\nSome extended requirements did not allow us to use leader boards or\noutputs directly from the StarExec system.\nStill, the system proved to be of major value and we were quite\ndiscouraged to hear that the Logic solving communities will likely\nloose StarExec as tool in 2025. Without joint efforts on computational\nresources, future organizers will effectively be in the rain and\nrequire to spend lots of hours to handle solver submissions and\ndebugging.\nWe hope that Markus Iser, who is currently leading an initiative, can\nprovide us with new insights and resources.\nTo our surprise, we obtained unstable outputs and runs when using\nBenchExec~\\cite{BeyerLoweWendler15,BeyerLoweWendler19} and therefore\nemployed runsolver~\\cite{Roussel11} to limit resources on StarExec.\n\\paragraph{Open Source and Replication}\nDuring the four years of the competition, \\solver{c2d} was the only\nnon-open source solver.\nDue to its absence in the latest iteration, the 2023 competition\ncontained only open source submissions.\nTo spare developers and researchers precious research time, we provide\na full system to replicate aspects of the competition using a tool\ncalled\n\\href{https://github.com/tlyphed/copperbench}{\\solver{copperbench}}~\\cite{FichteEtAl24}.\n\\solver{copperbench} allows to generate executions for the widely used\nhigh performance cluster (HPC) software Slurm~\\cite{YooJetteGrondona03} and\nprovides a systematic approach to its evaluation.\nWe provide a data set containing basic configuration for this tool and\nall solvers including the necessary wrappers.\nA user can download \\solver{copperbench}, a data set that contains a\nbasic setup for slurm-based clusters\n\\href{https://doi.org/10.5281/zenodo.10866053}{Zenodo:10866053}, and\ninstances from the\n\\href{https://zenodo.org/communities/modelcounting/}{Zenodo Model\nCounting Community} and can generate execution jobs to run an\nempirical evaluation with existing solvers on other clusters.\nNote that the current setup is only tested on two cluster setups, so\nwe appreciate feedback.\nStarExec exports are available at\n\\href{https://doi.org/10.5281/zenodo.10671987}{Zenodo:10671987}.\nNote that this set may contain multiple StarExec runs, which was\ninevitable as we had to run some solvers multiple times due to disk\nspace restrictions.",
        "Organization": "The composition of the program committee during the competitions\n2021--2023 was as follows:\n",
        "Conclusion and Future": "\\label{sec:concl}\nBefore we conclude, we would like to thank all participants. There\nwould have been no competition without their solvers, benchmark\ninstances, and new applications. Diverse benchmark collections and new\napplications are crucial to test and challenge researchers for new\ntechniques.\n\\medskip\n\\noindent In this paper, we survey work on the model counting\ncompetition of the 2021--2023 iterations. We introduce the novice\nreader to the four main problems of interest, namely, model counting\n(\\MC), weighted model counting (\\WMC), projected model counting\n(\\PMC), and projected weighted model counting (\\PWMC). We list classic\nand recent competition solvers, including supported problems,\ncompetition years, scientific references, and download links\n(Table~\\ref{tab:mc-solvers}). We illustrate competition tracks and\nexplain the background on accuracy, precision, rankings, and computing\ninfrastructure.\nWe provide access to all collected instances, explain the selection\nprocess, and briefly explain instance characteristics.\nThen, we survey participants and the results of the three\ncompetitions.\nThroughout these years, we received extremely strong\ncontributions. New techniques challenged existing solvers. Algorithms\nand their engineering improved notably. A new, fast \\solver{Arjun}\npreprocessor showed up, developers of knowledge compilers\n(\\solver{D4}) fought hard for improvements, tree decompositions spured\nsearch-based solvers (\\solver{SharpSAT-TD}), and multiple new solvers\nappeared during these years (\\solver{GPMC}, \\solver{DPMC},\n\\solver{ExactMC} \\solver{mtmc}, \\solver{GANAK}, \\solver{pc2dd},\n\\solver{ProCount}).\nMoreover, we clearly see stability improvements and emerging interest\nin certified counting from a theoretical\nperspective~\\cite{Capelli19,CapelliLagniezMarquis21a,FichteHecherRoland22a,BryantNawrockiAvigad23a,BeyersdorffHoffmannSpachmann23a}.\nWe conclude that the competition inspired both practical and\ntheoretical research and provides an annual event for researchers to\npresent new implementations.\n\\paragraph{Competition Instances}\nThe competition provides an interesting snapshot on the current state\nof development of model counters, serves as important event to get\nresearchers together, and provide a joint platform for interested\npotential users.\nHence, competition instances may serve as helpful baseline for future\ncomparisons.\nHowever, given the sheer amount of instances and nature of\ncomputational hardness of model counting, we face the difficulty to\nselect instances for the competition.  In turn, it poses a severe\ndanger to empirical evaluations by tracking progress and improvements\nsolely by considering these benchmark sets as sole truth.\nBut there might well be solvers that perform well on specific sets of\ninstances or application. These solvers may show high value while\nperforming bad on the overall competition benchmarks.\nTherefore, we would like to encourage reviewers and authors to focus\non pros and cons of solvers instead of evaluating whether the solver\nimproved over one or all iterations of the model counting\ncompetition. We believe in diversity of tools and\napplications. Consequently, we also released the full set of\ninstances, which we collected or received.\n\\paragraph{Future Works}\nThere are many open topics for future research that originate in the\ncompetition.\nA replication imitative similar to SAT Heritage\nproject~\\cite{AudemardPauleveSimon20a,Di-CosmoZacchiroli17a} could be\nhelpful to track progress of solvers over time and make them long term\naccessible.\nWe expect that certified model counting will certainly be of huge\ninterest over the next years, especially under the light that counting\ncould prove helpful for applications in verification. In that line,\ncounting modulo satisfiability might be an interesting for\napplications~\\cite{SpallittaMasinaMorettin22}.\nFor the competition itself, we see the topic of effective\npreprocessing~\\cite{LagniezMarquis14a}, robust benchmark\nselection~\\cite{Smith-MilesMunoz23,KandanaarachchiSmith-Miles23},\nstable rankings (number of solved instances or PAR-X ranking favoring\nfast solvers as used in SAT competitions~\\cite{Iser23}), new\napplications, classification of instances, and\npractical~\\cite{PaivaMorenoSmith-Miles22} vs theoretical hardness of\nsolving as interesting targets for future research.\nFor applications, investigations into on solving portfolios or\nalgorithm configuration~\\cite{Hoos12} might be interesting as well.\n\\paragraph{Next Iteration}\nPreparations for the next iteration %\nare already in process\nand we hope for new interesting instances and many great solver\nsubmissions.\nWe welcome anyone who is interested in the competition to send us an\nemail (\\url{mailto:organizers@mccompetition.org}) for receiving\nupdates and joining the discussion. We look forward to the next\nedition. Detailed information will be posted on the website at\n\\url{modelcounting.org}.",
        "Acknowledgements": "\\noindent The authors gratefully acknowledge the following computation\ncenters for resources:\n\\begin{itemize}\n\\item StarExec under the direction of Aaron Stump (Iowa), Geoff\n  Sutcliffe (University of Miami), and Cesare Tinelli\n  (Iowa). See: \\url{https://www.starexec.org/starexec/public/about.jsp}\n\\item The GWK support for funding this project by providing computing\n  time through the Center for Information Services and HPC (ZIH) at TU\n  Dresden. See:\n  \\url{https://tu-dresden.de/zih/hochleistungsrechnen/nhr-center?set_language=en}\n\\item Computation resources provided by the National Academic\n  Infrastructure for Supercomputing in Sweden (NAISS) at Link\\\"oping\n  partially funded by the Swedish Research Council through grant\n  agreement no. 2022-06725. See: \\url{https://www.naiss.se/}\n\\end{itemize}\n\\noindent Furthermore, we would like to thank the following people for helping\nwith the organization and suggestion for future editions.\nFirst, we would like to thank Daniel Le Berre for detailed, reliable,\nand fast input and suggestions to make the competition a successful\ncommunity event.\nAron Stump made StarExec available to the model counting community and\nallowed us to evaluate many solvers and instances in a uniform way. He\nwas available for bug fixing when we discovered problems that arose\nduring our evaluations.\nStefan Woltran, Toni Pisjak, Mathias Schl\\\"ogel, and Tobias Geibinger\nprovided cluster resources at TU Wien and Sarah Gaggl supported guest\naccess of resources at TU Dresden for the pre-evaluation phases and\nfor cleaning up instances.\nSteffen H\\\"olldolber and Sarah Gaggl enabled us to use high\nperformance computing (HPC) resources on the Dresden data center for\nthe pre-computation phase and analyzing instance characteristics.\nFinally, we would like to remember Toni Pisjak, Steffen H\\\"olldobler,\nand Fahiem Bacchus who all passed away way by far too soon.\n  Fahiem was one of the pioneers working on practical model counting.",
        "Declaration of Competing Interest": "The authors of the report co-authored model counters called\n\\solver{DPDB}~\\cite{FichteHecherThier22},\n\\solver{NestHDB}~\\cite{FichteHecherMorak23}, and\n\\solver{gpusat}~\\cite{FichteHecherRoland21}. These solvers never\nparticipated in any competition and have not been evaluated along the\nline of this work.\nThe authors have a joint publication together with Daniel Le\nBerre~\\cite{FichteBerreHecher23}.",
        "Ethical Statement": "The work did neither involve humans or animals nor data on about them.",
        "Declaration of generative AI in scientific writing": "The authors used generative AI (Grammarly) to  identify\npotential language improvements.\n\\clearpage\n\\appendix",
        "2021+ Data Format  (DIMACS-like)": "\\label{sec:format}\nFor the 2020 competition, we suggested a uniform data format.\nHowever, after the competition, we received multiple complaints about\nissues in the format. In particular, that headers are not compatible\nwith SAT solvers, which requires reencoding and breaks downwards\ncompatibility.\nIn order to fix these issues, we reevaluated the format in 2021 and\nsuggested the format as listed below. We keeping the format very close\nto the original DIMACS format, removing ambiguities, and keep SAT\ncompatibility.\n\\subsection{Input Format}\nIn the Model Counting Competition 2021, we use a DIMACS CNF-like input\nformat~\\cite{TrickChvatalCook93a}. The format extends the format used\nin SAT\ncompetitions~\\cite{JarvisaloBerreRoussel12a,sat_competition20}\\footnote{See,\n  for example,\n  \\url{http://www.satcompetition.org/2009/format-benchmarks2009.html}}\nby introducing statements for weights and projections similar as in\nCachet~\\cite{SangBeameKautz05a} or GANAK~\\cite{SharmaEtAl19a}.\n\\medskip\\noindent\nThe following description gives an idea on the expected input format:\\vspace{-0.75em}\n\\begin{verbatim}\nc c this is a comment and will be ignored\nc c REPRODUCIBILITY LINE MANDATORY FOR SUBMITTED BENCHMARKS\nc r originUrl/doi descUrl/doi [generatorUrl/doi]\nc c HEADER AS IN DIMACS CNF\np cnf n m\nc c OPTIONAL MODEL COUNTING HEADER\nc t mc|wmc|pmc|pwmc\nc c PROBLEM SPECIFIC LINES for wmc|pmc\nc p ...\nc p ...\nc c CLAUSES AS IN DIMACS CNF\n-1 -2 0\n2 3 -4 0\nc c this is a comment and will be ignored\n4 5 0\n4 6 0\n\\end{verbatim}\n\\noindent In more details (note that we print symbols in typewriter font):\n\\begin{itemize}\n\\item Line separator is the symbol \\fsym{$\\backslash{}$n}. Expressions \n  are separated by space.\n\\item A line starting with character \\fsym{c r} is a comment. The\n  solver may ignore it. The line aims for open data and\n  reproducibility of the submitted instances expressing the origin of\n  the benchmarks. The line will be added after competition when\n  publishing the instances.\n  \\fsym{originUrl/doi} states where the instance can be downloaded\n  (either as URL or DOI). \\fsym{descUrl/doi} links to a description of\n  the benchmarks. \\fsym{generatorUrl/doi} provides an optional URL/DOI\n  to where a problem generator can be found.\n\\item A line starting with character \\fsym{c t} is a comment. The\n  starting character will be followed by \\fsym{mc}, \\fsym{wmc},\n  \\fsym{pmc}, or \\fsym{pwmc} indicating possible problem specific\n  lines starting with \\fsym{cs} in the file. If present, the line will\n  occur prior to problem specific line. The solver may ignore it.\n\\item A line starting with character \\fsym{c p} provides problem\n  specific details for weighted or projected model counting. Lines may\n  occur anywhere in the file. We assume that lines are consistent and\n  provide no contradicting information. We provide more details on its\n  meaning below.\n\\item Lines starting with character \\fsym{c} \\emph{followed by} a\n  second \\emph{character differing} from \\fsym{p} and \\fsym{s} are\n  comments and can occur anywhere in the file. For convenience, we\n  provide comments by lines starting with \\fsym{c c}.\n\\item Variables are consecutively numbered from \\fsym{1} to \\fsym{n}.\n\\item The problem description is given by \n  a unique line of the form\n  \\fsym{p cnf NumVariables NumClauses} that we expect to be the first\n  line (except comments). \n  More precisely, the line starts with character p (no other line may\n  start with p), followed by the problem descriptor \\fsym{cnf},\n  followed by number \\fsym{n} of variables followed by number \\fsym{m}\n  of clauses each symbol is separated by space each time.\n\\item The remaining lines indicate clauses consisting of decimal\n  integers separated by space.  Lines are terminated by character\n  \\fsym{0}.  The Line \\fsym{2 -1 3 0$\\backslash{}$n} indicates the\n  clause ``2 or not 1 or 3'' ($v_2 \\vee \\mneg v_1 \\vee v_3$).  If more\n  lines than announced are present, the solver shall return a parser\n  error and terminate without solving the instance.\n\\item Empty lines or lines consisting of spaces/tabs only may occur\n  and can be ignored.\n\\end{itemize}\n\\paragraph{Weighted Model Counting}\nFor weighted model counting, we introduce optional problem specific\nlines:\n\\begin{verbatim}\nc p weight  1 0.4 0 \nc p weight -1 0.6 0 \nc p ...\n\\end{verbatim}\n\\noindent In more details (note that we print symbols in typewriter font):\n\\begin{itemize}\n\\item %\n  The weight function is given by lines of the form \\fsym{c p weight\n    $\\ell$ $w_\\ell$ 0} defining the weight~$w_\\ell$ for literal~$\\ell$,\n  where $0 \\leq w_\\ell$.\n  The weight will be given as floating point (e.g., \\fsym{0.0003})\n  with at most 9 significant digits after the decimal point, or in\n  32-bit scientific floating point notation (e.g., \\fsym{1.23e+4}), or as fraction (e.g.,\n  \\fsym{3/10}) consisting of two integers separated by the\n  symbol~\\fsym{/}.\n\\item We expect that the submission tests instances and output if it\n  cannot be handled correctly. For example, if an instance specifies a\n  function that has more than 9 significant digits (e.g.,\n  \\fsym{0.00000000009}), larger floating point values, or large\n  fractional values. In such a case, the solver should output a\n  parsing error as specified in the return code section.\n\\item We provide only instances where $0 \\leq w_\\ell \\leq 1$ and\n  $w_{\\mneg \\ell} + w_{\\ell} = 1$ or $w_{\\mneg \\ell} = w_{\\ell} = 1$.\n\\item If a weight~$w_\\ell$ is defined for a literal~$\\ell$ but\n  $\\mneg \\ell$ is not given or $\\mneg x$, we assume\n  $w_{\\mneg \\ell} = 1 -w_\\ell$ (assume that $\\mneg \\mneg a = a$).\nIn other words:\n\\begin{verbatim}\nc p weight  1 0.4 0 \n\\end{verbatim}\nor\n\\begin{verbatim}\nc p weight -1 0.6 0 \n\\end{verbatim}\nare the same as\n\\begin{verbatim}\nc p weight  1 0.4 0 \nc p weight -1 0.6 0 \n\\end{verbatim}\n\\item If the solver can handle weights $w_\\ell > 1$ or\n  $w_{\\ell} + w_{\\mneg \\ell} > 1$ unless $w_{\\ell}=w_{\\mneg \\ell}=1$, the\n  solver must output a warning. Otherwise, the solver must output an\n  error on those instances.\n\\item For compatibility, with \\#SAT we say that if for a variable~$x$,\n  there is neither a weight for $x$ nor\n  $\\mneg x$ given, it is considered 1.\\\\\n  \\emph{Note: this differs from the format used in Cachet.}\n\\end{itemize}\n\\paragraph{Projected Model Counting}\nFor projected model counting, we introduce optional problem specific\nlines:\n\\begin{verbatim}\nc c INDICATES VARIABLES THAT SHOULD BE USED\nc p show varid1 varid2 ... 0 \n....\nc c MORE MIGHT BE GIVEN LATER\nc p show varid7 varid23 ... 0\n\\end{verbatim}\n\\noindent In more details (note that we print symbols in typewriter font):\n\\begin{itemize}\n\\item %\n  Projection variables will be given by lines starting with \\fsym{c p\n    show} followed by the identifier of the variables.\n  Lines describing to add variables to a projection set may occur\n  anywhere in the files and will be terminated by symbol \\fsym{0}.\n\\end{itemize}\n\\noindent\nNote: if all variables are stated using \\fsym{show}, we consider model\ncounting. if no variables are stated the problem is simply to decide\nsatisfiability.\n\\subsection{Output Format}\\label{sec:format:output}\nWe expect that the solver outputs result to \\fsym{stdout} in the\nfollowing format.\n\\begin{verbatim}\nc o This output describes a result of a run from \nc o a [weighted|projected] model counter.\nc o \nc o The following line keeps backwards compatibility \nc o with SAT solvers and avoids underflows if result is 0.\nc o MANDATORY\ns SATISFIABLE|UNSATISFIABLE|UNKNOWN\nc o The following solution line is optional.\nc o It allows a user to double check whether a solver \nc o that provides multiple options was called correct.\nc o\nc o MANDATORY\nc s type [mc|wmc|pmc|pwmc]\nc o The solver has to output an estimate in scientific notation\nc o on the solution size, even if it was an exact solver.\nc o MANDATORY\nc s log10-estimate VALUE\nc o The solver outputs the solution in its highest precision.\nc o MANDATORY\nc s SOLVERTYPE PRECISION NOTATION VALUE\nc o OPTIONAL\nc o InternalValueForOpt=X\nc o Internal=X\n\\end{verbatim}\n\\noindent In more details:\n\\begin{itemize}\n\\item While the solver may use a line staring with \\fsym{c} for\n  comments in the output, we suggest to use lines starting with\n  \\fsym{c o} to indicate a comment.\n\\item The solver has to announce whether the instance is satisfiable\n  or unsatisfiable by a line starting with \\fsym{s} followed by\n  \\fsym{SATISFIABLE} or \\fsym{UNSATISFIABLE}. The solver may output\n  \\fsym{UNKNOWN}, but is not allowed to output any other value than\n  these three if a line starting with \\fsym{s} is present.\n\\item The solver has to announce an estimate on the solution by a line\n  starting with \\fsym{c s log10-estimate VALUE} where \\fsym{VALUE} is\n  a string representing the result (model count/weighted model\n  count/projected model count) in $\\log_{10}$-Notation (see\n  Section~\\ref{sec:prelimns:precs}) of double %\n  precision,~i.e., 15 significant digits.\n\\item The output is has to be announced by a line starting with\n  \\fsym{c s} followed by strings indicating the solver type, the\n  precision, the notation, and the result. The solver developer may\n  use for \\fsym{SOLVERTYPE} the following strings: \\fsym{approx} and\n  \\fsym{exact}.\n  In place of \\fsym{PRECISION}, the solver developer has to specify\n  which the internal precision the solver used, allowed values are\n  \\fsym{arb}, \\fsym{single}, \\fsym{double}, \\fsym{quadruple}, or other\n  values according to IEEE754 Standard.\n  For \\fsym{NOTATION}, the developer may chose \\fsym{log10},\n  \\fsym{float}, \\fsym{prec-sci}, or \\fsym{int}.\n  Then, in place of \\fsym{VALUE}, the solver has to output its\n  computed result.\n  \\emph{Note: If the solver developer announces as output a higher\n    precision than the actual solver theoretically allows, we reserve\n    the right to disqualify all submissions by the team.}\n\\item The solver may output a result in \\emph{$\\log_{10}$ notation} which\n  is similar to the format used in the probabilistic inference\n  competitions UAI~\\cite{GogateEtAl16a}.\n  For computing the relative accuracy of the solution of a solver, we\n  refer to Section~\\ref{sec:measure}.\n\\item If the solver consists of a run script, which calls a\n  pre-processor, consists of multiple phases, or consists of a solving\n  portfolio, we expect the developer to output by a comment line which\n  tool was started, what parameters it used, and when the tool\n  ended. Preferably as follows:\\\\\n  \\fsym{c o CALLS(1) ./preproc -parameters}\\\\\n  \\fsym{c o stat CALL1 STARTED RFC3339-TIMESTAMP}\\\\\n  $\\ldots$\\\\\n  \\fsym{c o stat CALL1 FINISHED RFC3339-TIMESTAMP}\\\\\n  \\fsym{c o CALLS(2) ./postproc -parameters}\\\\\n  $\\ldots$\n\\item We suggest that the solver outputs internal statistics by lines\n  starting with \\fsym{c o DESCRIPTION=VALUE} or \\fsym{c DESCRIPTION :\n    VALUE}.\n\\end{itemize}\n\\paragraph{Projected Weighted Model Counting}\nThe format for projected weighted model counting instances combines\nthe format of the weighted model counting instances and projected\nmodel counting instances. The model counting header indicates\n``\\texttt{c t pwmc}''. The output is expected to contain a line\n``\\texttt{c s type pwmc}''.\n\\subsection{Examples}\nThe following sections provide a few brief examples for each track\nwith expected input and output.\n\\paragraph{Model Counting}\n\\begin{example}\n  \\noindent \n  The following text describes the CNF formula (set of clauses)\n  \\[\\{\\{\\mneg x_1, \\mneg x_2\\}, \\{x_2, x_3, \\mneg x_4\\}, \\{x_4, x_5\\},\n    \\{x_4, x_6\\}\\}.\\]\n\\begin{verbatim}\nc c This file describes a DIMACS-line CNF in MC 2021 format \nc c The instance has 6 variables and 4 clauses.\np cnf 6 4\nc t mc\n-1 -2    0\n 2  3 -4 0\nc c This line is a comment and can be ignored.\n4 5 0\nc The line contains a comment and can be ignored as well.\n4 6 0\n\\end{verbatim}\n\\noindent A solution is given as follows, but can also be modified according \nto the technique of the solver:\n\\begin{verbatim}\nc o This file describes a solution to a model counting instance.\ns SATISFIABLE\nc s type mc\nc o The solver log10-estimates a solution of 22.\nc s log10-estimate 1.342422680822206\nc o Arbitrary precision result is 22.\nc s exact arb int 22\n\\end{verbatim}\n\\end{example}\n\\paragraph{Weighted Model Counting}\n\\begin{example}\n  \\noindent \n  The following text describes the CNF formula (set of clauses)\n  \\[\\{\\mneg x_1, \\mneg x_2\\}, \\{x_2, x_3, \\mneg x_4\\}, \\{x_4, x_5\\},\n    \\{x_4, x_6\\}\\}\\] with weight\n  function~$\\{x_1 \\mapsto 0.4, \\mneg x_1 \\mapsto 0.6, x_2 \\mapsto 0.5,\n  \\mneg x_2 \\mapsto 0.5, x_3 \\mapsto 0.4, \\mneg x_3 \\mapsto 0.6, x_4\n  \\mapsto 0.3, \\mneg x_4 \\mapsto 0.7, x_5 \\mapsto 0.5, \\mneg x_5 \\mapsto\n  0.5, x_6 \\mapsto 0.7, \\mneg x_6 \\mapsto 0.3\\}$.\n  \\newline\n\\begin{verbatim}\nc c This file describes a weighted CNF in MC 2021 format \nc c with 6 variables and 4 clauses \np cnf 6 4\nc t wmc\nc c Weights are given as follows, spaces may be added \nc c to improve readability.\nc p weight  1 0.4 0\nc p weight  2 0.5 0\nc p weight  3 0.4 0\nc p weight  4 0.3 0\nc p weight  5 0.5 0\nc p weight  6 0.7 0\n-1 -2 0\n 2  3 -4 0\nc this is a comment and will be ignored\n 4  5 0\n 4  6 0\nc same\n\\end{verbatim}\n\\noindent The solution should be given in the following format (modified according to the technique of the solver):\n\\begin{verbatim}\nc o This file describes a solution to a weighted \nc o model counting instance.\ns SATISFIABILE\nc s type wmc\nc o This file describes that the weighted model count is 0.345\nc o \nc s log10-estimate -0.460924\nc s exact double float 0.346\n\\end{verbatim}\n\\end{example}  \n\\begin{example}[Optional]\n  \\noindent \n  The following text describes the CNF formula (set of clauses)\n  \\[\\{\\mneg x_1, x_2\\}, \\{x_3, \\mneg x_2\\}, \\{x_2, x_1\\},\n    \\{x_3, x_2\\}\\}\\] with weight\n  function~$\\{x_1 \\mapsto 0.1, \\mneg x_1 \\mapsto 0.1, x_2 \\mapsto 0.1,\n  \\mneg x_2 \\mapsto 0.9,\\allowbreak x_3 \\mapsto 0.0235,\\allowbreak \\mneg x_3 \\mapsto 0.0125\\}$\n  including a problem description line and two comments.\n  \\newline\n\\begin{verbatim}\nc c This file describes a weighted CNF in MC 2021 format \nc c with 3 variables and 4 clauses \np cnf 3 4\nc t wmc\n-1  2 0\n 3 -2 0\n 2  1 0\n 3  2 0\nc p weight  1 0.1\nc p weight -1 0.1\nc p weight  2 0.1\nc p weight  3 0.0235\nc p weight -3 0.0125\n\\end{verbatim}\n\\noindent The solution should be given in the following format:  \n\\begin{verbatim}\nc o WARNING\nc o  L9:Sum of positive and negative literal is not equal to 1.\nc o WARNING\nc o  L12:Sum of positive and negative literal is not equal 1.\nc o This file describes a solution to a weighted \nc o model counting instance.\ns SATISFIABILE\nc s type wmc\nc o This file describes that the weighted model count is\nc o 0.0004700000000000000532907051822\nc s type wmc \nc s log10-estimate -3.327902142064282\nc s exact arb log10 -3.3279021420642824863435269891\n\\end{verbatim}\n\\end{example}\n\\paragraph{Projected Model Counting}\n\\begin{example}\n  \\noindent \n  The following text describes the CNF formula (set of clauses)\n  \\[\\{\\mneg x_1, \\mneg x_2\\}, \\{x_2, x_3, \\mneg x_4\\}, \\{x_4, x_5\\},\n    \\{x_4, x_6\\}\\}\\] with projection set~~$\\{x_1, x_2\\}$ including a\n  problem description line and two comments.\n  \\newline\n\\begin{verbatim}\nc c This file describes a projected CNF in MC 2021 format\nc c with 6 variables and 4 clauses and 2 projected variables \np cnf 6 4 2\nc t pmc\nc p show 1 2\n-1 -2 0\n 2  3 -4 0\ncc this is a comment and will be ignored\n 4  5 0\n 4  6 0\n\\end{verbatim}\n\\noindent A solution can be given in the following format:\n\\begin{verbatim}\nc o This file describes that the projected model count is 3\ns SATISFIABILE\nc s log10-estimate 0.47712125471966\nc s type pmc\nc s exact arb int 3\n\\end{verbatim}\n\\end{example}\n\\subsection{Format Checking and Instance Generation}\\label{sec:appendix:generator}\n\\paragraph{Checking and Converting}\nWe refer to the github repository at\n\\url{https://github.com/daajoe/mc_format_tools}.\nThe repository contains scripts for simple format checking\n(\\texttt{check\\_mc2021\\_format.py}), merging broken lines, correcting\ntypelines, construct valid instances from outputs of preprocessors,\nconverting instances from the 2020 format as well as the format used\nby Daniel Fremont.\n\\paragraph{Instance Generator}\nTo obtain additional instances, we constructed projected model\ncounting instances by randomly choosing projection variables from\nselected instances from Track 1 (MC). For Track 2 (WMC), we followed\ntwo approaches. We selected instances based on sampling from weighted\nmodel counting instances and model counting instances. For the model\ncounting instances, we first tried to construct a counting graph using\nthe \\solver{D4} solver, which we then attributed randomly by weights\naiming for sufficiently large but not too small weighted counts. If we\ncould not compute a counting graph, we generated weights entirely\nrandom.",
        "Platform Specifications": "\\label{sec:appendix:platform}\n\\begin{enumerate}\n\\item \\system{StarExec} is a HPC system for computational\n  competitions~\\cite{StumpSutcliffeTinelli14}, see\n  \\href{https://www.starexec.org/starexec/public/machine-specs.txt}{\\nolinkurl{starexec.org/starexec/public/machine-specs.txt}}.\n  Our evaluation uses the 192 ``original'' nodes with the following specifications: \\\\\n  \\fsym{CPU:~~~~~~~~~~1x~Intel(R) Xeon(R) CPU E5-2609 0 @2.40GHz} \\\\\n  \\fsym{\\mbox{~}~~~~~~~~~~~~~(4 cores, 4 memory channels)}\\\\\n  \\fsym{Cache Size:~~~10240  KB}\\\\\n  \\fsym{Main Memory:~~256~GB}\\\\ \n  \\fsym{OS:~~~~~~~~~~~CentOS Linux release 7.7.1908 (Core)}\\\\ \n  \\fsym{Kernel:~~~~~~~3.10.0-1062.4.3.el7.x86\\_64}\\\\\n  \\fsym{glibc:~~~~~~~~glibc-2.17-292.el7.x86\\_64, glibc-2.17-292.el7.i686}\\\\\n  \\fsym{gcc:~~~~~~~~~~gcc-4.8.5-39.el7.x86\\_64}\n\\item \\system{Taurus} is part of a TOP500 HPC system for scientific\n  purposes~\\cite{taurus}, see\n  \\href{https://doc.zih.tu-dresden.de/}{\\nolinkurl{doc.zih.tu-dresden.de}}.\n  We employed the Haswell nodes with the following specifications:\\\\\n  \\fsym{CPU:~~~~~~~~~~~2x~Intel Xeon E5-2680 v3 @2.50GHz}\\\\\n  \\fsym{\\mbox{~}~~~~~~~~~~~~~~(12 cores, 4 memory channels)}\\\\\n  \\fsym{Cache Size:~~~~30720 KB}\\\\\n  \\fsym{Main Memory:~~~64~GB}\\\\\n  \\fsym{OS:~~~~~~~~~~~~Red Hat Enterprise Linux Server 7.9 (Maipo)}\\\\\n  \\fsym{glibc:~~~~~~~~~glibc-2.17-317.el7.x86\\_64, glibc-2.17-317.el7.i686}\\\\\n  \\fsym{gcc:~~~~~~~~~~~gcc-4.8.5-44.el7.x86\\_64}\n\\item \\system{Cobra} is a small institute cluster for computational\n  experiments consisting of 12 nodes in the following specification:\\\\\n  \\fsym{CPU:~~~~~~~~~~~2x~Intel(R) Xeon(R) CPU E5-2650 v4 @2.20GHz}\\\\\n  \\fsym{\\mbox{~}~~~~~~~~~~~~~~(12 cores, 4 memory channels)}\\\\\n  \\fsym{Cache Size:~~~~30720 KB}\\\\\n  \\fsym{Main Memory:~~~256~GB}\\\\\n  \\fsym{OS:~~~~~~~~~~~~Ubuntu 16.04.1 LTS }\\\\\n  \\fsym{Kernel:~~~~~~~~Linux 4.4.0-184-generic}\\\\\n  \\fsym{glibc:~~~~~~~~~Ubuntu GLIBC 2.23-0ubuntu11.2 2.23}\\\\\n  \\fsym{gcc:~~~~~~~~~~~Ubuntu 5.4.0-6ubuntu1~16.04.12 5.4.0 20160609}\n\\item \\system{Desktop} is a compact desktop system:\\\\\n  \\fsym{CPU:~~~~~~~~~~~1x Intel(R) Core(TM) i7-10710U CPU @1.10GHz}\\\\\n \\fsym{\\mbox{~}~~~~~~~~~~~~~~(6 cores, 2 memory channels)}\\\\\n  \\fsym{Cache size:~~~~12288 KB}\\\\\n  \\fsym{Main Memory:~~~64GB}\\\\\n  \\fsym{OS:~~~~~~~~~~~~Ubuntu 20.04.6 LTS}\\\\\n  \\fsym{Kernel:~~~~~~~~5.4.0-148-generic}\\\\\n  \\fsym{glibc:~~~~~~~~~GLIBC 2.31-0ubuntu9.9}\\\\\n  \\fsym{gcc:~~~~~~~~~~~Ubuntu 9.4.0-1ubuntu1~20.04.1 9.4.0}\n\\end{enumerate}",
        "Submissions and Authors": "\\label{appendix:submissions}\n\n\n\n\\clearpage\n"
    },
    "citations": "\\begin{thebibliography}{100}\n\\bibitem{AbseherMusliuWoltran17a}\n{\\sc Abseher, M., Musliu, N., and Woltran, S.}\n\\newblock htd -- a free, open-source framework for (customized) tree\n  decompositions and beyond.\n\\newblock In {\\em Proceedings of the 14th International Conference on\n  Integration of Artificial Intelligence and Operations Research Techniques in\n  Constraint Programming (CPAIOR'17)\\/} (Padova, Italy, June 2017),\n  D.~Salvagnin and M.~Lombardi, Eds., vol.~10335 of {\\em Lecture Notes in\n  Computer Science}, Springer Verlag, pp.~376--386.\n\\bibitem{AnsoteguiGiraldez-CruLevy12}\n{\\sc Ans{\\'o}tegui, C., Gir{\\'a}ldez-Cru, J., and Levy, J.}\n\\newblock The community structure of sat formulas.\n\\newblock In {\\em Proceedings of the 15th International Conference on Theory\n  and Applications of Satisfiability Testing ({SAT}'12)\\/} (Trento, Italy,\n  2012), A.~Cimatti and R.~Sebastiani, Eds., Springer Verlag, pp.~410--423.\n\\bibitem{XCSPComp22}\n{\\sc Audemard, G., Lecoutre, C., and Lonca, E.}, Eds.\n\\newblock {\\em {XCSP} Competition 2022 Proceedings\\/} (2022).\n\\newblock\n  \\url{https://www.cril.univ-artois.fr/~lecoutre/compets/proceedingsXCSP22.pdf}.\n\\bibitem{AudemardPauleveSimon20a}\n{\\sc Audemard, G., Paulev{\\'e}, L., and Simon, L.}\n\\newblock {SAT} heritage: A community-driven effort for archiving, building and\n  running more than thousand sat solvers.\n\\newblock In {\\em Proceedings of the 23rd International Conference on Theory\n  and Applications of Satisfiability Testing (SAT'20)\\/} (Alghero, Italy, July\n  2020), L.~Pulina and M.~Seidl, Eds., vol.~12178 of {\\em Lecture Notes in\n  Computer Science}, Springer Verlag, pp.~107--113.\n\\bibitem{ieee754}\n{\\sc Authors, I.}\n\\newblock {IEEE} standard for floating-point arithmetic.\n\\newblock {\\em IEEE Std 754-2008\\/} (Aug 2008), 1--70.\n\\bibitem{BacchusDalmaoPitassi03}\n{\\sc Bacchus, F., Dalmao, S., and Pitassi, T.}\n\\newblock Algorithms and complexity results for {{\\#}SAT} and {Bayesian}\n  inference.\n\\newblock In {\\em Proceedings of the 44th IEEE Symposium on Foundations of\n  Computer Science (FOCS'03)\\/} (Cambridge, MA, USA, Oct. 2003), C.~S. Chekuri\n  and D.~Micciancio, Eds., IEEE Computer Soc., pp.~340--351.\n\\bibitem{BalutaChuaMeel21}\n{\\sc Baluta, T., Chua, Z.~L., Meel, K.~S., and Saxena, P.}\n\\newblock Scalable quantitative verification for deep neural networks.\n\\newblock In {\\em Proceedings of the 43rd {IEEE/ACM} International Conference\n  on Software Engineering (ICSE'21)\\/} (Madrid, 2021), IEEE Computer Soc.,\n  pp.~312--323.\n\\bibitem{sat_competition20}\n{\\sc Balyo, T., Froleyks, N., Heule, M.~J., Iser, M., J{\\\"a}rvisalo, M., and\n  Suda, M.}, Eds.\n\\newblock {\\em Proceedings of SAT Competition 2020: Solver and Benchmark\n  Descriptions\\/} (2020), University of Helsinki, Department of Computer\n  Science.\n\\bibitem{sat_competition22}\n{\\sc Balyo, T., Heule, M.~J., Iser, M., J{\\\"a}rvisalo, M., and Suda, M.}, Eds.\n\\newblock {\\em Proceedings of {SAT} Competition 2022: Solver and Benchmark\n  Descriptions\\/} (2022), Department of Computer Science, University of\n  Helsinki.\n\\bibitem{BerreRoussel09a}\n{\\sc Berre, D.~L., and Roussel, O.}\n\\newblock Sat competition 2009: Benchmark submission guidelines.\n\\newblock \\url{http://www.satcompetition.org/2009/format-benchmarks2009.html},\n  2009.\n\\bibitem{BeyerLoweWendler15}\n{\\sc Beyer, D., L{\\\"o}we, S., and Wendler, P.}\n\\newblock Benchmarking and resource measurement.\n\\newblock In {\\em Proceedings of the 22nd International Symposium on Model\n  Checking of Software (SPIN'15)\\/} (2015), B.~Fischer and J.~Geldenhuys, Eds.,\n  vol.~9232 of {\\em Lecture Notes in Computer Science}, Springer Verlag,\n  pp.~160--178.\n\\bibitem{BeyerLoweWendler19}\n{\\sc Beyer, D., L{\\\"o}we, S., and Wendler, P.}\n\\newblock Reliable benchmarking: requirements and solutions.\n\\newblock {\\em International Journal on Software Tools for Technology Transfer\n  21}, 1 (2019), 1--29.\n\\bibitem{BeyersdorffHoffmannSpachmann23a}\n{\\sc Beyersdorff, O., Hoffmann, T., and Spachmann, L.~N.}\n\\newblock {Proof Complexity of Propositional Model Counting}.\n\\newblock In {\\em Proceedings of the 26th International Conference on Theory\n  and Applications of Satisfiability Testing (SAT'23)\\/} (Dagstuhl, Germany,\n  2023), M.~Mahajan and F.~Slivovsky, Eds., vol.~271 of {\\em Leibniz\n  International Proceedings in Informatics (LIPIcs)}, Dagstuhl Publishing,\n  pp.~2:1--2:18.\n\\bibitem{BiereHeuleMaarenWalsh09}\n{\\sc Biere, A., Heule, M., van Maaren, H., and Walsh, T.}, Eds.\n\\newblock {\\em Handbook of Satisfiability}, vol.~185 of {\\em Frontiers in\n  Artificial Intelligence and Applications}.\n\\newblock IOS Press, Amsterdam, Netherlands, Feb. 2009.\n\\bibitem{BiereEtAl21}\n{\\sc Biere, A., Heule, M., van Maaren, H., and Walsh, T.}, Eds.\n\\newblock {\\em Handbook of Satisfiability (2nd Edition)}.\n\\newblock Frontiers in Artificial Intelligence and Applications. IOS Press,\n  Amsterdam, Netherlands, Feb. 2021.\n\\bibitem{BobotBrombergerHoenicke23a}\n{\\sc Bobot, F., Bromberger, M., and Hoenicke, J.}\n\\newblock The 18th international satisfiability modulo theories competition\n  (smt-comp 2023).\n\\newblock \\url{https://smt-comp.github.io/2019/}, 2023.\n\\newblock A joint event with the 29th 29th International Conference on\n  Automated Deduction (CADE'29).\n\\bibitem{Bomanson17a}\n{\\sc Bomanson, J.}\n\\newblock lp2normal --- a normalization tool for extended logic programs.\n\\newblock In {\\em Proceedings of the 14th International Conference Logic\n  Programming and Nonmonotonic Reasoning ({LPNMR}'17)\\/} (Espoo, Finland,\n  2017), M.~Balduccini and T.~Janhunen, Eds., Springer Verlag, pp.~222--228.\n\\bibitem{BryantNawrockiAvigad23a}\n{\\sc Bryant, R.~E., Nawrocki, W., Avigad, J., and Heule, M. J.~H.}\n\\newblock {Certified Knowledge Compilation with Application to Verified Model\n  Counting}.\n\\newblock In {\\em Proceedings of the 26th International Conference on Theory\n  and Applications of Satisfiability Testing ({SAT}'23)\\/} (Dagstuhl, Germany,\n  2023), M.~Mahajan and F.~Slivovsky, Eds., vol.~271 of {\\em Leibniz\n  International Proceedings in Informatics (LIPIcs)}, Dagstuhl Publishing,\n  pp.~6:1--6:20.\n\\bibitem{BurchardSchubertBecker15a}\n{\\sc Burchard, J., Schubert, T., and Becker, B.}\n\\newblock Laissez-faire caching for parallel {\\#}{SAT} solving.\n\\newblock In {\\em Proceedings of the 18th International Conference on Theory\n  and Applications of Satisfiability Testing (SAT'15)\\/} (Austin, TX, {USA},\n  2015), M.~Heule and S.~Weaver, Eds., vol.~9340 of {\\em Lecture Notes in\n  Computer Science}, Springer Verlag, pp.~46--61.\n\\bibitem{BurchardSchubertBecker16a}\n{\\sc Burchard, J., Schubert, T., and Becker, B.}\n\\newblock Distributed parallel {\\#{sat}} solving.\n\\newblock In {\\em Proceedings of the 2016 IEEE International Conference on\n  Cluster Computing (CLUSTER'16)\\/} (2016), B.~R. de~Supinski, Ed.,\n  pp.~326--335.\n\\bibitem{Capelli19}\n{\\sc Capelli, F.}\n\\newblock Knowledge compilation languages as proof systems.\n\\newblock In {\\em Proceedings of the 22nd International Conference on Theory\n  and Applications of Satisfiability Testing ({SAT}'19)\\/} (Lisbon, Portugal,\n  July 2019), M.~Janota and I.~Lynce, Eds., vol.~11628 of {\\em Lecture Notes in\n  Computer Science}, Springer Verlag, pp.~90--99.\n\\bibitem{CapelliLagniezMarquis21a}\n{\\sc Capelli, F., Lagniez, J.-M., and Marquis, P.}\n\\newblock Certifying top-down decision-dnnf compilers.\n\\newblock In {\\em Proceedings of the 35th AAAI Conference on Artificial\n  Intelligence ({AAAI}'21)\\/} (May 2021), K.~Leyton-Brown, Mausam, Y.~Liu, and\n  G.~Roger, Eds., The AAAI Press, pp.~6244--6253.\n\\bibitem{CERN13a}\n{\\sc {CERN}}.\n\\newblock Zenodo.\n\\newblock \\url{https://zenodo.org/}, 2013.\n\\bibitem{ChakrabortyEtAl14a}\n{\\sc Chakraborty, S., Fremont, D.~J., Meel, K.~S., Seshia, S.~A., and Vardi,\n  M.~Y.}\n\\newblock Distribution-aware sampling and weighted model counting for {SAT}.\n\\newblock In {\\em Proceedings of the 28th AAAI Conference on Artificial\n  Intelligence (AAAI'14)\\/} (Qu{\\'e}bec City, QC, Canada, 2014), C.~E. Brodley\n  and P.~Stone, Eds., The AAAI Press, pp.~1722--1730.\n\\bibitem{ChakrabortyMeelVardi16a}\n{\\sc Chakraborty, S., Meel, K.~S., and Vardi, M.~Y.}\n\\newblock Improving approximate counting for probabilistic inference: From\n  linear to logarithmic {SAT} solver calls.\n\\newblock In {\\em Proceedings of 25th International Joint Conference on\n  Artificial Intelligence (IJCAI'16)\\/} (New York City, NY, USA, July 2016),\n  S.~Kambhampati, Ed., The AAAI Press, pp.~3569--3576.\n\\bibitem{ChaviraDarwiche08}\n{\\sc Chavira, M., and Darwiche, A.}\n\\newblock On probabilistic inference by weighted model counting.\n\\newblock {\\em Artificial Intelligence 172}, 6--7 (Apr. 2008), 772--799.\n\\bibitem{CollinTanothers22a}\n{\\sc Collin, L., Tan, J., et~al.}\n\\newblock {XZ} data compression in {Linux}.\n\\newblock \\url{https://docs.kernel.org/staging/xz.html}, 2022.\n\\bibitem{Cook71}\n{\\sc Cook, S.~A.}\n\\newblock The complexity of theorem-proving procedures.\n\\newblock In {\\em Proceedings of the 3rd Annual Symposium on Theory of\n  Computing (ACM STOC'71)\\/} (Shaker Heights, OH, {USA}, 1971), M.~A. Harrison,\n  R.~B. Banerji, and J.~D. Ullman, Eds., Assoc. Comput. Mach., New York,\n  pp.~151--158.\n\\bibitem{DahllofJonssonWahlstrom05a}\n{\\sc Dahll{\\\"o}f, V., Jonsson, P., and Wahlstr{\\\"o}m, M.}\n\\newblock Counting models for 2sat and 3sat formulae.\n\\newblock {\\em Theoretical Computer Science 332}, 1 (2005), 265--291.\n\\bibitem{Darwiche01a}\n{\\sc Darwiche, A.}\n\\newblock Decomposable negation normal form.\n\\newblock {\\em J. of the ACM 48}, 4 (July 2001), 608--647.\n\\bibitem{Darwiche04a}\n{\\sc Darwiche, A.}\n\\newblock New advances in compiling {CNF} to decomposable negation normal form.\n\\newblock In {\\em Proceedings of the 16th European Conference on Artificial\n  Intelligence (ECAI'04)\\/} (Valencia, Spain, 2004), R.~L{\\'o}pez\n  De~M{\\'a}ntaras and L.~Saitta, Eds., IOS Press, pp.~318--322.\n\\bibitem{Darwiche11a}\n{\\sc Darwiche, A.}\n\\newblock {SDD:} {A} new canonical representation of propositional knowledge\n  bases.\n\\newblock In {\\em Proceedings of the 22nd International Joint Conference on\n  Artificial Intelligence ({IJCAI}'11)\\/} (Barcelona, Catalonia, Spain, July\n  2011), T.~Walsh, Ed., AAAI Press/IJCAI, pp.~819--826.\n\\bibitem{darwiche2002knowledge}\n{\\sc Darwiche, A., and Marquis, P.}\n\\newblock A knowledge compilation map.\n\\newblock {\\em Journal of Artificial Intelligence Research 17\\/} (2002),\n  229--264.\n\\bibitem{DechterEtAl22a}\n{\\sc Dechter, R., Ihler, A., Gogate, V., Lee, J., Pezeshki, B., Raichev, A.,\n  and Cohen, N.}\n\\newblock Uai 2022 competition.\n\\newblock \\url{https://uaicompetition.github.io/uci-2022/}, 2022.\n\\bibitem{Di-CosmoZacchiroli17a}\n{\\sc Di~Cosmo, R., and Zacchiroli, S.}\n\\newblock {Software Heritage: Why and How to Preserve Software Source Code}.\n\\newblock In {\\em Proceedings of the 14th International Conference on Digital\n  Preservation ({iPRES'17})\\/} (Kyoto, Japan, Sept. 2017), pp.~1--10.\n\\bibitem{DodaroRedlSchuller19a}\n{\\sc Dodaro, C., Redl, C., and Sch{\\\"u}ller, P.}\n\\newblock {ASP} challenge 2019.\n\\newblock \\url{https://sites.google.com/view/aspcomp2019/}, July 2019.\n\\newblock A joint event with the 15th International Conference on Logic\n  Programming and Non-monotonic Reasoning (LPNMR'19).\n\\bibitem{DudekPhanVardi20a}\n{\\sc Dudek, J.~M., Phan, V. H.~N., and Vardi, M.~Y.}\n\\newblock {ADDMC}: Weighted model counting with algebraic decision diagrams.\n\\newblock In {\\em Proceedings of the 24th AAAI Conference on Artificial\n  Intelligence {AAAI'20}\\/} (2020), V.~Conitzer and F.~Sha, Eds.,\n  pp.~1468--1476.\n\\bibitem{DudekPhanVardi20b}\n{\\sc Dudek, J.~M., Phan, V. H.~N., and Vardi, M.~Y.}\n\\newblock Dpmc: Weighted model counting by dynamic programming on project-join\n  trees.\n\\newblock In {\\em Proceedings of the 26th International Conference on\n  Principles and Practice of Constraint Programming (CP'20)\\/}\n  (Louvain-la-Neuve, Belgium, Sept. 2020), H.~Simonis, Ed., Springer Verlag,\n  pp.~211--230.\n\\bibitem{DudekPhanVardi21a}\n{\\sc Dudek, J.~M., Phan, V. H.~N., and Vardi, M.~Y.}\n\\newblock Procount: Weighted projected model counting with graded project-join\n  trees.\n\\newblock In {\\em Proceedings of the 24th International Conference on Theory\n  and Applications of Satisfiability Testing ({SAT}'21)\\/} (Barcelona, Spain,\n  2021), C.-M. Li and F.~Many{\\`a}, Eds., Springer Verlag, pp.~152--170.\n\\bibitem{DudekVardi20}\n{\\sc Dudek, J.~M., and Vardi, M.~Y.}\n\\newblock Parallel weighted model counting with tensor networks, 2020.\n\\bibitem{MeelEtAl17a}\n{\\sc Due{\\~{n}}as{-}Osorio, L., Meel, K.~S., Paredes, R., and Vardi, M.~Y.}\n\\newblock Counting-based reliability estimation for power-transmission grids.\n\\newblock In {\\em Proceedings of the Thirty-First {AAAI} Conference on\n  Artificial Intelligence (AAAI'17)\\/} (San Francisco, CA, {USA}, Feb. 2017),\n  S.~P. Singh and S.~Markovitch, Eds., The AAAI Press, pp.~4488--4494.\n\\bibitem{Duenas-OsorioMeelParedes17}\n{\\sc Due{\\~{n}}as{-}Osorio, L., Meel, K.~S., Paredes, R., and Vardi, M.~Y.}\n\\newblock Counting-based reliability estimation for power-transmission grids.\n\\newblock In {\\em Proceedings of the 31st {AAAI} Conference on Artificial\n  Intelligence ({AAAI'17})\\/} (San Francisco, California, {USA}, 2017), S.~P.\n  Singh and S.~Markovitch, Eds., The AAAI Press, pp.~4488--4494.\n\\bibitem{Dung95a}\n{\\sc Dung, P.~M.}\n\\newblock On the acceptability of arguments and its fundamental role in\n  nonmonotonic reasoning, logic programming and n-person games.\n\\newblock {\\em Artificial Intelligence 77}, 2 (1995), 321--357.\n\\bibitem{DurandHermannKolaitis05}\n{\\sc Durand, A., Hermann, M., and Kolaitis, P.~G.}\n\\newblock Subtractive reductions and complete problems for counting complexity\n  classes.\n\\newblock {\\em Theoretical Computer Science 340}, 3 (2005), 496--513.\n\\bibitem{EenMishchenkoSorensson07}\n{\\sc E{\\'{e}}n, N., Mishchenko, A., and S{\\\"{o}}rensson, N.}\n\\newblock Applying logic synthesis for speeding up {SAT}.\n\\newblock In {\\em 10th International Conference on Theory and Applications of\n  Satisfiability Testing ({SAT} 2007)\\/} (2007), J.~Marques{-}Silva and K.~A.\n  Sakallah, Eds., vol.~4501 of {\\em Lecture Notes in Computer Science},\n  Springer, pp.~272--286.\n\\bibitem{EiterHecherKiesel21}\n{\\sc Eiter, T., Hecher, M., and Kiesel, R.}\n\\newblock {Treewidth-Aware Cycle Breaking for Algebraic Answer Set Counting}.\n\\newblock In {\\em 18th International Conference on Principles of Knowledge\n  Representation and Reasoning ({KR} 2021)\\/} (2021), M.~Bienvenu,\n  G.~Lakemeyer, and E.~Erdem, Eds., pp.~269--279.\n\\bibitem{ErmonGomesSabharwal11a}\n{\\sc Ermon, S., Gomes, C.~P., Sabharwal, A., and Selman, B.}\n\\newblock Accelerated adaptive markov chain for partition function computation.\n\\newblock In {\\em Proceedings of the 24th Conference on Advances in Neural\n  Information Processing Systems (NIPS'11)\\/} (2011), J.~Shawe-Taylor,\n  R.~Zemel, P.~Bartlett, F.~Pereira, and K.~Weinberger, Eds., vol.~24, Curran\n  Associates, Inc.\n\\bibitem{ErmonGomesSelman12a}\n{\\sc Ermon, S., Gomes, C.~P., and Selman, B.}\n\\newblock Uniform solution sampling using a constraint solver as an oracle.\n\\newblock In {\\em Proceedings of the 28th Conference on Uncertainty in\n  Artificial Intelligence (UAI'12)\\/} (Catalina Island, CA, USA, Aug. 2012),\n  N.~de~Freitas and K.~Murphy, Eds., AUAI Press, pp.~255--264.\n\\bibitem{FanWu23a}\n{\\sc Fan, L., and Wu, C.}\n\\newblock Abc: System for sequential logic synthesis and formal verification.\n\\newblock \\url{ABC: System for Sequential Logic Synthesis and Formal\n  Verification}, 2023.\n\\bibitem{FanWu23b}\n{\\sc Fan, L., and Wu, C.}\n\\newblock Fpga technology mapping with adaptive gate decomposition.\n\\newblock In {\\em Proceedings of the 2023 ACM/SIGDA International Symposium on\n  Field Programmable Gate Arrays ({FPGA}'23)\\/} (Monterey, CA, USA, 2023),\n  Assoc. Comput. Mach., New York, pp.~135--140.\n\\bibitem{FichtePriesner23a}\n{\\sc Fichte, J., and Priesner, C.}\n\\newblock {MC} format tools.\n\\newblock \\url{https://github.com/daajoe/mc_format_tools}, 2023.\n\\bibitem{FichteBerreHecher23}\n{\\sc Fichte, J.~K., Berre, D.~L., Hecher, M., and Szeider, S.}\n\\newblock The silent (r)evolution of sat.\n\\newblock {\\em Commun. ACM 66}, 6 (May 2023), 64--72.\n\\bibitem{FichteGagglHecher22a}\n{\\sc Fichte, J.~K., Gaggl, S.~A., Hecher, M., and Rusovac, D.}\n\\newblock {IASCAR}: Incremental answer set counting by anytime refinement.\n\\newblock In {\\em Proceedings of the 16th International Conference Logic\n  Programming and Nonmonotonic Reasoning ({LPNMR}'22)\\/} (Genova, Italy, 2022),\n  G.~Gottlob, D.~Inclezan, and M.~Maratea, Eds., Springer Verlag, pp.~217--230.\n\\bibitem{FichteGagglRusovac22}\n{\\sc Fichte, J.~K., Gaggl, S.~A., and Rusovac, D.}\n\\newblock Rushing and strolling among answer sets -- navigation made easy.\n\\newblock In {\\em {AAAI}'2022\\/} (2022).\n\\bibitem{FichteHecher20a}\n{\\sc Fichte, J.~K., Hecher, M., and Hamiti, F.}\n\\newblock Model counting competition 2020: Competition instances.\n\\newblock Zenodo, Nov. 2020.\n\\bibitem{FichteHecherHamiti21a}\n{\\sc Fichte, J.~K., Hecher, M., and Hamiti, F.}\n\\newblock The model counting competition 2020.\n\\newblock {\\em ACM Journal of Experimental Algorithmics 26\\/} (Oct. 2021).\n\\bibitem{FichteHecherMorak23}\n{\\sc Fichte, J.~K., Hecher, M., Morak, M., Thier, P., and Woltran, S.}\n\\newblock Solving projected model counting by utilizing treewidth and its\n  limits.\n\\newblock {\\em Artificial Intelligence 314\\/} (2023), 103810.\n\\bibitem{FichteHecherRoland21}\n{\\sc Fichte, J.~K., Hecher, M., and Roland, V.}\n\\newblock {Parallel Model Counting with CUDA: Algorithm Engineering for\n  Efficient Hardware Utilization}.\n\\newblock In {\\em 27th International Conference on Principles and Practice of\n  Constraint Programming (CP'21)\\/} (2021), L.~D. Michel, Ed., vol.~210 of {\\em\n  Leibniz International Proceedings in Informatics (LIPIcs)}, Dagstuhl\n  Publishing, pp.~24:1--24:20.\n\\bibitem{FichteHecherRoland22a}\n{\\sc Fichte, J.~K., Hecher, M., and Roland, V.}\n\\newblock {Proofs for Propositional Model Counting}.\n\\newblock In {\\em Proceedings of the 25th International Conference on Theory\n  and Applications of Satisfiability Testing (SAT'22)\\/} (Dagstuhl, Germany,\n  2022), K.~S. Meel and O.~Strichman, Eds., vol.~236 of {\\em Leibniz\n  International Proceedings in Informatics (LIPIcs)}, Dagstuhl Publishing,\n  pp.~30:1--30:24.\n\\bibitem{FichteEtAl20}\n{\\sc Fichte, J.~K., Hecher, M., Thier, P., and Woltran, S.}\n\\newblock Exploiting database management systems and treewidth for counting.\n\\newblock In {\\em Proceedings of the 22nd International Symposium on Practical\n  Aspects of Declarative Languages (PADL'20)\\/} (New Orleans, {LA}, {USA}, Jan.\n  2020), E.~Komendantskaya and Y.~A. Liu, Eds., Springer Verlag, pp.~151--167.\n\\bibitem{FichteHecherThier22}\n{\\sc Fichte, J.~K., Hecher, M., Thier, P., and Woltran, S.}\n\\newblock Exploiting database management systems and treewidth for counting.\n\\newblock {\\em Theory Pract. Log. Program. 22}, 1 (2022), 128--157.\n\\bibitem{FichteEtAl18c}\n{\\sc Fichte, J.~K., Hecher, M., Woltran, S., and Zisser, M.}\n\\newblock Weighted model counting on the {GPU} by exploiting small treewidth.\n\\newblock In {\\em Proceedings of the 26th Annual European Symposium on\n  Algorithms ({ESA}'18)\\/} (2018), Y.~Azar, H.~Bast, and G.~Herman, Eds.,\n  vol.~112 of {\\em Leibniz International Proceedings in Informatics (LIPIcs)},\n  Dagstuhl Publishing, pp.~28:1--28:16.\n\\bibitem{FichteHecherZisser19a}\n{\\sc Fichte, J.~K., Hecher, M., and Zisser, M.}\n\\newblock An improved {GPU}-based {SAT} model counter.\n\\newblock In {\\em Proceedings of the 25th International Conference on\n  Principles and Practice of Constraint Programming (CP'19)\\/} (Stamford, CT,\n  USA, Sept. 2019), T.~Schiex and S.~de~Givry, Eds., Springer Verlag,\n  pp.~491--509.\n\\bibitem{FichteEtAl24}\n{\\sc Fichte, J.~K., Tobias, G., Hecher, M., and Schloegel, M.}\n\\newblock {Parallel Empirical Evaluations: Resilience Despite Concurrency}.\n\\newblock In {\\em 38th AAAI Conference on Artificial Intelligence (AAAI\n  2024)\\/} (2024).\n\\newblock In Press.\n\\bibitem{taurus}\n{\\sc for Information~Services, C., and at~TU~Dresden, H.~Z.}\n\\newblock High-performance computer (hpc-cluster) taurus.\n\\newblock \\url{https://tu-dresden.de/zih/hochleistungsrechnen/hpc}, 2020.\n\\bibitem{Fremont19a}\n{\\sc Fremont, D.~J.}\n\\newblock {\\em Algorithmic Improvisation}.\n\\newblock PhD thesis, University of California, Berkeley, 2019.\n\\bibitem{GittisVinFremont22}\n{\\sc Gittis, A., Vin, E., and Fremont, D.~J.}\n\\newblock Randomized synthesis for diversity and cost constraints with control\n  improvisation.\n\\newblock In {\\em Computer Aided Verification\\/} (Cham, 2022), S.~Shoham and\n  Y.~Vizel, Eds., Springer International Publishing, pp.~526--546.\n\\bibitem{GogateEtAl16a}\n{\\sc Gogate, V., Rahman, T., Sarkhel, S., Smith, D., and Venugopal, D.}\n\\newblock Uai 2016 inference evaluation.\n\\newblock\n  \\url{http://www.hlt.utdallas.edu/~vgogate/uai16-evaluation/tuning.html},\n  2016.\n\\bibitem{GomesHoffmannSabharwal07a}\n{\\sc Gomes, C.~P., Hoffmann, J., Sabharwal, A., and Selman, B.}\n\\newblock From sampling to model counting.\n\\newblock In {\\em Proceedings of the 20th International Joint Conference on\n  Artifical Intelligence (IJCAI'07)\\/} (Hyderabad, India, 2007), Morgan\n  Kaufmann, pp.~2293--2299.\n\\bibitem{GomesSabharwalSelman06a}\n{\\sc Gomes, C.~P., Sabharwal, A., and Selman, B.}\n\\newblock Model counting: A new strategy for obtaining good bounds.\n\\newblock In {\\em Proceedings of the 21st National Conference on Artificial\n  Intelligence (AAAI'06)\\/} (Boston, Massachusetts, 2006), The AAAI Press,\n  pp.~54--61.\n\\bibitem{GomesSabharwalSelman06b}\n{\\sc Gomes, C.~P., Sabharwal, A., and Selman, B.}\n\\newblock Near-uniform sampling of combinatorial spaces using xor constraints.\n\\newblock In {\\em Proceedings of the 19 Conference on Advances in Neural\n  Information Processing Systems (NIPS'06)\\/} (2006), B.~Sch\\\"{o}lkopf,\n  J.~Platt, and T.~Hoffman, Eds., vol.~19, MIT Press.\n\\bibitem{GomesKautzSabharwalSelman08a}\n{\\sc Gomes, C.~P., Sabharwal, A., and Selman, B.}\n\\newblock Chapter 20: Model counting.\n\\newblock In {\\em Handbook of Satisfiability}, A.~Biere, M.~Heule, H.~van\n  Maaren, and T.~Walsh, Eds., vol.~185 of {\\em Frontiers in Artificial\n  Intelligence and Applications}. IOS Press, Amsterdam, Netherlands, Feb. 2009,\n  pp.~633--654.\n\\bibitem{GranlundEtAl16a}\n{\\sc Granlund, T., Sj{\\\"o}din, G., Riesel, H., Stallman, R., Beuning, B., Lea,\n  D., Zimmermann, P., Weber, K., Bothner, P., Hollman, J., Yee, B., Schwab, A.,\n  Harley, R., Seal, D., Ekedahl, T., Nordberg, L., Ryde, K., Boortz, K., Root,\n  S., Ballabio, G., Moxham, J., M{\\\"o}ller, N., Zanoni, A., Bodrato, M.,\n  Harvey, D., Boij, M., Glisse, M., Miller, D.~S., Sofroniou, M., and Weigand,\n  U.}\n\\newblock The {GNU} multiple precision arithmetic library.\n\\newblock \\url{https://gmplib.org}, 2016.\n\\bibitem{GrossmannHeuerSchulz22}\n{\\sc Gro{\\ss}mann, E., Heuer, T., Schulz, C., and Strash, D.}\n\\newblock {The PACE 2022 Parameterized Algorithms and Computational Experiments\n  Challenge: Directed Feedback Vertex Set}.\n\\newblock In {\\em Proceedings of the 17th International Symposium on\n  Parameterized and Exact Computation (IPEC 2022)\\/} (2022), H.~Dell and\n  J.~Nederlof, Eds., vol.~249 of {\\em Leibniz International Proceedings in\n  Informatics (LIPIcs)}, Dagstuhl Publishing, pp.~26:1--26:18.\n\\bibitem{HackenbergEtAl19a}\n{\\sc Hackenberg, D., Sch{\\\"o}ne, R., Ilsche, T., Molka, D., Schuchart, J., and\n  Geyer, R.}\n\\newblock An energy efficiency feature survey of the intel haswell processor.\n\\newblock In {\\em Proceedings of the 17th International Conference on High\n  Performance Computing \\& Simulation (HPCS'19)\\/} (2019), J.-F. Lalande and\n  T.~Moh, Eds.\n\\bibitem{HamannStrasser18}\n{\\sc Hamann, M., and Strasser, B.}\n\\newblock {Graph Bisection with Pareto Optimization}.\n\\newblock {\\em ACM Journal of Experimental Algorithmics 23\\/} (2018).\n\\bibitem{HecherThierWoltran20}\n{\\sc Hecher, M., Thier, P., and Woltran, S.}\n\\newblock Taming high treewidth with abstraction, nested dynamic programming,\n  and database technology.\n\\newblock In {\\em Theory and Applications of Satisfiability Testing -- SAT\n  2020\\/} (Cham, 2020), L.~Pulina and M.~Seidl, Eds., Springer International\n  Publishing, pp.~343--360.\n\\bibitem{Iser23}\n{\\sc Heule, M., Iser, M., Jarvisalo, M., Suda, M., and Balyo, T.}\n\\newblock Sat competition 2023.\n\\newblock \\url{https://satcompetition.github.io/2023/}, 2023.\n\\bibitem{Hoos12}\n{\\sc Hoos, H.~H.}\n\\newblock {\\em Automated Algorithm Configuration and Parameter Tuning}.\n\\newblock Springer Verlag, Berlin, Heidelberg, 2012, pp.~37--71.\n\\bibitem{HoosKaufmannSchaub13a}\n{\\sc Hoos, H.~H., Kaufmann, B., Schaub, T., and Schneider, M.}\n\\newblock Robust benchmark set selection for boolean constraint solvers.\n\\newblock In {\\em Proceedings of the 7th International Conference on Learning\n  and Intelligent Optimization (LION'13)\\/} (Catania, Italy, Jan. 2013),\n  vol.~7997 of {\\em Lecture Notes in Computer Science}, Springer Verlag,\n  pp.~138--152.\n\\newblock Revised Selected Papers.\n\\bibitem{Immerman98}\n{\\sc Immerman, N.}\n\\newblock {\\em Descriptive complexity}.\n\\newblock Springer Verlag, 1998.\n\\bibitem{iso5725}\n{\\sc {International Organization for Standardization}}.\n\\newblock Iso 5725-1:2023(en) accuracy (trueness and precision) of measurement\n  methods and results --- part 1: General principles and definitions.\n\\newblock \\url{https://www.iso.org/obp/ui/#iso:std:iso:5725:-1:ed-2:v1:en},\n  2023.\n\\bibitem{IsogaiHashimotoSakai21a}\n{\\sc Isogai, T., Hashimoto, K., and Sakai, M.}\n\\newblock A method of {BDD} construction to represent all projected models of a\n  propositional logic formula.\n\\newblock Tech. Rep. SIG-FPAI-116, JSAI Technical Report, Mar. 2021.\n\\newblock in Japanese.\n\\bibitem{Janhunen04a}\n{\\sc Janhunen, T.}\n\\newblock Representing normal programs with clauses.\n\\newblock In {\\em Proceedings of the 16th European Conference on Artificial\n  Intelligence ({ECAI}'04)\\/} (Valencia, Spain, 2004), R.~L. de~M{\\'a}ntaras\n  and L.~Saitta, Eds., IOS Press, pp.~358--362.\n\\bibitem{JarvisaloEtAl23}\n{\\sc J{\\\"a}rvisalo, M., Berg, J., Martins, R., and Niskanen, A.}\n\\newblock Maxsat evaluation 2023.\n\\newblock \\url{https://maxsat-evaluations.github.io/2023/}, 2023.\n\\newblock A joint event with the 26th International Conference on Theory and\n  Applications of Satisfiability Testing (SAT).\n\\bibitem{JarvisaloBerreRoussel12a}\n{\\sc J{\\\"a}rvisalo, M., Berre, D.~L., Roussel, O., and Simon, L.}\n\\newblock The international {SAT} solver competitions.\n\\newblock In {\\em AI Magazine\\/} (2012), The AAAI Press.\n\\bibitem{dimacs}\n{\\sc Johnson, D.~S., et~al.}\n\\newblock {DIMACS} implementation challenges.\n\\newblock \\url{http://dimacs.rutgers.edu/programs/challenge/}, 2020.\n\\bibitem{KabirEtAl22}\n{\\sc Kabir, M., Everardo, F., Shukla, A., Fichte, J.~K., Hecher, M., and Meel,\n  K.}\n\\newblock {ApproxASP} - a scalable approximate answer set counter.\n\\newblock In {\\em {AAAI}'2022\\/} (2022).\n\\bibitem{KabirMeel23a}\n{\\sc Kabir, M., and Meel, K.~S.}\n\\newblock A fast and accurate {ASP} counting based network reliability\n  estimator.\n\\newblock In {\\em Proceedings of 24th International Conference on Logic for\n  Programming, Artificial Intelligence and Reasoning\\/} (2023), R.~Piskac and\n  A.~Voronkov, Eds., vol.~94 of {\\em EPiC Series in Computing}, EasyChair,\n  pp.~270--287.\n\\bibitem{KamathKarmarkarRamakrishnan92a}\n{\\sc Kamath, A.~P., Karmarkar, N.~K., Ramakrishnan, K.~G., and Resende, M.\n  G.~C.}\n\\newblock A continuous approach to inductive inference.\n\\newblock {\\em Mathematical Programming 57}, 1 (1992), 215--238.\n\\bibitem{KandanaarachchiSmith-Miles23}\n{\\sc Kandanaarachchi, S., and Smith-Miles, K.}\n\\newblock Comprehensive algorithm portfolio evaluation using item response\n  theory.\n\\newblock {\\em Journal of Machine Learning Research 24}, 177 (2023), 1--52.\n\\bibitem{KieselEiter23a}\n{\\sc Kiesel, R., and Eiter, T.}\n\\newblock {Knowledge Compilation and More with SharpSAT-TD}.\n\\newblock In {\\em Proceedings of the 20th International Conference on\n  Principles of Knowledge Representation and Reasoning ({KR}'23)\\/} (8 2023),\n  pp.~406--416.\n\\bibitem{KimMcCaman20a}\n{\\sc Kim, S., and McCaman, S.}\n\\newblock Structural bit-vector model counting.\n\\newblock In {\\em Proceedings of the 18th International Workshop on\n  Satisfiability Modulo Theories (SMT'20)\\/} (2020), F.~Bobot and T.~Weber,\n  Eds., vol.~2854, CEUR Workshop Proceedings (CEUR-WS.org), pp.~26--36.\n\\bibitem{KleineBuningLettman99}\n{\\sc Kleine~B{\\\"u}ning, H., and Lettman, T.}\n\\newblock {\\em Propositional logic: deduction and algorithms}.\n\\newblock Cambridge University Press, Cambridge, New York, NY, USA, 1999.\n\\bibitem{KorhonenJarvisalo21a}\n{\\sc Korhonen, T., and J\\\"{a}rvisalo, M.}\n\\newblock {Integrating Tree Decompositions into Decision Heuristics of\n  Propositional Model Counters}.\n\\newblock In {\\em Proceedings of the 27th International Conference on\n  Principles and Practice of Constraint Programming ({CP}'21)\\/} (Virtual,\n  2021), L.~D. Michel, Ed., vol.~210 of {\\em Leibniz International Proceedings\n  in Informatics (LIPIcs)}, Dagstuhl Publishing, pp.~8:1--8:11.\n\\bibitem{KorhonenJarvisalo23a}\n{\\sc Korhonen, T., and J{\\\"a}rvisalo, M.}\n\\newblock Sharpsat-td in model counting competitions 2021-2023.\n\\newblock {\\em CoRR\\/} (2023).\n\\bibitem{KoricheLagniezMarquisThomas13a}\n{\\sc Koriche, F., Lagniez, J.-M., Marquis, P., and Thomas, S.}\n\\newblock Knowledge compilation for model counting: Affine decision trees.\n\\newblock In {\\em Proceedings of the 23rd International Joint Conference on\n  Artificial Intelligence ({IJCAI}'13)\\/} (Beijing, China, Aug. 2013), F.~Rossi\n  and S.~Thrun, Eds., The AAAI Press.\n\\bibitem{KrocSabharwalSelman11a}\n{\\sc Kroc, L., Sabharwal, A., and Selman, B.}\n\\newblock Leveraging belief propagation, backtrack search, and statistics for\n  model counting.\n\\newblock {\\em Annals of Operations Research 184}, 1 (2011), 209--231.\n\\bibitem{LagniezLoncaMarquis16a}\n{\\sc Lagniez, J., Lonca, E., and Marquis, P.}\n\\newblock Improving model counting by leveraging definability.\n\\newblock In {\\em Proceedings of 25th International Joint Conference on\n  Artificial Intelligence (IJCAI'16)\\/} (New York City, NY, USA, July 2016),\n  S.~Kambhampati, Ed., The AAAI Press, pp.~751--757.\n\\bibitem{LagniezMarquis14a}\n{\\sc Lagniez, J., and Marquis, P.}\n\\newblock Preprocessing for propositional model counting.\n\\newblock In {\\em Proceedings of the 28th AAAI Conference on Artificial\n  Intelligence (AAAI'14)\\/} (Qu{\\'e}bec City, QC, Canada, 2014), C.~E. Brodley\n  and P.~Stone, Eds., The AAAI Press, pp.~2688--2694.\n\\bibitem{LagniezLoncaMailly20a}\n{\\sc Lagniez, J.-M., Lonca, E., Mailly, J.-G., and Rossit, J.}\n\\newblock Introducing the fourth international competition on computational\n  models of argumentation.\n\\newblock In {\\em Proceedings of the 3rd International Workshop on Systems and\n  Algorithms for Formal Argumentation (SAFA'20)\\/} (Sept. 2020), S.~A. Gaggl,\n  M.~Thimm, and M.~Vallati, Eds., vol.~2672, CEUR Workshop Proceedings\n  (CEUR-WS.org).\n\\bibitem{LagniezLoncaMarquis20}\n{\\sc Lagniez, J.-M., Lonca, E., and Marquis, P.}\n\\newblock Definability for model counting.\n\\newblock {\\em Artificial Intelligence 281\\/} (2020), 103229.\n\\bibitem{LagniezMarquis17a}\n{\\sc Lagniez, J.-M., and Marquis, P.}\n\\newblock An improved decision-{DDNF} compiler.\n\\newblock In {\\em Proceedings of the 26th International Joint Conference on\n  Artificial Intelligence (IJCAI'17)\\/} (Melbourne, VIC, Australia, 2017),\n  C.~Sierra, Ed., The AAAI Press, pp.~667--673.\n\\bibitem{LagniezMarquis19a}\n{\\sc Lagniez, J.-M., and Marquis, P.}\n\\newblock A recursive algorithm for projected model counting.\n\\newblock In {\\em Proceedings of the 33rd {AAAI} Conference on Artificial\n  Intelligence ({AAAI'19})\\/} (Honolulu, Hawaii, USA, 2019), P.~V. Hentenryck\n  and Z.-H. Zhou, Eds., The AAAI Press, pp.~1536--1543.\n\\bibitem{LagniezMarquisSzczepanski18a}\n{\\sc Lagniez, J.-M., Marquis, P., and Szczepanski, N.}\n\\newblock {DMC}: A distributed model counter.\n\\newblock In {\\em Proceedings of the Twenty-Seventh International Joint\n  Conference on Artificial Intelligence, {IJCAI'18}\\/} (7 2018), The AAAI\n  Press, pp.~1331--1338.\n\\bibitem{LaiMeelYap21a}\n{\\sc Lai, Y., Meel, K.~S., and Yap, R. H.~C.}\n\\newblock The power of literal equivalence in model counting.\n\\newblock In {\\em Proceedings of the 35rd {AAAI} Conference on Artificial\n  Intelligence ({AAAI'21})\\/} (May 2021), K.~Leyton-Brown and Mausam, Eds.,\n  pp.~3851--3859.\n\\bibitem{LatourBabakiFokkinga22}\n{\\sc Latour, A. L.~D., Babaki, B., Fokkinga, D., Anastacio, M., Hoos, H.~H.,\n  and Nijssen, S.}\n\\newblock Exact stochastic constraint optimisation with applications in network\n  analysis.\n\\newblock {\\em Artificial Intelligence 304\\/} (2022), 103650.\n\\bibitem{LatourEtAl19}\n{\\sc Latour, A. L.~D., Babaki, B., and Nijssen, S.}\n\\newblock {Stochastic Constraint Propagation for Mining Probabilistic\n  Networks}.\n\\newblock In {\\em 28th International Joint Conference on Artificial\n  Intelligence ({IJCAI} 2019)\\/} (2019), S.~Kraus, Ed., ijcai.org,\n  pp.~1137--1145.\n\\bibitem{Levin73}\n{\\sc Levin, L.}\n\\newblock Universal sequential search problems.\n\\newblock {\\em Problems of Information Transmission 9}, 3 (1973), 265---266.\n\\bibitem{LynceOuaknine06a}\n{\\sc Lynce, I., and Ouaknine, J.}\n\\newblock Sudoku as a {SAT} problem.\n\\newblock In {\\em Proceedings of the International Symposium on Artificial\n  Intelligence and Mathematics ({AI{\\&}Math}'06)\\/} (Fort Lauderdale, Florida,\n  USA, 2006).\n\\bibitem{sat_conferences23}\n{\\sc Mengel, S.}\n\\newblock The international conferences on theory and applications of\n  satisfiability testing (sat).\n\\newblock \\url{http://satisfiability.org/}, 2023.\n\\bibitem{MuiseEtAl12a}\n{\\sc Muise, Christian J .and~McIlraith, S.~A., Beck, J.~C., and Hsu, E.~I.}\n\\newblock {Dsharp}: Fast d-{DNNF} compilation with {sharpSAT}.\n\\newblock In {\\em Proceedings of the 25th Canadian Conference on Artificial\n  Intelligence (AI'17)\\/} (Toronto, ON, Canada, 2012), L.~Kosseim and\n  D.~Inkpen, Eds., vol.~7310 of {\\em Lecture Notes in Computer Science},\n  Springer Verlag, pp.~356--361.\n\\bibitem{NiskanenJarvisalo20a}\n{\\sc Niskanen, A., and J{\\\"a}rvisalo, M.}\n\\newblock {\u00b5-toksia}: An efficient abstract argumentation reasoner.\n\\newblock In {\\em Proceedings of the 17th International Conference on\n  Principles of Knowledge Representation and Reasoning (KR'20)\\/} (9 2020),\n  D.~Calvanese, E.~Erdem, and M.~Thielscher, Eds., pp.~800--804.\n\\bibitem{OztokDarwiche15a}\n{\\sc Oztok, U., and Darwiche, A.}\n\\newblock A top-down compiler for sentential decision diagrams.\n\\newblock In {\\em Proceedings of the 24th International Joint Conference on\n  Artificial Intelligence (IJCAI'15)\\/} (2015), Q.~Yang and M.~Wooldridge,\n  Eds., The AAAI Press, pp.~3141--3148.\n\\bibitem{PaivaMorenoSmith-Miles22}\n{\\sc Paiva, P. Y.~A., Moreno, C.~C., Smith-Miles, K., Valeriano, M.~G., and\n  Lorena, A.~C.}\n\\newblock Relating instance hardness to classification performance in a\n  dataset: a visual approach.\n\\newblock {\\em Machine Learning 111}, 8 (2022), 3085--3123.\n\\bibitem{PenardWerkhoven08a}\n{\\sc Penard, W., and van Werkhoven, T.}\n\\newblock {\\em Cryptography in context}.\n\\newblock John Wiley \\& Sons, 2008, ch.~On the secure hash algorithm family,\n  pp.~1--18.\n\\bibitem{PfeifferKarnagelScheffler13a}\n{\\sc Pfeiffer, U., Karnagel, T., and Scheffler, G.}\n\\newblock A sudoku-solver for large puzzles using sat.\n\\newblock In {\\em Proceedings of the 17th International Conference on Logic for\n  Programming, Artificial intelligence, and Reasoning ({LPAR'13})\\/} (2013),\n  A.~Voronkov, G.~Sutcliffe, M.~Baaz, and C.~Ferm{\\\"u}ller, Eds., vol.~13 of\n  {\\em EPiC Series in Computing}, EasyChair, pp.~52--57.\n\\bibitem{PulinaSeidlHeisinger23a}\n{\\sc Pulina, L., Seidl, M., and Heisinger, S.}\n\\newblock {QBFEVAL'23} competitive evaluation of {QBF} solvers.\n\\newblock \\url{http://www.qbflib.org/}, 2023.\n\\newblock A joint event with the 26nd International Conference on Theory and\n  Applications of Satisfiability Testing (SAT).\n\\bibitem{Roth96}\n{\\sc Roth, D.}\n\\newblock On the hardness of approximate reasoning.\n\\newblock {\\em Artif. Intell. 82}, 1-2 (1996), 273--302.\n\\bibitem{Roth96a}\n{\\sc Roth, D.}\n\\newblock On the hardness of approximate reasoning.\n\\newblock {\\em Artificial Intelligence 82}, 1--2 (1996).\n\\bibitem{Roussel11}\n{\\sc Roussel, O.}\n\\newblock Controlling a solver execution with the runsolver tool.\n\\newblock {\\em J. on Satisfiability, Boolean Modeling and Computation 7}, 4\n  (Nov. 2011), 139--144.\n\\bibitem{SaetherTelleVatshelle15a}\n{\\sc S{\\ae}ther, S.~H., Telle, J.~A., and Vatshelle, M.}\n\\newblock Solving \\#{SAT} and {MAXSAT} by dynamic programming.\n\\newblock {\\em Journal of Artificial Intelligence Research 54\\/} (2015),\n  59--82.\n\\bibitem{SangEtAl04}\n{\\sc Sang, T., Bacchus, F., Beame, P., Kautz, H., and Pitassi, T.}\n\\newblock Combining component caching and clause learning for effective model\n  counting.\n\\newblock In {\\em Online Proceedings of the 7th International Conference on\n  Theory and Applications of Satisfiability Testing (SAT'04)\\/} (Vancouver, BC,\n  Canada, 2004), H.~H. Hoos and D.~G. Mitchell, Eds.\n\\bibitem{SangBeameKautz05a}\n{\\sc Sang, T., Beame, P., and Kautz, H.}\n\\newblock Performing {Bayesian} inference by weighted model counting.\n\\newblock In {\\em Proceedings of the 29th National Conference on Artificial\n  Intelligence (AAAI'05)\\/} (2005), M.~M. Veloso and S.~Kambhampati, Eds., The\n  AAAI Press.\n\\bibitem{SharmaEtAl19a}\n{\\sc Sharma, S., Roy, S., Soos, M., and Meel, K.~S.}\n\\newblock {GANAK}: A scalable probabilistic exact model counter.\n\\newblock In {\\em Proceedings of the 28th International Joint Conference on\n  Artificial Intelligence (IJCAI'19)\\/} (Macao, China, 2019), S.~Kraus, Ed.,\n  IJCAI, pp.~1169--1176.\n\\bibitem{ShiShihDarwiche20}\n{\\sc Shi, W., Shih, A., Darwiche, A., and Choi, A.}\n\\newblock On tractable representations of binary neural networks.\n\\newblock In {\\em Proceedings of the 17th International Conference on\n  Principles of Knowledge Representation and Reasoning ({KR}'20)\\/} (Rhodes,\n  Greece, 2020), D.~Calvanese, E.~Erdem, and M.~Thielscher, Eds., pp.~882--892.\n\\bibitem{SimonLeBerreHirsch05a}\n{\\sc Simon, L., Le~Berre, D., and Hirsch, E.~A.}\n\\newblock The sat2002 competition.\n\\newblock {\\em Ann. Math. Artif. Intell. 43}, 1 (2005), 307--342.\n\\bibitem{SimonisKatsirelosStreeter09a}\n{\\sc Simonis, H., Katsirelos, G., Streeter, M., and Hebrard, E.}\n\\newblock {CSP} 2009 competition (csc'2009).\n\\newblock \\url{http://www.cril.univ-artois.fr/CSC09/}, July 2009.\n\\bibitem{Smith-MilesMunoz23}\n{\\sc Smith-Miles, K., and Mu\\~{n}oz, M.~A.}\n\\newblock Instance space analysis for algorithm testing: Methodology and\n  software tools.\n\\newblock {\\em ACM Comput. Surv. 55}, 12 (mar 2023).\n\\bibitem{Soos24}\n{\\sc Soos, M.}\n\\newblock Our tools for solving, counting and sampling.\n\\newblock\n  \\url{https://www.msoos.org/2024/02/our-tools-for-solving-counting-and-sampling/},\n  Feb. 2024.\n\\bibitem{SoosMeel19}\n{\\sc Soos, M., and Meel, K.~S.}\n\\newblock {BIRD:} engineering an efficient {CNF-XOR} {SAT} solver and its\n  applications to approximate model counting.\n\\newblock In {\\em Proceedings of the 33rd {AAAI} Conference on Artificial\n  Intelligence ({AAAI'19})\\/} (2019), P.~V. Hentenryck and Z.-H. Zhou, Eds.,\n  The AAAI Press, pp.~1592--1599.\n\\bibitem{SoosMeel22}\n{\\sc Soos, M., and Meel, K.~S.}\n\\newblock Arjun: An efficient independent support computation technique and its\n  applications to counting and sampling.\n\\newblock In {\\em Proceedings of the 41st IEEE/ACM International Conference on\n  Computer-Aided Design ({ICCAD}'22)\\/} (San Diego, CA, USA, 2022), Assoc.\n  Comput. Mach., New York.\n\\bibitem{SoosNohlCastelluccia09}\n{\\sc Soos, M., Nohl, K., and Castelluccia, C.}\n\\newblock Extending sat solvers to cryptographic problems.\n\\newblock In {\\em Proceedings of the 12th International Conference (SAT'09)\\/}\n  (Swansea, UK, July 2009), O.~Kullmann, Ed., Springer Verlag, pp.~244--257.\n\\bibitem{SpallittaMasinaMorettin22}\n{\\sc Spallitta, G., Masina, G., Morettin, P., Passerini, A., and Sebastiani,\n  R.}\n\\newblock {SMT}-based weighted model integration with structure awareness.\n\\newblock In {\\em Proceedings of the Thirty-Eighth Conference on Uncertainty in\n  Artificial Intelligence (UAI'22)\\/} (Aug. 2022), J.~Cussens and K.~Zhang,\n  Eds., vol.~180, PMLR, pp.~1876--1885.\n\\bibitem{Spence22}\n{\\sc Spence, I.}\n\\newblock The set union model counter sumc2.\n\\newblock\n  \\url{https://github.com/ivor-spence/sumc/blob/master/sumc2-spence.pdf}, 2022.\n\\bibitem{Spence22a}\n{\\sc Spence, I.}\n\\newblock The sudoku puzzle as a satisfiability problem.\n\\newblock \\url{https://www.eeecs.qub.ac.uk/~I.Spence/ SuDoku/SuDoku.html},\n  2022.\n\\bibitem{Strasser17}\n{\\sc Strasser, B.}\n\\newblock Computing tree decompositions with flowcutter: Pace 2017 submission.\n\\newblock {\\em CoRR}, abs/1709.08949 (2017).\n\\bibitem{StumpSutcliffeTinelli14}\n{\\sc Stump, A., Sutcliffe, G., and Tinelli, C.}\n\\newblock Starexec: A cross-community infrastructure for logic solving.\n\\newblock In {\\em Proceedings of the 7th International Joint Conference on\n  Automated Reasoning (IJCAR'14)\\/} (Vienna, Austria, July 2014), S.~Demri,\n  D.~Kapur, and C.~Weidenbach, Eds., vol.~8562 of {\\em Lecture Notes in\n  Computer Science}, Springer Verlag, pp.~367--373.\n\\newblock Held as Part of the Vienna Summer of Logic, VSL 2014.\n\\bibitem{SundermannThumSchaefer20}\n{\\sc Sundermann, C., Th\\\"{u}m, T., and Schaefer, I.}\n\\newblock Evaluating \\#{SAT} solvers on industrial feature models.\n\\newblock In {\\em Proceedings of the 14th International Working Conference on\n  Variability Modelling of Software-Intensive Systems ({VAMOS} '20)\\/} (New\n  York, NY, USA, 2020), Assoc. Comput. Mach., New York.\n\\bibitem{SuzukiHashimotoSakai15a}\n{\\sc Suzuki, R., Hashimoto, K., and Sakai, M.}\n\\newblock An extension of a {DPLL}-based model-counting solver for projected\n  model.\n\\newblock Tech. Rep. SIG-FPAI-97-B404, JSAI Technical Report, Mar. 2015.\n\\newblock in Japanese.\n\\bibitem{SuzukiHashimotoSakai17a}\n{\\sc Suzuki, R., Hashimoto, K., and Sakai, M.}\n\\newblock Improvement of projected model-counting solver with component\n  decomposition using {SAT} solving in components.\n\\newblock Tech. Rep. SIG-FPAI-103-B506, JSAI Technical Report, Mar. 2017.\n\\newblock\n  \\url{https://www.jstage.jst.go.jp/article/jsaifpai/103/0/103_07/_pdf/-char/ja}.\n  In Japanese.\n\\bibitem{TackStuckey23a}\n{\\sc Tack, G., and Stuckey, P.~J.}\n\\newblock The minizinc challenge 2023.\n\\newblock \\url{https://www.minizinc.org/challenge.html}, July 2023.\n\\newblock A joint event with the 29th International Conference on Principles\n  and Practice of Constraint Programming (CP'23).\n\\bibitem{TeuberWeigl21}\n{\\sc Teuber, S., and Weigl, A.}\n\\newblock Quantifying software reliability via model-counting.\n\\newblock In {\\em Proceedings of the 18th International Conference on\n  Quantitative Evaluation of Systems ({QEST}'21)\\/} (2021), A.~Abate and\n  A.~Marin, Eds., Springer Verlag, pp.~59--79.\n\\bibitem{TeuberWeigl22a}\n{\\sc Teuber, S., and Weigl, A.}\n\\newblock Dataset: The countersharp model counting benchmark.\n\\newblock \\url{https://zenodo.org/records/5984174}, 2022.\n\\bibitem{java_biginteger97a}\n{\\sc {The JDK Developers}}.\n\\newblock Class {BigInteger}.\n\\newblock\n  \\url{https://docs.oracle.com/javase/7/docs/api/java/math/BigInteger.html},\n  1997.\n\\bibitem{OSI_licenses}\n{\\sc {The open source initiative}}.\n\\newblock {OSI Approved Licenses}.\n\\newblock \\url{https://opensource.org/licenses/}, Oct. 2023.\n\\bibitem{Thurley06a}\n{\\sc Thurley, M.}\n\\newblock {sharpSAT} -- counting models with advanced component caching and\n  implicit {BCP}.\n\\newblock In {\\em Proceedings of the 9th International Conference Theory and\n  Applications of Satisfiability Testing (SAT'06)\\/} (Seattle, WA, USA, 2006),\n  A.~Biere and C.~P. Gomes, Eds., Springer Verlag, pp.~424--429.\n\\bibitem{Toda91a}\n{\\sc Toda, S.}\n\\newblock {PP} is as hard as the polynomial-time hierarchy.\n\\newblock {\\em SIAM J. Comput. 20}, 5 (Oct. 1991), 865--877.\n\\bibitem{TodaSoh15a}\n{\\sc Toda, T., and Soh, T.}\n\\newblock Implementing efficient all solutions {SAT} solvers.\n\\newblock {\\em ACM Journal of Experimental Algorithmics 21\\/} (2015), 1.12.\n\\newblock Special Issue SEA 2014, Regular Papers and Special Issue ALENEX 2013.\n\\bibitem{TornqvistVartiaVartia85a}\n{\\sc T{\\\"o}rnqvist, L., Vartia, P., and Vartia, Y.~O.}\n\\newblock How should relative changes be measured?\n\\newblock {\\em The American Statistician 39}, 1 (1985), 43--46.\n\\bibitem{kernel_thp}\n{\\sc Torvalds, L.}\n\\newblock kernel.org: Transparent hugepage support.\n\\newblock \\url{https://www.kernel.org/doc/Documentation/vm/transhuge.txt}, May\n  2017.\n\\bibitem{TrickChvatalCook93a}\n{\\sc Trick, M., Chvatal, V., Cook, B., Johnson, D., McGeoch, C., and Tarjan,\n  B.}\n\\newblock The 2nd {DIMACS} implementation challenge: 1992--1993 on {NP} hard\n  problems: Maximum clique, graph coloring, and satisfiability.\n\\newblock\n  \\url{http://archive.dimacs.rutgers.edu/pub/challenge/sat/benchmarks/}, 1993.\n\\bibitem{Valiant79b}\n{\\sc Valiant, L.~G.}\n\\newblock The complexity of computing the permanent.\n\\newblock {\\em Theoretical Computer Science 8}, 2 (1979), 189--201.\n\\bibitem{KouweAndriesseBos18a}\n{\\sc van~der Kouwe, E., Andriesse, D., Bos, H., Giuffrida, C., and Heiser, G.}\n\\newblock Benchmarking crimes: An emerging threat in systems security.\n\\newblock {\\em CoRR abs/1801.02381\\/} (2018).\n\\bibitem{Vazirani01a}\n{\\sc Vazirani, V.~V.}\n\\newblock {\\em Approximation algorithms}, vol.~1.\n\\newblock Springer Verlag, 2001.\n\\bibitem{WeiSelman05a}\n{\\sc Wei, W., and Selman, B.}\n\\newblock A new approach to model counting.\n\\newblock In {\\em Proceedings of the 8th International Conference on the Theory\n  and Applications of Satisfiability Testing (SAT'05)\\/} (St Andrews, Scotland,\n  2005), F.~Bacchus and T.~Walsh, Eds., Springer Verlag, pp.~324--339.\n\\bibitem{YooJetteGrondona03}\n{\\sc Yoo, A.~B., Jette, M.~A., and Grondona, M.}\n\\newblock {SLURM:} simple linux utility for resource management.\n\\newblock In {\\em 9th International Workshop on Job Scheduling Strategies for\n  Parallel Processing ({JSSPP} 2003)\\/} (2003), D.~G. Feitelson, L.~Rudolph,\n  and U.~Schwiegelshohn, Eds., vol.~2862 of {\\em Lecture Notes in Computer\n  Science}, Springer, pp.~44--60.\n\\bibitem{ZadkaRossum01a}\n{\\sc Zadka, M., and van Rossum, G.}\n\\newblock {PEP} 237 -- unifying long integers and integers.\n\\newblock \\url{https://www.python.org/dev/peps/pep-0237/}, 2001.\n\\bibitem{ZhaiChenPiskac20}\n{\\sc Zhai, E., Chen, A., Piskac, R., Balakrishnan, M., Tian, B., Song, B., and\n  Zhang, H.}\n\\newblock Check before you change: Preventing correlated failures in service\n  updates.\n\\newblock In {\\em Proceedings of the 17th {USENIX} Symposium on Networked\n  Systems Design and Implementation ({NSDI}'20)\\/} (Santa Clara, CA, USA,\n  2020), R.~Bhagwan and G.~Porter, Eds., {USENIX} Association, pp.~575--589.\n\\end{thebibliography}",
    "tabular": [
        {
            "label": "tab:mc-solvers",
            "caption": "%\n  Overview on available implementations for model counting.\n  Each row states a solver (Solver), its features, %\n  the scientific reference,\n  a hyperlink (in the PDF) to download the solver sources or its binaries, and\n  the solver's licence.\n  Solvers in the upper part of the table participated in at least one of the \n  2020--2023 edition of the model counting competition. Its last participation\n  is stated in the Year column.\n  Solvers in the lower part are available in the literature.\n  A symbol ``\\cm'' indicates that the solver\n  in the respective row solves the problem. \\MC refers to model counting, \n  \\WMC to weighted model counting, \\PMC to projected model counting, \n  and \\PWMC to projected weighted model counting. The problems are defined in Section~\\ref{sec:prelimns",
            "columns": [
                "Solver",
                "\\MC",
                "\\WMC",
                "\\PMC",
                "\\PWMC",
                "Year",
                "Type",
                "Reference",
                "Download",
                "License"
            ],
            "data": [
                {
                    "Solver": "ADDMC",
                    "\\MC": "\\cm",
                    "\\WMC": "\\cm",
                    "\\PMC": "",
                    "\\PWMC": "",
                    "Year": "2020",
                    "Type": "\\exact",
                    "Reference": "DudekPhanVardi20a",
                    "Download": "https://github.com/vardigroup/ADDMC\\sources",
                    "License": "MIT"
                },
                {
                    "Solver": "Alt-DPMC",
                    "\\MC": "\\cm",
                    "\\WMC": "\\cm",
                    "\\PMC": "",
                    "\\PWMC": "",
                    "Year": "2023",
                    "Type": "\\exact",
                    "Reference": "na",
                    "Download": "https://github.com/allrtaken/DPMC\\sources",
                    "License": "MIT"
                },
                {
                    "Solver": "ApproxMC",
                    "\\MC": "\\cm",
                    "\\WMC": "\\cm",
                    "\\PMC": "\\cm",
                    "\\PWMC": "",
                    "Year": "2023\\pf",
                    "Type": "\\app",
                    "Reference": "ChakrabortyEtAl14a",
                    "Download": "https://github.com/meelgroup/approxmc\\sources",
                    "License": "MIT"
                },
                {
                    "Solver": "c2d",
                    "\\MC": "\\cm",
                    "\\WMC": "\\cm",
                    "\\PMC": "\\cm",
                    "\\PWMC": "\\cm",
                    "Year": "2022",
                    "Type": "\\arb",
                    "Reference": "Darwiche04a",
                    "Download": "http://reasoning.cs.ucla.edu/c2d/download.php\\binary",
                    "License": "na"
                },
                {
                    "Solver": "D4",
                    "\\MC": "\\cm",
                    "\\WMC": "\\cm",
                    "\\PMC": "\\cm",
                    "\\PWMC": "\\cm",
                    "Year": "2023",
                    "Type": "\\exact",
                    "Reference": "LagniezMarquis17a",
                    "Download": "https://github.com/crillab/D4\\sources",
                    "License": "LGPL3"
                },
                {
                    "Solver": "DPMC",
                    "\\MC": "\\cm",
                    "\\WMC": "\\cm",
                    "\\PMC": "",
                    "\\PWMC": "",
                    "Year": "2023",
                    "Type": "\\exact",
                    "Reference": "DudekPhanVardi20b",
                    "Download": "https://github.com/vardigroup/DPMC\\sources",
                    "License": "MIT"
                },
                {
                    "Solver": "ExactMC",
                    "\\MC": "\\cm",
                    "\\WMC": "\\cm",
                    "\\PMC": "",
                    "\\PWMC": "",
                    "Year": "2023",
                    "Type": "\\exact",
                    "Reference": "LaiMeelYap21a",
                    "Download": "https://github.com/meelgroup/KCBox\\sources",
                    "License": "MIT"
                },
                {
                    "Solver": "GANAK",
                    "\\MC": "\\cm",
                    "\\WMC": "\\cm",
                    "\\PMC": "\\cm",
                    "\\PWMC": "",
                    "Year": "2023",
                    "Type": "\\exact",
                    "Reference": "SharmaEtAl19a",
                    "Download": "https://github.com/meelgroup/ganak\\sources",
                    "License": "MIT"
                },
                {
                    "Solver": "GPMC",
                    "\\MC": "\\cm",
                    "\\WMC": "\\cm",
                    "\\PMC": "\\cm",
                    "\\PWMC": "\\cm",
                    "Year": "2023",
                    "Type": "\\arb",
                    "Reference": "SuzukiHashimotoSakai15a,SuzukiHashimotoSakai17a",
                    "Download": "https://git.trs.css.i.nagoya-u.ac.jp/k-hasimt/GPMC\\sources",
                    "License": "MIT"
                },
                {
                    "Solver": "mcTw",
                    "\\MC": "\\cm",
                    "\\WMC": "",
                    "\\PMC": "",
                    "\\PWMC": "",
                    "Year": "2020",
                    "Type": "\\exact",
                    "Reference": "na",
                    "Download": "https://github.com/swacisko/mc-2020\\sources",
                    "License": "MIT"
                },
                {
                    "Solver": "miniC2D",
                    "\\MC": "\\cm",
                    "\\WMC": "\\cm",
                    "\\PMC": "",
                    "\\PWMC": "",
                    "Year": "2020",
                    "Type": "\\arb",
                    "Reference": "OztokDarwiche15a",
                    "Download": "http://reasoning.cs.ucla.edu/minic2d/\\binary",
                    "License": "na"
                },
                {
                    "Solver": "mtmc",
                    "\\MC": "\\cm",
                    "\\WMC": "\\cm",
                    "\\PMC": "",
                    "\\PWMC": "",
                    "Year": "2022",
                    "Type": "\\exact",
                    "Reference": "na",
                    "Download": "https://zenodo.org/records/4899862\\sources",
                    "License": "GPL2"
                },
                {
                    "Solver": "pc2dd",
                    "\\MC": "\\cm",
                    "\\WMC": "",
                    "\\PMC": "\\cm",
                    "\\PWMC": "",
                    "Year": "2021",
                    "Type": "\\exact",
                    "Reference": "IsogaiHashimotoSakai21a",
                    "Download": "https://git.trs.css.i.nagoya-u.ac.jp/t_isogai/cnf2bdd\\sources",
                    "License": "MIT"
                },
                {
                    "Solver": "ProCount",
                    "\\MC": "\\cm",
                    "\\WMC": "",
                    "\\PMC": "",
                    "\\PWMC": "",
                    "Year": "2021",
                    "Type": "\\exact",
                    "Reference": "DudekPhanVardi21a",
                    "Download": "https://github.com/vardigroup/DPMC/commits/procount\\sources",
                    "License": "MIT"
                },
                {
                    "Solver": "sharpSAT-td",
                    "\\MC": "\\cm",
                    "\\WMC": "\\cm",
                    "\\PMC": "\\cm",
                    "\\PWMC": "",
                    "Year": "2023",
                    "Type": "\\arb",
                    "Reference": "KorhonenJarvisalo21a,KorhonenJarvisalo23a",
                    "Download": "https://github.com/Laakeri/sharpsat-td\\sources",
                    "License": "MIT"
                },
                {
                    "Solver": "SUMC2",
                    "\\MC": "\\cm",
                    "\\WMC": "",
                    "\\PMC": "",
                    "\\PWMC": "",
                    "Year": "2021",
                    "Type": "\\exact",
                    "Reference": "Spence22",
                    "Download": "https://github.com/ivor-spence/sumc\\sources",
                    "License": "GPL3"
                },
                {
                    "Solver": "Approxcount",
                    "\\MC": "\\cm",
                    "\\WMC": "",
                    "\\PMC": "",
                    "\\PWMC": "",
                    "Year": "--",
                    "Type": "\\app",
                    "Reference": "WeiSelman05a",
                    "Download": "http://www.cs.cornell.edu/ sabhar/software/approxcount/approxcount12.tar.bz2\\sources",
                    "License": "na"
                },
                {
                    "Solver": "Cachet",
                    "\\MC": "\\cm",
                    "\\WMC": "\\cm",
                    "\\PMC": "",
                    "\\PWMC": "",
                    "Year": "--",
                    "Type": "\\exact",
                    "Reference": "SangEtAl04",
                    "Download": "https://web.archive.org/web/20220121083854/https://www.cs.rochester.edu/u/kautz/Cachet/cachet-wmc-1-21.zip\\sources\\arch",
                    "License": "zchaff"
                },
                {
                    "Solver": "\\bddm",
                    "\\MC": "\\cm",
                    "\\WMC": "",
                    "\\PMC": "",
                    "\\PWMC": "",
                    "Year": "--",
                    "Type": "\\arb",
                    "Reference": "TodaSoh15a",
                    "Download": "http://www.sd.is.uec.ac.jp/toda/code/cnf2obdd.html\\sources",
                    "License": "MIT"
                },
                {
                    "Solver": "BPCount",
                    "\\MC": "\\cm",
                    "\\WMC": "",
                    "\\PMC": "",
                    "\\PWMC": "",
                    "Year": "--",
                    "Type": "\\app",
                    "Reference": "KrocSabharwalSelman11a",
                    "Download": "na",
                    "License": "na"
                },
                {
                    "Solver": "cnf2eadt",
                    "\\MC": "\\cm",
                    "\\WMC": "",
                    "\\PMC": "",
                    "\\PWMC": "",
                    "Year": "--",
                    "Type": "\\arb",
                    "Reference": "KoricheLagniezMarquisThomas13a",
                    "Download": "http://www.cril.univ-artois.fr/KC/eadt.html\\binary",
                    "License": "na"
                },
                {
                    "Solver": "countAntom",
                    "\\MC": "\\cm",
                    "\\WMC": "",
                    "\\PMC": "",
                    "\\PWMC": "",
                    "Year": "--",
                    "Type": "\\exact",
                    "Reference": "BurchardSchubertBecker15a",
                    "Download": "https://projects.informatik.uni-freiburg.de/projects/countantom\\sources",
                    "License": "MIT"
                },
                {
                    "Solver": "dCountAntom",
                    "\\MC": "\\cm",
                    "\\WMC": "",
                    "\\PMC": "",
                    "\\PWMC": "",
                    "Year": "--",
                    "Type": "\\exact",
                    "Reference": "BurchardSchubertBecker16a",
                    "Download": "na",
                    "License": "na"
                },
                {
                    "Solver": "dpdb",
                    "\\MC": "\\cm",
                    "\\WMC": "\\cm",
                    "\\PMC": "",
                    "\\PWMC": "",
                    "Year": "--",
                    "Type": "\\arb",
                    "Reference": "FichteEtAl20",
                    "Download": "https://github.com/hmarkus/dp_on_dbs/tree/master\\sources",
                    "License": "GPL3"
                },
                {
                    "Solver": "DMC",
                    "\\MC": "\\cm",
                    "\\WMC": "",
                    "\\PMC": "",
                    "\\PWMC": "",
                    "Year": "--",
                    "Type": "\\arb",
                    "Reference": "LagniezMarquisSzczepanski18a",
                    "Download": "http://www.cril.univ-artois.fr/KC/dmc.html\\binary",
                    "License": "na"
                },
                {
                    "Solver": "DSHARP",
                    "\\MC": "\\cm",
                    "\\WMC": "",
                    "\\PMC": "",
                    "\\PWMC": "",
                    "Year": "--",
                    "Type": "\\arb",
                    "Reference": "MuiseEtAl12a",
                    "Download": "https://github.com/QuMuLab/dsharp\\sources",
                    "License": "MIT"
                },
                {
                    "Solver": "gpusat",
                    "\\MC": "\\cm",
                    "\\WMC": "\\cm",
                    "\\PMC": "",
                    "\\PWMC": "",
                    "Year": "--",
                    "Type": "\\exact",
                    "Reference": "FichteEtAl18c",
                    "Download": "https://github.com/daajoe/GPUSAT\\sources",
                    "License": "GPL3"
                },
                {
                    "Solver": "FocusedFlatSAT",
                    "\\MC": "\\cm",
                    "\\WMC": "",
                    "\\PMC": "",
                    "\\PWMC": "",
                    "Year": "--",
                    "Type": "\\app",
                    "Reference": "ErmonGomesSabharwal11a",
                    "Download": "https://web.archive.org/web/20201014145213/https://cs.stanford.edu/ ermon/code/FocusedFlatSAT.zip\\sources\\arch",
                    "License": "na"
                },
                {
                    "Solver": "nesthdb",
                    "\\MC": "\\cm",
                    "\\WMC": "",
                    "\\PMC": "\\cm",
                    "\\PWMC": "",
                    "Year": "--",
                    "Type": "\\arb",
                    "Reference": "HecherThierWoltran20",
                    "Download": "https://github.com/hmarkus/dp_on_dbs/tree/nesthdb\\sources",
                    "License": "GPL3"
                },
                {
                    "Solver": "MBound",
                    "\\MC": "\\cm",
                    "\\WMC": "",
                    "\\PMC": "",
                    "\\PWMC": "",
                    "Year": "--",
                    "Type": "\\app",
                    "Reference": "GomesSabharwalSelman06a",
                    "Download": "https://web.archive.org/web/20211219191941/http://www.cs.cornell.edu/ sabhar/software/xor-scripts/xor-scripts.zip\\sources\\arch",
                    "License": "na"
                },
                {
                    "Solver": "MiniCount",
                    "\\MC": "\\cm",
                    "\\WMC": "",
                    "\\PMC": "",
                    "\\PWMC": "",
                    "Year": "--",
                    "Type": "\\app",
                    "Reference": "KrocSabharwalSelman11a",
                    "Download": "na",
                    "License": "na"
                },
                {
                    "Solver": "projMC",
                    "\\MC": "\\cm",
                    "\\WMC": "",
                    "\\PMC": "\\cm",
                    "\\PWMC": "",
                    "Year": "--",
                    "Type": "\\exact",
                    "Reference": "LagniezMarquis19a",
                    "Download": "http://www.cril.univ-artois.fr/KC/projmc.html\\binary",
                    "License": "na"
                },
                {
                    "Solver": "SampleCount",
                    "\\MC": "\\cm",
                    "\\WMC": "",
                    "\\PMC": "",
                    "\\PWMC": "",
                    "Year": "--",
                    "Type": "\\app",
                    "Reference": "GomesHoffmannSabharwal07a",
                    "Download": "https://web.archive.org/web/20160830063246/http://www.cs.cornell.edu/ sabhar/software/samplecount/samplecount-1.0-04092007.zip\\sources\\arch",
                    "License": "na"
                },
                {
                    "Solver": "sdd",
                    "\\MC": "\\cm",
                    "\\WMC": "\\cm",
                    "\\PMC": "",
                    "\\PWMC": "",
                    "Year": "--",
                    "Type": "\\exact",
                    "Reference": "Darwiche11a",
                    "Download": "http://reasoning.cs.ucla.edu/sdd/\\binary",
                    "License": "Apache2.0 \\\\ %"
                },
                {
                    "Solver": "sharpCDCL",
                    "\\MC": "\\cm",
                    "\\WMC": "",
                    "\\PMC": "",
                    "\\PWMC": "",
                    "Year": "--",
                    "Type": "\\exact",
                    "Reference": "na",
                    "Download": "https://github.com/conp-solutions/sharpCDCL\\sources",
                    "License": "MIT"
                },
                {
                    "Solver": "sharpSAT",
                    "\\MC": "\\cm",
                    "\\WMC": "",
                    "\\PMC": "",
                    "\\PWMC": "",
                    "Year": "--",
                    "Type": "\\arb",
                    "Reference": "Thurley06a",
                    "Download": "https://github.com/marcthurley/sharpSAT\\sources",
                    "License": "MIT"
                },
                {
                    "Solver": "sharpSAT-td-KC",
                    "\\MC": "\\cm",
                    "\\WMC": "\\cm",
                    "\\PMC": "",
                    "\\PWMC": "",
                    "Year": "--",
                    "Type": "\\arb",
                    "Reference": "KieselEiter23a",
                    "Download": "https://github.com/raki123/sharpsat-td\\sources",
                    "License": "MIT"
                },
                {
                    "Solver": "sts",
                    "\\MC": "\\cm",
                    "\\WMC": "",
                    "\\PMC": "",
                    "\\PWMC": "",
                    "Year": "--",
                    "Type": "\\app",
                    "Reference": "ErmonGomesSelman12a",
                    "Download": "https://github.com/dorcoh/EntropyApproximator\\sources",
                    "License": "na"
                },
                {
                    "Solver": "TensorOrder",
                    "\\MC": "\\cm",
                    "\\WMC": "\\cm",
                    "\\PMC": "",
                    "\\PWMC": "",
                    "Year": "--",
                    "Type": "\\exact",
                    "Reference": "DudekVardi20",
                    "Download": "https://github.com/vardigroup/TensorOrder\\sources",
                    "License": "MIT"
                },
                {
                    "Solver": "XorSample",
                    "\\MC": "\\cm",
                    "\\WMC": "",
                    "\\PMC": "",
                    "\\PWMC": "",
                    "Year": "--",
                    "Type": "\\app",
                    "Reference": "GomesSabharwalSelman06b",
                    "Download": "na",
                    "License": "na"
                }
            ]
        },
        {
            "label": "tab:accuracy:2021",
            "caption": "%\n      2021 Competition requirements enforced by track regardless of\n      the type of the solver.",
            "columns": [
                "Track",
                "\\err",
                "\\wrg"
            ],
            "data": [
                {
                    "Track": "Track 1 (\\MC)",
                    "\\err": "0.1\\%",
                    "\\wrg": "$\\leq 20$"
                },
                {
                    "Track": "Track 2 (\\WMC)",
                    "\\err": "1.0\\%",
                    "\\wrg": "$\\leq 20$"
                },
                {
                    "Track": "Track 3 (\\PMC)",
                    "\\err": "1.0\\%",
                    "\\wrg": "$\\leq 20$"
                },
                {
                    "Track": "Track 4 (\\MC)",
                    "\\err": "20\\%",
                    "\\wrg": "$\\leq 20$"
                }
            ]
        },
        {
            "label": "tab:track1:character",
            "caption": "Characteristics of instances from Track 1 (MC) grouped by unsolved and solved. %\n   ``\\#'' refers to number of instances,\n   ``twub'' to an upper bound of the treewidth of the primal\n   graph,\n   ``[Mdn]''  to the median, ``n'' to the number of variables,\n   ``m'' to the number of clauses, ``log10'' to the model count in\n   log10-notion, and ``--'' means that the instances are unsolved or\n   we could not compute an upper bound on the treewidth.",
            "columns": [
                "",
                "set",
                "public/private",
                "solved",
                "twub",
                "\\#",
                "twub[Mdn]",
                "twub[max]",
                "n[Mdn]",
                "n[max]",
                "m[Mdn]",
                "c[Mdn]",
                "log10[Mdn]"
            ],
            "data": [
                {
                    "": "8",
                    "set": "2021",
                    "public/private": "private",
                    "solved": "--",
                    "twub": "+",
                    "\\#": "10",
                    "twub[Mdn]": "435",
                    "twub[max]": "507,949",
                    "n[Mdn]": "3,231",
                    "n[max]": "101,451",
                    "m[Mdn]": "76,694",
                    "c[Mdn]": "18",
                    "log10[Mdn]": "--"
                },
                {
                    "": "28",
                    "set": "2022",
                    "public/private": "private",
                    "solved": "--",
                    "twub": "+",
                    "\\#": "17",
                    "twub[Mdn]": "195",
                    "twub[max]": "507,949.00",
                    "n[Mdn]": "729",
                    "n[max]": "50,461",
                    "m[Mdn]": "10,543",
                    "c[Mdn]": "18",
                    "log10[Mdn]": "--"
                },
                {
                    "": "48",
                    "set": "2023",
                    "public/private": "private",
                    "solved": "--",
                    "twub": "+",
                    "\\#": "10",
                    "twub[Mdn]": "172",
                    "twub[max]": "77,348.00",
                    "n[Mdn]": "3,834",
                    "n[max]": "130,982",
                    "m[Mdn]": "26,873",
                    "c[Mdn]": "40",
                    "log10[Mdn]": "--"
                },
                {
                    "": "9",
                    "set": "2021",
                    "public/private": "private",
                    "solved": "+",
                    "twub": "+",
                    "\\#": "90",
                    "twub[Mdn]": "56",
                    "twub[max]": "737",
                    "n[Mdn]": "1,494",
                    "n[max]": "119,057",
                    "m[Mdn]": "5,396",
                    "c[Mdn]": "36",
                    "log10[Mdn]": "21"
                },
                {
                    "": "29",
                    "set": "2022",
                    "public/private": "private",
                    "solved": "+",
                    "twub": "+",
                    "\\#": "83",
                    "twub[Mdn]": "76",
                    "twub[max]": "964.00",
                    "n[Mdn]": "759",
                    "n[max]": "349,990",
                    "m[Mdn]": "3,174",
                    "c[Mdn]": "20",
                    "log10[Mdn]": "14"
                },
                {
                    "": "49",
                    "set": "2023",
                    "public/private": "private",
                    "solved": "+",
                    "twub": "+",
                    "\\#": "85",
                    "twub[Mdn]": "67",
                    "twub[max]": "631,270.00",
                    "n[Mdn]": "3,754",
                    "n[max]": "158,705",
                    "m[Mdn]": "18,764",
                    "c[Mdn]": "66",
                    "log10[Mdn]": "16"
                },
                {
                    "": "50",
                    "set": "2023",
                    "public/private": "private",
                    "solved": "+",
                    "twub": "--",
                    "\\#": "5",
                    "twub[Mdn]": "--",
                    "twub[max]": "--",
                    "n[Mdn]": "137,358",
                    "n[max]": "217,363",
                    "m[Mdn]": "82,069",
                    "c[Mdn]": "129,614",
                    "log10[Mdn]": "39,088"
                }
            ]
        },
        {
            "label": "tab:mc",
            "caption": "Track 1 (MC): 2023 Iteration",
            "columns": [
                "0\\%",
                "0.1\\%",
                "0.8",
                "Submission",
                "Authors",
                "solved"
            ],
            "data": [
                {
                    "0\\%": "1",
                    "0.1\\%": "1",
                    "0.8": "1",
                    "Submission": "SharpSAT-TD",
                    "Authors": "Tuukka Korhonen, Matti J\u00e4rvisalo",
                    "solved": "82"
                },
                {
                    "0\\%": "",
                    "0.1\\%": "",
                    "0.8": "2",
                    "Submission": "Arjun-GANAK-ApproxMC",
                    "Authors": "Mate Soos, Kuldeep S. Meel",
                    "solved": "79"
                },
                {
                    "0\\%": "2",
                    "0.1\\%": "2",
                    "0.8": "3",
                    "Submission": "D4",
                    "Authors": "Pierre Marquis, Jean-Marie Lagniez",
                    "solved": "75"
                },
                {
                    "0\\%": "",
                    "0.1\\%": "3",
                    "0.8": "4",
                    "Submission": "ExactMC-Arjun",
                    "Authors": "Yong Lai, Zhenghang Xu, Minghao Yin,  Kuldeep S. Meel,  Roland H.C. Yap",
                    "solved": "74"
                },
                {
                    "0\\%": "",
                    "0.1\\%": "4",
                    "0.8": "5",
                    "Submission": "Arjun-GANAK",
                    "Authors": "Mate  Soo,  Kuldeep S. Meel",
                    "solved": "71"
                },
                {
                    "0\\%": "3",
                    "0.1\\%": "5",
                    "0.8": "6",
                    "Submission": "GPMC",
                    "Authors": "Kenji Hashimoto,  Shota Yap",
                    "solved": "64"
                },
                {
                    "0\\%": "",
                    "0.1\\%": "6",
                    "0.8": "7",
                    "Submission": "Alt-DPMC",
                    "Authors": "Aditya Shrotr,  Moshe Vardi",
                    "solved": "50"
                },
                {
                    "0\\%": "4",
                    "0.1\\%": "7",
                    "0.8": "8",
                    "Submission": "DPMC",
                    "Authors": "Vu Phan, Jeffrey Dudek, Moshe Vardi",
                    "solved": "43"
                },
                {
                    "0\\%": "",
                    "0.1\\%": "8",
                    "0.8": "9",
                    "Submission": "mtmc",
                    "Authors": "Ivor Spence",
                    "solved": "34"
                }
            ]
        },
        {
            "label": "tab:summary:wmc",
            "caption": "Track 2 (WMC) 2023 Iteration",
            "columns": [
                "0\\%",
                "0.1\\%",
                "Submission",
                "Authors",
                "solved"
            ],
            "data": [
                {
                    "0\\%": "1",
                    "0.1\\%": "1",
                    "Submission": "SharpSAT-TD",
                    "Authors": "Tuukka Korhonen, Matti J\u00e4rvisalo",
                    "solved": "75"
                },
                {
                    "0\\%": "",
                    "0.1\\%": "2",
                    "Submission": "D4",
                    "Authors": "Pierre Marquis, Jean-Marie Lagniez",
                    "solved": "67"
                },
                {
                    "0\\%": "2",
                    "0.1\\%": "3",
                    "Submission": "GPMC",
                    "Authors": "Kenji Hashimoto, Shota Yap",
                    "solved": "62"
                },
                {
                    "0\\%": "3",
                    "0.1\\%": "4",
                    "Submission": "ExactMC-Arjun",
                    "Authors": "Yong Lai, Zhenghang Xu, Minghao Yin,Kuldeep S. Meel,  Roland H.C. Yap,",
                    "solved": "59"
                },
                {
                    "0\\%": "",
                    "0.1\\%": "5",
                    "Submission": "Alt-DPMC",
                    "Authors": "Aditya Shrotri, Moshe Vardi",
                    "solved": "36"
                },
                {
                    "0\\%": "",
                    "0.1\\%": "6",
                    "Submission": "DPMC",
                    "Authors": "Vu Phan, Jeffrey Dudek, Moshe Vardi",
                    "solved": "25"
                },
                {
                    "0\\%": "",
                    "0.1\\%": "7",
                    "Submission": "mtmc",
                    "Authors": "Ivor Spence",
                    "solved": "20"
                }
            ]
        },
        {
            "label": "tab:summary:pmc",
            "caption": "Track 3 (PMC) 2023",
            "columns": [
                "0\\%",
                "0.1\\%",
                "0.8",
                "Submission",
                "Authors",
                "solved"
            ],
            "data": [
                {
                    "0\\%": "",
                    "0.1\\%": "",
                    "0.8": "1",
                    "Submission": "Arjun-GANAK-ApproxMC",
                    "Authors": "Mate Soos Kuldeep S. Meel",
                    "solved": "81"
                },
                {
                    "0\\%": "1",
                    "0.1\\%": "1",
                    "0.8": "2",
                    "Submission": "D4",
                    "Authors": "Pierre MarquisJean-Marie Lagniez",
                    "solved": "71"
                },
                {
                    "0\\%": "2",
                    "0.1\\%": "2",
                    "0.8": "3",
                    "Submission": "GPMC",
                    "Authors": "Kenji Hashimoto, Shota Yap",
                    "solved": "67"
                },
                {
                    "0\\%": "3",
                    "0.1\\%": "3",
                    "0.8": "4",
                    "Submission": "Arjun-GANAK",
                    "Authors": "Mate Soos Kuldeep S. Meel",
                    "solved": "64"
                },
                {
                    "0\\%": "4",
                    "0.1\\%": "4",
                    "0.8": "5",
                    "Submission": "DPMC",
                    "Authors": "Vu Phan, Jeffrey Dudek, Moshe Vardi",
                    "solved": "36"
                },
                {
                    "0\\%": "",
                    "0.1\\%": "X",
                    "0.8": "X",
                    "Submission": "Alt-DPMC",
                    "Authors": "Aditya Shrotri, Moshe Vardi",
                    "solved": "12"
                },
                {
                    "0\\%": "",
                    "0.1\\%": "5",
                    "0.8": "6",
                    "Submission": "mtmc",
                    "Authors": "Ivor Spence",
                    "solved": "4"
                }
            ]
        },
        {
            "label": "tab:summary:pwmc",
            "caption": "Track 4 (PWMC) 2023",
            "columns": [
                "0\\%",
                "0.1\\%",
                "Submission",
                "Authors",
                "solved"
            ],
            "data": [
                {
                    "0\\%": "1",
                    "0.1\\%": "1",
                    "Submission": "GPMC",
                    "Authors": "Kenji Hashimoto, Shota Yap",
                    "solved": "82"
                },
                {
                    "0\\%": "",
                    "0.1\\%": "2",
                    "Submission": "D4",
                    "Authors": "Pierre Marquis, Jean-Marie Lagniez",
                    "solved": "72"
                },
                {
                    "0\\%": "2",
                    "0.1\\%": "3",
                    "Submission": "DPMC",
                    "Authors": "Vu Phan, Jeffrey Dudek, Moshe Vardi",
                    "solved": "39"
                },
                {
                    "0\\%": "",
                    "0.1\\%": "4",
                    "Submission": "Alt-DPMC$^\\dagger$",
                    "Authors": "Aditya Shrotri, Moshe Vardi",
                    "solved": "37"
                }
            ]
        },
        {
            "label": "tab:mcauthors",
            "caption": "Authors of the Submissions. 2023 Iteration",
            "columns": [
                "0\\%",
                "0.1\\%",
                "0.8",
                "Submission",
                "Authors",
                "solved"
            ],
            "data": [
                {
                    "0\\%": "",
                    "0.1\\%": "6",
                    "0.8": "7",
                    "Submission": "Alt-DPMC",
                    "Authors": "Aditya Shrotr,  Moshe Vardi",
                    "solved": "50"
                },
                {
                    "0\\%": "",
                    "0.1\\%": "",
                    "0.8": "2",
                    "Submission": "Arjun-GANAK-ApproxMC",
                    "Authors": "Mate Soos, Kuldeep S. Meel",
                    "solved": "79"
                },
                {
                    "0\\%": "",
                    "0.1\\%": "4",
                    "0.8": "5",
                    "Submission": "Arjun-GANAK",
                    "Authors": "Mate  Soos,  Kuldeep S. Meel",
                    "solved": "71"
                },
                {
                    "0\\%": "2",
                    "0.1\\%": "2",
                    "0.8": "3",
                    "Submission": "D4",
                    "Authors": "Pierre Marquis, Jean-Marie Lagniez",
                    "solved": "75"
                },
                {
                    "0\\%": "4",
                    "0.1\\%": "7",
                    "0.8": "8",
                    "Submission": "DPMC",
                    "Authors": "Vu Phan, Jeffrey Dudek, Moshe Vardi",
                    "solved": "43"
                },
                {
                    "0\\%": "",
                    "0.1\\%": "3",
                    "0.8": "4",
                    "Submission": "ExactMC-Arjun",
                    "Authors": "Yong Lai, Zhenghang Xu, Minghao Yin,  Kuldeep S. Meel,  Roland H.C. Yap",
                    "solved": "74"
                },
                {
                    "0\\%": "3",
                    "0.1\\%": "5",
                    "0.8": "6",
                    "Submission": "GPMC",
                    "Authors": "Kenji Hashimoto,  Shota Yap",
                    "solved": "64"
                },
                {
                    "0\\%": "1",
                    "0.1\\%": "1",
                    "0.8": "1",
                    "Submission": "SharpSAT-TD",
                    "Authors": "Tuukka Korhonen, Matti J\u00e4rvisalo",
                    "solved": "82"
                },
                {
                    "0\\%": "",
                    "0.1\\%": "8",
                    "0.8": "9",
                    "Submission": "mtmc",
                    "Authors": "Ivor Spence",
                    "solved": "34"
                }
            ]
        }
    ]
}
